Title,Abstract,Relevance
Using Scrum in Outsourced Government Projects: An Action Research,"The growth in popularity of Agile methods plus a dissatisfaction of Government agencies with traditional software development methods have stimulated the adoption of Agile Methods. The action research approach was used in this work to assess the implementation of a process for the Management of Agile Development Demands - whose original acronym in Portuguese is 'GeDDAS' - for a software factory in a Brazilian Federal Government Organisation. There, two-action research cycles were done with two pilot projects. The work of action research was effective and contributed to the successful outcome of the initiative. The implementation of agile approaches in a public organisation is slow and complex affair mainly due to the interferences made in the working environment of the companies involved and to a high staff turnover. In the end, the difficulties found and lessons learned in the process, as well as the results achieved are presented.",0
Academic and Industrial Software Testing Conferences: Survey and Synergies,"Just as with any other profession, an efficient way to exchange ideas and networking in software testing are conferences, workshops and similar events. This is true for both professional testers and researchers working in the testing area. However, these two groups usually look for different kinds of events: a tester likes to attend 'industrial' (sometimes called practitioner's or user) conferences, whereas a researcher is more likely interested in 'academic' (in other words scientific or research) conferences. Although there are notable exceptions, this separation is substantial, which hinders a successful academy-industry collaboration, and communication about the demand and supply of research in software testing. This paper reviews 101 conferences: two thirds are academic ones, the rest being industrial. Besides providing this reasonably comprehensive list, we analyze any visible synergies such as events that have a mixed Program Committee and offer a program with elements from both sides. We found only a handful of such events, but these can serve both as opportunities for attendees who wish to extend their perspectives and as models for organizers of future conferences.",0
Light-Touch Interventions to Improve Software Development Security,"Many software developers still have little interest in software security. To change this, we need 'interventions' to development teams to motivate and help them towards security improvement. An intervention costing less than two days' effort from a facilitator plus half a day of team effort can significantly improve that team's software security. This case study describes how this approach was used with one commercial team, and identifies its impact using Participative Action Research. With suitable improvements, the approach has the potential to help many other development teams.",0
Interventions for Software Security: Creating a Lightweight Program of Assurance Techniques for Developers,"Though some software development teams are highly effective at delivering security, others either do not care or do not have access to security experts to teach them how. Unfortunately, these latter teams are still responsible for the security of the systems they build: systems that are ever more important to ever more people. We propose that a series of lightweight in-terventions, six hours of facilitated workshops delivered over three months, can improve a team's motivation to consider security and awareness of assurance techniques, changing its security culture even when no security experts are involved. The interventions were developed after an Appreciative Inquiry and Grounded Theory survey of security professionals to find out what approaches work best. They were then validated in fieldwork with a Participatory Action Research study that de-livered the workshops to three development organizations. This approach has the potential to be applied by many development teams, improving the security of software worldwide.",0
Measuring and Improving Agile Processes in a Small-Size Software Development Company,"Context: Agile software development has become commonplace in software development companies due to the numerous benefits it provides. However, conducting Agile projects is demanding in Small and Medium Enterprises (SMEs), because projects start and end quickly, but still have to fulfil customers' quality requirements. Objective: This paper aims at reporting a practical experience on the use of metrics related to the software development process as a means supporting SMEs in the development of software following an Agile methodology. Method: We followed Action-Research principles in a Polish small-size software development company. We developed and executed a study protocol suited to the needs of the company, using a pilot case. Results: A catalogue of Agile development process metrics practically validated in the context of a small-size software development company, adopted by the company in their Agile projects. Conclusions: Practitioners may adopt these metrics in their Agile projects, especially if working in an SME, and customise them to their own needs and tools. Academics may use the findings as a baseline for new research work, including new empirical studies.",0
Towards Automated Detection of Data Pipeline Faults,"Data pipelines play an important role throughout the data management process. It automates the steps ranging from data generation to data reception thereby reducing the human intervention. A failure or fault in a single step of a data pipeline has cascading effects that might result in hours of manual intervention and clean-up. Data pipeline failure due to faults at different stages of data pipelines is a common challenge that eventually leads to significant performance degradation of data-intensive systems. To ensure early detection of these faults and to increase the quality of the data products, continuous monitoring and fault detection mechanism should be included in the data pipeline. In this study, we have explored the need for incorporating automated fault detection mechanisms and mitigation strategies at different stages of the data pipeline. Further, we identified faults at different stages of the data pipeline and possible mitigation strategies that can be adopted for reducing the impact of data pipeline faults thereby improving the quality of data products. The idea of incorporating fault detection and mitigation strategies is validated by realizing a small part of the data pipeline using action research in the analytics team at a large software-intensive organization within the telecommunication domain.",0
On the Experiences of Adopting Automated Data Validation in an Industrial Machine Learning Project,"Background: Data errors are a common challenge in machine learning (ML) projects and generally cause significant performance degradation in ML-enabled software systems. To ensure early detection of erroneous data and avoid training MLmodels using bad data, research and industrial practice suggest incorporating a data validation process and tool in the ML system development process. Aim: The study investigates the adoption of a data validation process and tool in industrial ML projects. The data validation process demands significant engineering resources for tool development and maintenance. Thus, it is important to identify the best practices for their adoption especially by development teams that are in the early phases of deploying ML-enabled software systems. Method: Action research was conducted at a large-software intensive organization in telecommunications, specifically within the analytics R&D organization for an ML use case of classifying faults from returned hardware telecommunication devices. Results: Based on the evaluation results and learning from our action research, we identified three best practices, three benefits, and two barriers to adopting the data validation process and tool in ML projects. We also propose a data validation framework(DVF) for systematizing the adoption of a data validation process. Conclusions: The results show that adopting a data validation process and tool in ML projects is an effective approach to testing ML-enabled software systems. It requires having an overview of the level of data (feature, dataset, cross-dataset, data stream) at which certain data quality tests can be applied.",0
"The Diversity of Gamification Evaluation in the Software Engineering Education and Industry: Trends, Comparisons and Gaps","Context: gamification has been used to motivate and engage participants in software engineering education and practice activities. Problem: There is a significant demand for empirical studies for the understanding of the impacts and efficacy of gamification. However, the lack of standard procedures and models for the evaluation of gamification is a challenge for the design, comparison, and report of results related to the assessment of gamification approaches and its effects. Goal: The goal of this study is to identify models and strategies for the evaluation of gamification reported in the literature. Method: To achieve this goal, we conducted a systematic mapping study to investigate strategies for the evaluation of gamification in the context of software engineering. We selected 100 primary studies on gamification in software engineering (from 2011 to 2020). We categorized the studies regarding the presence of evaluation procedures or models for the evaluation of gamification, the purpose of the evaluation, the criteria used, the type of data, instruments, and procedures for data analysis. Results: Our results show that 64 studies report procedures for the evaluation of gamification. However, only three studies actually propose evaluation models for gamification. We observed that the evaluation of gamification focuses on two aspects: the evaluation of the gamification strategy itself, related to the user experience and perceptions; and the evaluation of the outcomes and effects of gamification on its users and context. The most recurring criteria for the evaluation are ""engagement"", ""performance"", ""satisfaction"", and ""motivation"". Finally, the evaluation of gamification requires a mix of subjective and objective inputs, and qualitative and quantitative data analysis approaches. Depending of the focus of the evaluation (the strategy or the outcomes), there is a predominance of a type of data and analysis.",0
"The Diversity of Gamification Evaluation in the Software Engineering Education and Industry: Trends, Comparisons and Gaps","Context: gamification has been used to motivate and engage participants in software engineering education and practice activities. Problem: There is a significant demand for empirical studies for the understanding of the impacts and efficacy of gamification. However, the lack of standard procedures and models for the evaluation of gamification is a challenge for the design, comparison, and report of results related to the assessment of gamification approaches and its effects. Goal: The goal of this study is to identify models and strategies for the evaluation of gamification reported in the literature. Method: To achieve this goal, we conducted a systematic mapping study to investigate strategies for the evaluation of gamification in the context of software engineering. We selected 100 primary studies on gamification in software engineering (from 2011 to 2020). We categorized the studies regarding the presence of evaluation procedures or models for the evaluation of gamification, the purpose of the evaluation, the criteria used, the type of data, instruments, and procedures for data analysis. Results: Our results show that 64 studies report procedures for the evaluation of gamification. However, only three studies actually propose evaluation models for gamification. We observed that the evaluation of gamification focuses on two aspects: the evaluation of the gamification strategy itself, related to the user experience and perceptions; and the evaluation of the outcomes and effects of gamification on its users and context. The most recurring criteria for the evaluation are ""engagement"", ""performance"", ""satisfaction"", and ""motivation"". Finally, the evaluation of gamification requires a mix of subjective and objective inputs, and qualitative and quantitative data analysis approaches. Depending of the focus of the evaluation (the strategy or the outcomes), there is a predominance of a type of data and analysis.",0
Industry-Academy Collaboration in Agile Methodology: a Systematic Literature Review,"Industry-Academy Collaborative Research (IAC) in Software Engineering is being applied and developed widely in practice. These collaborative, research practices help both academic and software industry environments. As a way of observing what is being developed in SE, the objective of this article is to present an exploratory and empirical study of IAC practices in the context of Agile Software Development (ASD), exploring and characterizing solutions and practices, the challenges encountered in the application of the IAC and in collaboration. A Systematic Literature Review (SLR) was carried out in the five main academic databases, and snowballing was applied, evaluating/analyzing 8.460 articles, totaling 21 articles approved following the proposed criteria. As a result of the data analysis, 76 good practices and 37 challenges in carrying out the IAC were described. As well, practical collaborative models for the application of the IAC were detailed.",0
Data sovereignty for {AI} pipelines,"The establishment of collaborative AI pipelines, in which multiple organizations share their data and models, is often complicated by lengthy data governance processes and legal clarifications. Data sovereignty solutions, which ensure data is being used under agreed terms and conditions, are promising to overcome these problems. However, there is limited research on their applicability in AI pipelines. In this study, we extended an existing AI pipeline at Mondragon Corporation, in which sensor data is collected and subsequently forwarded to a data quality service provider with a data sovereignty component. By systematically reflecting and generalizing our experiences during the twelve-month action research project, we formulated ten lessons learned, four benefits, and three barriers to data-sovereign AI pipelines that can inform further research and custom implementations. Our results show that a data sovereignty component can help reduce existing barriers and increase the success of collaborative data science initiatives. CCS CONCEPTS • Security and privacy → Privacy protections; • Software and its engineering → Data flow architectures.",0
Fostering Industry-Academia Collaboration in Software Engineering using Action Research: A Case Study,,1
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
Toward Efficient Academia-Industry Collaboration: A Case Study of Joint {VR} System Development,,0
An Action Research for Improving the Sustainability Assessment Framework Instruments,"In the last years, software engineering researchers have defined sustainability as a quality requirement of software, but not enough effort has been devoted to develop new methods/techniques to support the analysis and assessment of software sustainability. In this study, we present the Sustainability Assessment Framework (SAF) that consists of two instruments: the software sustainability–quality model, and the architectural decision map. Then, we use participatory and technical action research in close collaboration with the software industry to validate the SAF regarding its applicability in specific cases. The unit of analysis of our study is a family of software products (Geographic Information System- and Mobile-based Workforce Management Systems) that aim to address sustainability goals (e.g., efficient collection of dead animals to mitigate social and environmental sustainability risks). The results show that the sustainability–quality model integrated with the architectural decision maps can be used to identify sustainability–quality requirements as design concerns because most of its quality attributes (QAs) have been either addressed in the software project or acknowledged as relevant (i.e., creating awareness on the relevance of the multidimensional sustainability nature of certain QAs). Moreover, the action–research method has been helpful to enrich the sustainability–quality model, by identifying missing QAs (e.g., regulation compliance, data privacy). Finally, the architectural decision maps have been found as useful to guide software architects/designers in their decision-making process.",0
Specifying Features in Terms of Domain Models: {MuDForM} Method Definition and Case Study,"To enable the people involved in a software development process to communicate and reason close to their area of knowledge, we are investigating a method to formalize and integrate knowledge of multiple domains into domain models and into specifications in terms of those domain models. For this purpose, we have previously defined a set of method objectives, and an initial version of the method –called MuDForM. This paper reports on the methodical support for using a domain model as terminology to define other specifications, and feature specifications in particular. We performed a case study to validate how well the method helps in the specification of processes and to realize the case-specific objectives of the customer. The case study pertains to the formalization of the ISO26262 standard for functional safety in the automotive domain. We found that our method is suitable to systematically formalize a process that is described in natural language, such that there is a clear separation of domain-specific concepts, unambiguous process specifications, and concepts from outside the domain and process of interest. We have extended our method with concepts, steps, and guidelines for grammatical analysis, for the formalization of constraints, and for the specification of processes. The case-specific results are the unambiguous specification of a part of the ISO26262 processes.",0
Automotive {UX} design and data-driven development: Narrowing the gap to support practitioners,,0
The Design of a Public Service Cost Model Tool to Evaluate Digital Transformation in Brazilian Government,,0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Exploring the industry{\textquotesingle}s challenges in software testing: An empirical study,"Context: Software testing is an important and costly software engineering activity in the industry. Despite the efforts of the software testing research community in the last several decades, various studies show that still many practitioners in the industry report challenges in their software testing tasks.

Objective: To shed light on industry’s challenges in software testing, we characterize and synthesize the challenges reported by practitioners. Such concrete challenges can then be used for a variety of purposes, e.g., research collaborations between industry and academia. 

Method: Our empirical research method is opinion survey. By designing an online survey, we solicited practitioners’ opinions about their challenges in different testing activities. Our dataset includes data from 72 practitioners from eight different countries. 

Results: Our results show test management and test automation are considered the most challenging among all testing activities by practitioners. Our results also include a set of 104 concrete challenges in software testing that may need further investigations by the research community.

Conclusion: We conclude that the focal points of industrial work and academic research in software testing differ. Furthermore, the paper at hand provides valuable insights concerning practitioners’ “pain” points and, thus, provides researchers with a source of important research topics of high practical relevance.",0
Model-based testing in practice: An experience report from the web applications domain,"In the context of a software testing company, we have deployed the model-based testing (MBT) approach to take the company’s test automation practices to higher levels of maturity and capability. We have chosen, from a set of open-source/commercial MBT tools, an open-source tool named GraphWalker, and have pragmatically used MBT for end-to-end test automation of several large web and mobile applications under test. The MBT approach has provided, so far in our project, various tangible and intangible benefits in terms of improved test coverage (number of paths tested), improved test-design practices, and also improved real-fault detection effectiveness. The goal of this experience report (applied research report), done based on “action research”, is to share our experience of applying and evaluating MBT as a software technology (technique and tool) in a real industrial setting. We aim at contributing to the body of empirical evidence in industrial application of MBT by sharing our industry-academia project on applying MBT in practice, the insights that we have gained, and the challenges and questions that we have faced and tackled so far. We discuss an overview of the industrial setting, provide motivation, explain the events leading to the outcomes, discuss the challenges faced, summarize the outcomes, and conclude with lessons learned, take-away messages, and practical advices based on the described experience. By learning from the best practices in this paper, other test engineers could conduct more mature MBT in their test projects.",0
Case Studies of Industry-Academia Research Collaborations for Software Development with Agile,,0
Documentation-as-code for Interface Control Document Management in Systems of Systems: a Technical Action Research Study,"The architecting of Systems of Systems (SoS), that is, of systems that emerge from the cooperation of multiple independent constituent systems, is a topic of increasing interest in both industry and academia. However, recent empirical studies revealed what seems to be an overlooked aspect of the architecting of SoS that is linked to major integration and operational issues: the interplay between the various disciplines involved in such an architecting process. This aspect becomes particularly relevant for the management of the interfaces between the SoS constituents, where such disciplines inevitably meet. In this paper, we present the results of the first cycle of a Technical Action Research (TAR) study conducted in cooperation between the authors and a group of practitioners involved in the long-running architecting process of a large-scale radio astronomy SoS project. This TAR is aimed at exploring potential improvements of the document-centered interface management approach currently followed in this project by adopting elements of the documentation-as-code philosophy, which is widely adopted in the domain of software systems. As a result, a working proof-of-concept of an ICD (Interface Control Document) management approach was developed by the researchers and evaluated by the practitioners. The results of the study and the corresponding lessons learned are reported in this work.

------------------

Paper accepted in the 16th European Conference on Software Architecture (ECSA). 
Preprint: https://arxiv.org/pdf/2206.11668.pdf",0
A comparison of the performance and scalability of relational and document-based web-systems for large scale applications in a rehabilitation context.,,0
Supporting refactoring of {BDD} specifications{\textemdash}An empirical study,,0
Concept analysis in programming language research: done well it is all right,"Programming language research is becoming method conscious. Rigorous mathematical or empirical evaluation is often demanded, which is a good thing. However, I argue in this essay that concept analysis is a legitimate research approach in programming languages, with important limitations. It can be used to sharpen vague concepts, and to expose distinctions that have previously been overlooked, but it does not demonstrate the superiority of one language design over another. Arguments and counter-arguments are essential to successful concept analysis, and such thoughtful conversations should be published more.",0
Applying data analytics towards optimized issue management,"This document describes our experience of applying data analytics at Plexina, a leading IT company working in the healthcare domain. The main goal of the project was to identify factors currently affecting issue management and to make analytics based suggestions for optimizing the process. Various statistical and machine learning techniques were applied on a data set extracted from six releases of Plexina, containing more than 666 issues. Statistical techniques successfully identified the various factors that leads to estimation inaccuracy related to issues as well as identified the hidden relationships existing among various variables. The employed predictive analytic models was also successful to some extent, in predicting effort estimation related inaccuracy associated with the issues. The insights provided by the entire data analytics study can be of great help to product managers or the developers to make more informed decisions. In addition, the guidelines presented in this paper based on the lessons learnt can be applied to other data analytics and academia-industry collaboration project.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
From Blackboard to the Office: A Look Into How Practitioners Perceive Software Testing Education,,0
Structuring automotive product lines and feature models: an exploratory study at Opel,,0
Sustainability analysis and ease of learning in artifact-based requirements engineering: The newest member of the family of studies (It's a girl!),,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Uma Pesquisa-A{\c{c}}{\~{a}}o no Contexto de Processos de Engenharia de Requisitos em uma Institui{\c{c}}{\~{a}}o P{\'{u}}blica Brasileira,"A Engenharia de Requisitos se destaca como uma fase fundamental na Engenharia de Software por instituir uma visão estrita e comum entre o cliente e a equipe do projeto sobre os requisitos do software a ser desenvolvido. Este estudo foi realizado utilizando a metodologia de pesquisa-ação em uma instituição pública, com objetivo de propor e aplicar um processo para elicitação e documentação de requisitos em nível de usuário. No processo, um modelo foi usado para documentar os requisitos usando a SysML (Systems Modeling Language). No estudo foi realizada uma avaliação qualitativa e quantitativa para avaliar a eficácia do processo. Os resultados sugerem que a intervenção alcançou resultados positivos, incluindo evidências de melhorias na elicitação e documentação dos requisitos do usuário.",0
Uma Pesquisa-A{\c{c}}{\~{a}}o no Contexto de Processos de Engenharia de Requisitos em uma Institui{\c{c}}{\~{a}}o P{\'{u}}blica Brasileira,"A Engenharia de Requisitos se destaca como uma fase fundamental na Engenharia de Software por instituir uma visão estrita e comum entre o cliente e a equipe do projeto sobre os requisitos do software a ser desenvolvido. Este estudo foi realizado utilizando a metodologia de pesquisa-ação em uma instituição pública, com objetivo de propor e aplicar um processo para elicitação e documentação de requisitos em nível de usuário. No processo, um modelo foi usado para documentar os requisitos usando a SysML (Systems Modeling Language). No estudo foi realizada uma avaliação qualitativa e quantitativa para avaliar a eficácia do processo. Os resultados sugerem que a intervenção alcançou resultados positivos, incluindo evidências de melhorias na elicitação e documentação dos requisitos do usuário.",0
Inventorying Systems: An Action Research,,0
Introduction,,0
Die Entwicklungsbeschleunigung von Robotic Process Automation Lösungen~{\textendash} Fallstudie einer deutschen Gesundheitsbehörde,"Zusammenfassung
Krisen erfordern flexibles Handeln und schnelle Anpassungen sowohl von Menschen als auch von öffentlichen Institutionen. Die öffentliche Hand und insbesondere die deutschen Gesundheitsbehörden sind während der Covid-19-Pandemie, beginnend im März 2020, massiv herausgefordert. Die Bewältigung des teilweise exponentiell wachsenden Prozessvolumens durch kurzfristige Infektionsereignisse muss in kürzester Zeit fachgerecht erfolgen und unterliegt einer permanenten Reaktion und Anpassung an sich ändernde Rahmenbedingungen. Bestehende Strukturen und ineffiziente Prozesse erschweren diese notwendige Skalierung der Bearbeitung zunehmend. In diesem Beitrag werden mittels Aktionsforschung Ansätze für eine beschleunigte und flexible Entwicklung von Robotic Process Automation (RPA)-Lösungen zur Automatisierung bestehender Verwaltungsprozesse innerhalb einer betroffenen Gesundheitsbehörde in Deutschland untersucht. Als Ergebnis wurden Ansätze für eine schnellere und weniger komplexe Entwicklung von RPA-Lösungen in einer sehr schnell skalierenden und gleichzeitig stark heterogenen IT-Systemlandschaft erarbeitet und bewertet.",0
Interventions for long-term software security: Creating a lightweight program of assurance techniques for developers,"Though some software development teams are highly effective at delivering security, others either do not care or do not have access to security experts to teach them how. Unfortunately, these latter teams are still responsible for the security of the systems they build: systems that are ever more important to ever more people. We propose that a series of lightweight interventions, six hours of facilitated workshops delivered over three months, can improve a team's motivation to consider security and awareness of assurance techniques, changing its security culture even when no security experts are involved. The interventions were developed after an Appreciative Inquiry and Grounded Theory survey of security professionals to find out what approaches work best. We tested the interventions in a participatory action research field study where we delivered the workshops to three software development organizations and evaluated their effectiveness through interviews beforehand, immediately afterwards, and after twelve months. We found that the interventions can be effective with teams with limited or no security experience and that improvement is long‐lasting. This approach and the learning points arising from the work here have the potential to be applied in many development teams, improving the security of software worldwide.",0
Guiding the selection of research methodology in industry{\textendash}academia collaboration in software engineering,,1
Successful combination of database search and snowballing for identification of primary studies in systematic literature studies,,0
A proposal for using design science in small-scale postgraduate research projects in information technology,Design science is a research paradigm where the development and evaluation of an artefact is a key contribution. Design science is used in many domains and this paper draws on those domains to formulate a generic structure for design science research suitable for small-scale postgraduate information technology research projects. The paper includes guidelines for writing proposals and a generic research report structure. The paper presents ethical issues to consider in design science research and contributes guidelines for assessment.,0
Towards an Approach Matching CMD and DSR to Improve the Academia-Industry Software Development Partnership: A Case of Agile and UX Integration,"The interest on promoting the Academia-Industry partnership in the software development field has been increasingly encouraged by means of research approaches that support the cooperation between researchers and practitioners. The main focus is driven by the collaborative work where the scientific research work meets the real needs of the Industry. Aiming to contribute to this effort we present an approach called Soft Coder (Software Cooperative Design Research) that combines CMD (Cooperative Method Development), a method of Action Re-search, to concepts of DSR (Design Science Research). Our proposal supports the conduction of projects integrating the view-points of Industry and Academia, aiming to add User experience (UX) methods into agile practices. We carried out two studies applying the Soft Coder approach in a software Industry, work in close cooperation with UX and SCRUM teams for building and evaluating artifacts based on UX methods to support practical activities of both teams.",0
Start With Problems or Solutions? Medical Device Design in Industry and Academia,"Design processes can be influenced by their practice environments. Although design processes of industry engineers have been examined in multiple research studies, few studies have investigated design processes of academic engineers. As academia and industry have different sociocultural norms and constraints, their design processes likely also differ. To examine this question, we conducted semi-structured interviews with both academic and industry engineers who had successfully designed medical devices. Our qualitative findings revealed that engineers in industry described their design process as a sequence with problem definition, solution exploration, detail design, evaluation, and communication. Academic engineers, in contrast, described their design process as beginning with a discovered solution, then searching for application problems, evaluating compatibility between problems and solution, and finally, communicating their findings through publications. Understanding differences in design processes of academic and industry engineers can facilitate knowledge sharing and promote collaboration between academia and industry. The findings also highlight the impact of sociocultural norms on practices, even in disciplines with highly trained and clearly defined processes.",0
Challenges of Structured Reuse Adoption {\textemdash} Lessons Learned,"Adoption of structured reuse approaches in practice often poses multiple challenges. Research-industry collaborations are considered as suitable vehicle to mitigate adoption difficulties as well as to validate the applicability of scientific results. However, research cooperations with industry do not always live up to the expectations of either of the partners. Unfortunately for researchers and practitioners alike, insights behind the scenes of failed adoption and cooperation are often difficult to obtain. This hinders discussions on lessons learned by organizations during the adoption process and delays improvements. This paper aims to mitigate this issue by presenting lessons learned from interviews we conducted with practitioners in the context of a study on software reuse in industry. The study covered a wide range of aspects, including the process of reuse adoption. One of the participating companies had undertaken two attempts to adopt a form of structured reuse. However, both attempts did not succeed as expected. In our study, we identified tacit assumptions that were related to the encountered difficulties and present the lessons learned from the adoption approach. Furthermore , we report strategies that helped us to overcome the skepticism caused by a previous unsuccessful guided collaboration.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Knowledge Management in University-Software Industry Collaboration,"The university-software industry collaboration relationship has been represented a key resource, to the extent that together they can more easily promote technological development that underpins innovation solutions. Through a literature review, this chapter aims to explore the concepts and the facilitator or inhibitor factors associated with the collaboration relationships between university and software industry, taking knowledge management into account. This chapter is organized as follows. In the first section, the
authors briefly introduce university, software industry, and knowledge management. The following section, based on the literature reviewed, provides a critical discussion of the university-software industry collaboration relationship, knowledge management in knowledge intensive organizations or community, and knowledge management in collaboration relationship between these two types of industries. Finally, in the rest of the sections, the authors point to future research directions and conclude.",1
"{SoftCoDeR} approach: promoting Software Engineering Academia-Industry partnership using {CMD}, {DSR} and {ESE}","Background
The Academia-Industry partnership has been increasingly encouraged in the software development field. The main focus of the initiatives is driven by the collaborative work where the scientific research work meets the real needs of the Industry. Methods
Aiming to contribute to this effort we have proposed an approach called SoftCoDeR (Software Cooperative Design Research) that combines CMD (Cooperative Method Development), a method of Action Research, to concepts of DSR (Design Science Research). ResultsWe have applied the SoftCoDeR approach in a software development company to support a research and development project aiming to integrate User Experience practices into the agile software development process. Conclusions
In this paper, we present new findings about this approach that has been extended with the use of Experimental Software Engineering (ESE) practices to conduct experimental validations of artifacts before putting them in industrial practice.",1
The measurement process in micro and small software maintenance companies: empirical study,"With the dissemination of quality models and the need for measurement-based management for software organizations, a variety of approaches and models are emerging to support organizations on this journey. According to a Systematic Review of Literature that selected 30 of 692 papers returned from search sources, it was noticed the need for guidelines and guides regarding the measurement process in a specific sector: micro and small companies that work with software maintenance. In this work, an empirical study was carried out to understand how the measurement process aligned with quality models can be implemented in these organizations. The field study followed the implementation of an improvement program based on CMMI® level 2 in 7 Brazilian companies from Maringá, Paraná. Finally, it was found that the process for the definition of a measurement guide can be common to a specific group of companies, taking steps and guidelines for its execution, always aligned with the organization’s strategy, giving top management an objective view work and process, supporting decision making.",0
Applying Design Science Research to Design and Evaluate Real-Time Road Traffic State Estimation Framework,This paper presents how design science research can be used to design and evaluate real-time road traffic state estimation framework. An integrated framework of the six process steps of design science research process model and the Matching Analysis-Projection-Synthesis (MAPS) tool was used as a research design to develop the proposed state estimation framework. The utility and efficiency of the framework was evaluated based on the adapted design science research evaluation guideline through simulation and the estimation accuracy indicated that reliable road traffic state estimation can be generated based on the developed framework.,0
"The use of
$\less$scp$\greater$Design Science$\less$/scp$\greater$
and
$\less$scp$\greater$Agile Methodologies$\less$/scp$\greater$
for improved information systems in the
$\less$scp$\greater$T$\less$/scp$\greater$
anzanian
$\less$scp$\greater$Higher Education$\less$/scp$\greater$
context","There was no known effective approach to implementing information systems in Tanzanian Higher Education Institutions (HEIs) because the requirements of users change frequently and HEIs vary in their requirements. Theoretically, the agile software development process and Design Science Research (DSR) could deliver software that suits such a context, yet no testing had been done priorly. Therefore, this study aimed on investigating the suitability of the combination of Agile Methodologies and the DSR in developing information systems for Tanzania's HEIs. The study used eXtreme Programming as one of the Agile Methodologies and the DSR to develop a timetabling software which easily integrates into the existing academic information system of the College of Business Education for better decision making. Likewise, the evaluation of the developed artifact confirmed that the resulting product raised the user satisfaction with the information system in HEIs. In this regard, the current study advances the frontier of knowledge on using the DSR framework and Agile Methodologies in designing and developing software in Tanzania's HEIs and beyond.",0
Energizing collaborative industry-academia learning: a present case and future visions,,0
Empirical study of the evaluation of perspectives to knowledge capitalisation in Brazilian software industry,"Knowledge capitalisation directs the activities of use, exploitation and reuse of knowledge for performing new tasks, including technical and management aspects. Specifically, considering software development, knowledge capitalisation demands an analysis that considers four complementary and interdependent perspectives on knowledge: value, security, utility and status. These perspectives focus on different facets according to which knowledge can be analysed, in addition to provide a foundation for a better awareness on knowledge and the necessary treatment. This study presents an empirical study with the purpose of evaluating the relevance of these perspectives by using a survey questionnaire distributed to software development companies in the Brazilian market. Three hundred thirty nine individuals from different 339 companies were subjects of such a study. The results indicate that the perspectives are relevant for evaluating knowledge and reinforcing the relevance of exploring knowledge capitalisation in software development; therefore, there is a clear understanding of how the knowledge assets involved can be analysed or assessed.",0
Business value appropriation roadmap for artificial intelligence,,0
Leveraging organizational climate theory for understanding industry-academia collaboration,,1
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Case Studies of Industry-Academia Research Collaborations for Software Development with Agile,,0
Data for: Benefits and Drawbacks of Software Reference Architectures: A Case Study,,0
"Scaling agile in large organizations: Practices, challenges, and success factors",,0
An alumni-based collaborative model to strengthen academia and industry partnership: The current challenges and strengths,"Industry-academia collaboration (IAC) has long been a source of discussion in various ways. A vital first step toward closing the gap is fostering alumni engagement in industry and academia. Industry-academia collaborations are like earth and water, and they live in harmony. They cannot exist apart from one another. The collaborative effort between industry and academia promotes improvement and innovation in technology and innovative research and enables the university to be more relevant to the industry. This article proposes a collaborative approach based on alumni influences and uses secondary data on the influences of alumni in engineering to enrich the collaboration between industry and academia. The industry and academia utilize the alumni’s potential to facilitate communication and offer their students and staff facilities. The research findings can be used by policymakers to innovate in the field of engineering and to strengthen the partnership between industry and academia in society. The model enables academia and industry to utilize the alumni strengths in enriching the collaboration; it also enhances academic research output, recruitment, fundraising, marketing, product promotion, and internship opportunities for students via alumni active participation. We propose some significant agendas for future work.",0
Towards guidelines for building a business case and gathering evidence of software reference architectures in industry,"Software reference architectures are becoming widely adopted by organizations that need to support the design and maintenance of software applications of a shared domain. For organizations that plan to adopt this architecture-centric approach, it becomes fundamental to know the return on investment and to understand how software reference architectures are designed, maintained, and used. Unfortunately, there is little evidence-based support to help organizations with these challenges.
We have conducted action research in an industry-academia collaboration between the GESSI research group and everis, a multinational IT consulting firm based in Spain.
The results from such collaboration are being packaged in order to create guidelines that could be used in similar contexts as the one of everis. The main result of this paper is the construction of empirically-grounded guidelines that support organizations to decide on the adoption of software reference architectures and to gather evidence to improve RA-related practices.
The created guidelines could be used by other organizations outside of our industry-academia collaboration. With this goal in mind, we describe the guidelines in detail for their use.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Exploring the under-explored terrain of non-open source data for software engineering through the lens of federated learning,,0
Leveraging organizational climate theory for understanding industry-academia collaboration,,1
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
Lessons Learned on Research Co-Creation: Making Industry-Academia Collaboration Work,"How to increase the impact of software engineering research in the software industry and the society at large is a critical yet perplexing question to answer. Constrained by curtailed communication between researchers and practitioners, research conducted in a vacuum, or the ""publish or perish"" mindset, research collaborations between industry and academia often fail to deliver on the promise of creating a meaningful impact for practitioners. In an attempt to address these circumstances, this paper gives insights on applying research value co-creation to industry-academia collaboration in software engineering. We observe that the core of co-creation includes commitment, continuous engagement and alignment, aiming to produce value for both sides. Further we contend that co-creation has the potential to bridge the acknowledged research-practice collaboration gap through participative knowledge generation. Our experience stems from an eight-year long large collaborative project between a research organization and Norwegian software industry and public sector services. We suggest that for achieving research impact one needs to rethink the way industry and academia engage in and run collaborative projects. Traditional technology-transfer workflows where research is created in a lab and then pushed to industry practice do not stand the best chance of success. Instead, co-creating research with all stakeholders is likely to bring about the best research impact.",1
Organizing Empirical Studies as Learning Iterations in Design Science Research Projects,,0
{SERP}-test: a taxonomy for supporting industry{\textendash}academia communication,"This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry–academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.",1
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Guiding the selection of research methodology in industry{\textendash}academia collaboration in software engineering,,1
Industry-academia collaboration in software testing: An overview of TAIC PART 2015,"Collaboration between industry and academia in software testing leads to improvement and innovation in industry and it is the basis for achieving sustainable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. This paper presents an overview of the 10th Testing: Academic and Industrial Conference - Practice and Research Techniques (TAIC PART 2015) and its contributions.",0
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
Industry-Academia Collaboration in Software Testing: An Overview of TAIC PART 2016,"Collaboration between industry and academia in software testing leads to improvement and innovation in industry, and it is the basis for achieving transferable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. We present an overview of the 11th Workshop on Testing: Academia-Industry Collaboration, Practice and Research Techniques (TAIC PART 2016) and its contributions.",0
Lessons Learned on Research Co-Creation: Making Industry-Academia Collaboration Work,"How to increase the impact of software engineering research in the software industry and the society at large is a critical yet perplexing question to answer. Constrained by curtailed communication between researchers and practitioners, research conducted in a vacuum, or the ""publish or perish"" mindset, research collaborations between industry and academia often fail to deliver on the promise of creating a meaningful impact for practitioners. In an attempt to address these circumstances, this paper gives insights on applying research value co-creation to industry-academia collaboration in software engineering. We observe that the core of co-creation includes commitment, continuous engagement and alignment, aiming to produce value for both sides. Further we contend that co-creation has the potential to bridge the acknowledged research-practice collaboration gap through participative knowledge generation. Our experience stems from an eight-year long large collaborative project between a research organization and Norwegian software industry and public sector services. We suggest that for achieving research impact one needs to rethink the way industry and academia engage in and run collaborative projects. Traditional technology-transfer workflows where research is created in a lab and then pushed to industry practice do not stand the best chance of success. Instead, co-creating research with all stakeholders is likely to bring about the best research impact.",1
Strengthening the Bridge Between Academic and the Industry Through the Academia-Industry Collaboration Plan Design Model,"The study has been undertaken to integrate two different aspects of the triple helix model: universities and the industry. Special attention has been paid to the prevailing difference between the two, hampering their working as a coherent unit. Integrating the existing knowledge in the study, we proposed the Academia-Industry Collaboration Plan (AICP) design model. The model comprises processes, methods or approaches, and tools. Processes serve as a road map to third parties for establishing collaboration between academia and the industry. It has all the essential process models and a series of steps that help minimize the organizational complexity of the collaboration process between academia and the industry. Methods or approaches serve the purpose of implementing those processes effectively. Finally, appropriate tools are selected to integrate possible collaboration improvements that lead to innovation.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
A bibliometric analysis of the Turkish software engineering research~community,,0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
An alumni-based collaborative model to strengthen academia and industry partnership: The current challenges and strengths,"Industry-academia collaboration (IAC) has long been a source of discussion in various ways. A vital first step toward closing the gap is fostering alumni engagement in industry and academia. Industry-academia collaborations are like earth and water, and they live in harmony. They cannot exist apart from one another. The collaborative effort between industry and academia promotes improvement and innovation in technology and innovative research and enables the university to be more relevant to the industry. This article proposes a collaborative approach based on alumni influences and uses secondary data on the influences of alumni in engineering to enrich the collaboration between industry and academia. The industry and academia utilize the alumni’s potential to facilitate communication and offer their students and staff facilities. The research findings can be used by policymakers to innovate in the field of engineering and to strengthen the partnership between industry and academia in society. The model enables academia and industry to utilize the alumni strengths in enriching the collaboration; it also enhances academic research output, recruitment, fundraising, marketing, product promotion, and internship opportunities for students via alumni active participation. We propose some significant agendas for future work.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
From Blackboard to the Office: A Look Into How Practitioners Perceive Software Testing Education,,0
"Enablers facilitating industry-academia, transnational~education and university-community partnering agility in higher education","Purpose
The study has a two-fold purpose: first, to identify the enablers of partnering agility in higher education, and, second, to analyze the interplay between the enablers.

Design/methodology/approach
Total interpretive structural modelling (TISM) was used to construct a theoretical model of partnering agility enablers, and cross-impact matrix multiplication applied to classification (MICMAC) analysis was used to rank and segregate the enablers into independent, autonomous, dependent and linkage zones on the basis of their driving and dependence power.

Findings
The study helped in identifying eight enablers that can be instrumental in driving partnering agility in higher education. According to the TISM model, clarity on roles and responsibilities of partners was found to be the most crucial and vital enabler followed by resource sharing.

Practical implications
The conceptual model provides a new direction on how to develop and strengthen higher education partnerships. The model has prioritized all the crucial enablers that the management can work around in order to drive partnering agility in higher education institutions.

Originality/value
Studies in the past have majorly focused on academia–industry partnerships. This research has tried to provide a comprehensive view of the enablers and the multidirectional interplay between the enablers that can facilitate partnerships between academia and industry, Indian and international universities, and academia and community.",0
A Survey of Types of Industry-Academia Collaboration,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
An empirical investigation of transferring research to software technology innovation,"Context: Governments are providing more and more support for academia-industry collaborations for industry led research and innovation via Cooperative Research Centers (CRC). It is important to understand the processes and practices of such programs for transferring scientific R&D to innovation. Goal: We aimed at empirically investigating the processes and practices implemented in the context of one of the Australian CRCs, aimed at transferring big data research to innovative software solutions for national security. Method: We applied case study method and collected and analyzed data from 17 interviews and observations of the participants of the studied CRC program. Findings: We present the innovation process implemented in the studied CRC. We particularly highlight the practices used to involve end-users in the innovation process. We further elaborate on the challenges of running this collaborative model for software technology innovation.",0
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
An alumni-based collaborative model to strengthen academia and industry partnership: The current challenges and strengths,"Industry-academia collaboration (IAC) has long been a source of discussion in various ways. A vital first step toward closing the gap is fostering alumni engagement in industry and academia. Industry-academia collaborations are like earth and water, and they live in harmony. They cannot exist apart from one another. The collaborative effort between industry and academia promotes improvement and innovation in technology and innovative research and enables the university to be more relevant to the industry. This article proposes a collaborative approach based on alumni influences and uses secondary data on the influences of alumni in engineering to enrich the collaboration between industry and academia. The industry and academia utilize the alumni’s potential to facilitate communication and offer their students and staff facilities. The research findings can be used by policymakers to innovate in the field of engineering and to strengthen the partnership between industry and academia in society. The model enables academia and industry to utilize the alumni strengths in enriching the collaboration; it also enhances academic research output, recruitment, fundraising, marketing, product promotion, and internship opportunities for students via alumni active participation. We propose some significant agendas for future work.",0
Structuring automotive product lines and feature models: an exploratory study at Opel,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Semantic Knowledge Management System to Support Software Engineers: Implementation and Static Evaluation through Interviews at Ericsson,"Background: In large-scale corporations in the software engineering context information overload problems occur as stakeholders continuously produce useful information on process life-cycle issues, matters related to specific products under development, etc. Information overload makes finding relevant information (e.g., how did the company apply the requirements process for product X?) challenging, which is in the primary focus of this paper. Contribution: In this study the authors aimed at evaluating the ease of implementing a semantic knowledge management system at Ericsson, including the essential components of such systems (such as text processing, ontologies, semantic annotation and semantic search). Thereafter, feedback on the usefulness of the system was collected from practitioners. Method: A single case study was conducted at a development site of Ericsson AB in Sweden. Results: It was found that semantic knowledge management systems are challenging to implement, this refers in particular to the implementation and integration of ontologies. Specific ontologies for structuring and filtering are essential, such as domain ontologies and ontologies distinct to the organization. Conclusion: To be readily adopted and transferable to practice, desired ontologies need to be implemented and integrated into semantic knowledge management frameworks with ease, given that the desired ontologies are dependent on organizations and domains.",0
Capturing cost avoidance through reuse,,0
From Blackboard to the Office: A Look Into How Practitioners Perceive Software Testing Education,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
Planning for the Unknown: Lessons Learned from Ten Months of Non-participant Exploratory Observations in the Industry,"Convincing industrial partners to support an exploratory study can be difficult, as benefits are often fuzzy at the beginning. The objective of this paper is to present recommendations for industrial exploratory studies based on our experience. The recommendations are based on ten months of observations during a non-participant, exploratory study with a single industrial partner. This study confirms a number of methodological challenges already identified in the software engineering literature. Based on recommendations from the literature and our own experience, we propose a process for future observational exploratory studies.",1
On the Alignment of Source Code Quality Perspectives through Experimentation: An Industrial Case,"CONTEXT. Alignment is a key factor for success in many software development projects. Aligned teams are capable of bringing collaboration and positive results to companies; whereas misalignment among developers can make a conflicted environment and even lead the project to failure. OBJECTIVE. To assist developers in an embedded software development company in their conceptual alignment regarding source code quality. METHOD. In the organizational context, plan and perform a series of studies such as surveys, systematic literature review (SLR), qualitative data analysis and focus group to support the identification of conceptual misalignments among developers and establish common terminology and guidance concerning source code quality. RESULTS. The results from a survey conducted in one company showed a conceptual misalignment among developers regarding the source code quality that was triggering continuous rework during software evolution activities. Through an SLR and a qualitative analysis of code snippets, a set of evidence-based coding guidelines for readability and understandability of source code were formulated. These guidelines were evaluated and used as an instrument for aligning source code perspectives during a focus group, showing their feasibility and adequacy to the company's context. CONCLUSIONS. The use of all contextual information observed - e.g. teams' locations, software development context, and time constraints - along with the information gathered during the industry-academia collaboration was particularly important to help us appropriately chose research methods to be used, and formulate evidence-based coding guidelines that matched the company's needs and expectations. Further evaluations have to be carried out to ensure the quality impact of some guidelines proposed before using them all over the company.",0
Botched Releases: Do We Need to Roll Back? Empirical Study on a Commercial Web App,"Few minutes after a web-based software release, the release team might encounter log traces showing the new system crashing, hanging, or having poor performance. This is the start of the most nerve-wrecking moments of a product's release cycle, i.e., should one run the risk of not doing anything and users losing precious data, or of prematurely engaging the tedious (and costly) roll-back procedure towards the previous release? Thus far, only little attention has been paid by researchers to these so-called ""botched releases"", partly because of lack of release log data. This paper studies 345 releases of a large e-commerce web app over a period of 1.5 years, in which we identified 17 recurrent root causes of botched releases, classified into four major categories. We then build explanatory models to understand which root causes are the most important, and to explore the factors leading to botched releases.",0
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
Academy-industry collaboration and the effects of the involvement of undergraduate students in real world activities,"As stated by the IEEE Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering, elements outside the classroom such as field trips, visits to industry and technical presentations can affect student's preparation for professional practice. This work describes a framework of academy-industry collaboration where students develop practical and academic activities in a real world scenario. It is a methodological research, in which a case study was conducted with a Government Agency that has a close collaboration with a University. This joint project led to the proposition of new software processes for the organization and produced research and capstone project papers. Results demonstrate that students have acquired experience in solving real world problems in the industry; they received recognition in the academic community through the acceptance of papers in international conferences; and also, the projects executed with the students produced outcomes that brought benefits to the government agency, under study.",0
Empirical Studies in Question-Answering Systems: A Discussion,"Researchers perform empirical studies in industry to gain qualitative insights into a real-world problem. However, common critics are the diversity and selection process of participants. To address these issues, we propose to improve the integration of question-answering systems into empirical study. In this paper, we i) describe approaches to conduct studies in such systems, ii) exemplify corresponding challenges, and iii) discuss their potential. We illustrate the approaches on existing works in which they were partly implemented to show that they can succeed.",0
Using a Visual Abstract as a Lens for Communicating and Promoting Design Science Research in Software Engineering,"Empirical software engineering research aims to generate prescriptive knowledge that can help software engineers improve their work and overcome their challenges, but deriving these insights from real-world problems can be challenging. In this paper, we promote design science as an effective way to produce and communicate prescriptive knowledge. We propose using a visual abstract template to communicate design science contributions and highlight the main problem/solution constructs of this area of research, as well as to present the validity aspects of design knowledge. Our conceptualization of design science is derived from existing literature and we illustrate its use by applying the visual abstract to an example use case. This is work in progress and further evaluation by practitioners and researchers will be forthcoming.",0
Generative Modeling Games for Exploratory Industry-Academic Research,"We present an approach to industry-academic research collaboration in which generative modeling is the central mechanism for not only enabling tactical coordination in exploratory research, but also for ensuring strategic alignment of both partners through a cooperative/competitive game approach of model evolution. Thoughts and experiences are offered for its applicability in contexts common relevant to software engineering research.",1
"A Pearson Correlation Analysis of the SoftwareEngineering Practice in Micro and Small-SizedSoftware Industry of Sinaloa, Mexico","Is well-known that software development process fordesktop, web or mobile applications in industry needs the adoptionof best practices of Software Engineering. Nevertheless, notmuch contemporary information with regard to current practicesin micro and small-sized software industry exists especially inSinaloa, Mexico. This work presents an exploratory study whichprovides insight into industrial practices in the software industryof Sinaloa. A combination of both qualitative and quantitativedata is collected, using semi-structured interviews and a detailedquestionnaire from sixteen software factories. A Pearson correlationanalysis was performed independently between the variablesCompany location, Scope of coverage, Number of workers, Timeto live in the market, Projects completed, Time dedicated toactivities related to the project, Outdated projects completed inorder to determine the degree of relationship between each ofthe variables mentioned, with all. A correlation analysis and ananalysis of variance were performed. The quantitative resultswill serve to obtain opportunities for further interpretation andcomparison.",0
On the search for industry-relevant regression testing research,"Regression testing is a means to assure that a change in the software, or its execution environment, does not introduce new defects. It involves the expensive undertaking of rerunning test cases. Several techniques have been proposed to reduce the number of test cases to execute in regression testing, however, there is no research on how to assess industrial relevance and applicability of such techniques. We conducted a systematic literature review with the following two goals: firstly, to enable researchers to design and present regression testing research with a focus on industrial relevance and applicability and secondly, to facilitate the industrial adoption of such research by addressing the attributes of concern from the practitioners’ perspective. Using a reference-based search approach, we identified 1068 papers on regression testing. We then reduced the scope to only include papers with explicit discussions about relevance and applicability (i.e. mainly studies involving industrial stakeholders). Uniquely in this literature review, practitioners were consulted at several steps to increase the likelihood of achieving our aim of identifying factors important for relevance and applicability. We have summarised the results of these consultations and an analysis of the literature in three taxonomies, which capture aspects of industrial-relevance regarding the regression testing techniques. Based on these taxonomies, we mapped 38 papers reporting the evaluation of 26 regression testing techniques in industrial settings.",0
Fostering Industry-Academia Collaboration in Software Engineering using Action Research: A Case Study,,1
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
University-software industry collaboration: an empirical study based on knowledge management,"The current environment that characterises the software industry is extremely dynamic and somewhat complex demanding high-performance solutions, rapid development, and cost- efficiency. Given this scenario, industry is forced to search for new partners, with the university- industry collaboration representing a fundamental resource in promoting innovation and technological development. This study aims to obtain and analyse the perceptions and experiences of representatives of this industry and the university, in order to identify a set of factors that could enhance and/or be the source of a sustainable collaboration, based on knowledge management. In nutshell, the results show that motivations are associated with the immediate opportunities or needs of each of those directly involved in the collaboration take priority, without building a sustainable collaboration. This collaboration is generally conducted through informal communication channels, which makes it difficult to capture and disseminate knowledge to other members of each of the related organisations.",1
Knowledge Management in University-Software Industry Collaboration,"The university-software industry collaboration relationship has been represented a key resource, to the extent that together they can more easily promote technological development that underpins innovation solutions. Through a literature review, this chapter aims to explore the concepts and the facilitator or inhibitor factors associated with the collaboration relationships between university and software industry, taking knowledge management into account. This chapter is organized as follows. In the first section, the
authors briefly introduce university, software industry, and knowledge management. The following section, based on the literature reviewed, provides a critical discussion of the university-software industry collaboration relationship, knowledge management in knowledge intensive organizations or community, and knowledge management in collaboration relationship between these two types of industries. Finally, in the rest of the sections, the authors point to future research directions and conclude.",1
The University Challenge in the Collaboration Relationship With the Industry,"Universities suffer from the impact of (1) life cycles associated with technological innovations, (2) the globalization of the economy and culture, (3) the educational needs of an increasingly knowledgedriven society, and (4) the training needs for high-performing professional activities. Solutions to these factors may be found in a positive attitude toward knowledge sharing and collaboration relationships. Collaboration has been considered a way to address the challenges of the 21st century, fostering the necessary innovation, growth, and productivity for all parties involved. Several studies reveal that collaboration can be strongly influenced by knowledge sharing. Collaboration relationships, besides the creation of new knowledge, may result in several outcomes and benefits for the university and society. This chapter aims to address and discuss the university challenges in the collaboration relationships with the industry based on the main results of some empirical studies developed during a research project.",0
{SERP}-test: a taxonomy for supporting industry{\textendash}academia communication,"This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry–academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.",1
Gap between academia and industry: a case of empirical evaluation of three software testing methods,"Doing the right kind of testing has always been one of main challenging and a decisive task for industry. To choose right software testing method(s), industry needs to have an exact objective knowledge of their effectiveness, efficiency, and applicability conditions. The most common way to evaluate testing methods, for such knowledge, is with empirical studies. Reliable and comprehensive evidence can be obtained by aggregating the results of different empirical studies (family of experiments) taking into account their findings and limitations. We conducted a study to investigate the current state of the art of empirical knowledge base of three testing methods. We found that although the empirical studies conducted so far to evaluate testing methods contain many important and interesting results; however, we still lack factual and generalizable knowledge about performance and applicability conditions of testing methods(s), making it unfeasible to be readily adopted by the industry. Moreover, we tried to identify the major factors responsible for limiting academia from producing significantly reliable results having an industrial impact. We believe that besides effective and long-term academia-industry collaboration, there is a need for more systematic, quantifiable and comprehensive empirical studies (which provides scope for aggregation using rigorous techniques), mainly replications so as to create an effective and applicable knowledge base about testing methods which potentially can fill the gap between academia and industry.",0
Codex: A metamodel ontology to guide the execution of coding experiments,"Background: Experiments have been conducted in many domains of software engineering (SE). Objective: This paper presents a metamodel, the Codex metamodel, containing standard concepts found in any coding experiment. We classify coding experiments as any SE experiment where participants have to carry out coding activities (construct, test, debug, and forth). Method: The paper presents results of an exploratory study that proposes a metamodel for the domain of coding experiments. Besides, we present how our metamodel specifies a real coding experiment. Results: Our metamodel for coding experiments was modeled with few elements, and it can precisely describe all coding activities. Conclusions: Our metamodel facilitates the development of a tool to support executing a coding experiment.",0
What do software team managers want from a skills identification?,"Searching for developers with the necessary skills to work effectively on a project is not an easy task for companies. For software team managers, it is important to know their team's experience and what technologies they are using in order to be able to allocate resources optimally. Therefore, in this paper, we decided to study the needs of the managers of a software development company in order to identify their team's skills. We carried out a focus group. We have interviewed 11 managers from a development company (with approximately 75 developers). As result we have mapped 5 issues, 4 possible applications and another 7 needs to create a new methodology for identifying skills. Finally, we conclude that managers are interested in a methodology to identify skills in business flow.",0
A bibliometric analysis of the Turkish software engineering research~community,,0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Systematic literature reviews in agile software development: A tertiary study,,0
Guidelines for conducting interactive rapid reviews in software engineering -- from a focus on technology transfer to knowledge exchange,,0
"Scaling agile in large organizations: Practices, challenges, and success factors",,0
A Defect Dependency based Approach to Improve Software Quality in Integrated Software Products,"Integrated software products are complex in design. They are prone to defects caused by integrated and non-integrated modules of the entire integrated software suite. In such software products, a small proportion of defects are fixed as soon as they are reported. Rest of the defects are targeted for fixes in future product release cycles. Among such targeted defects, most of them seem to be insignificant and innocuous in the current version but have the potential to become acute in future versions. In this paper, we propose an approach to study defect dependency of the reported defect using a dependency metric. Identifying the dependency of a defect in an integrated product suite can help the product stake-owners to prioritize them and help improve software quality.",0
Heuristic Approaches to Improve Product Quality in Large Scale Integrated Software Products,"Software quality has always been an important criterion for assessing stability of a product. It is quite challenging for large-scale complex products, especially integrated products, to endure and withstand the competition after a new version release in its market domain. Unlike regular software, integrated software products require detailed exploration on the spread and impact of a defect to improve overall product quality. In this paper, we use heuristic approaches like generalized defect dependency approach, control flow graph based approach, and feature correlation based approach to study the widespread of defects in large software and suggest a metric called defect dependency metric to study the dependency of defects. We implemented the generalized defect dependency approach on an industry dataset and gathered noteworthy results. We provide a comparative a study of the heuristic approaches and comprehended their individual usage with observations. We further discuss the need of adoption of such vision in industries as a standard testing practice to improve quality.",0
Energizing collaborative industry-academia learning: a present case and future visions,,0
Measuring Software Reliability: A Trend Using Machine Learning Techniques,"It has become inevitable for every software developer to understand, to follow that how and why software fails, and to express reliability in quantitative terms. This has led to a proliferation of software reliability models to estimate and predict reliability. The basic approach is to model past failure data to predict future behavior. Most of the models have three major components: assumptions, factors and a mathematical function, usually high order exponential or logarithmic used to relate factors to reliability. Software reliability models are used to forecast the curve of failure rate by statistical evidence available during testing phase. They also can indicate about the extra time required to carry out the test procedure in order to meet the specifications and deliver desired functionality with minimum number of defects. Therefore there are challenges whether, autonomous or machine learning techniques like other predictive methods could be able to forecast the reliability measures for a specific software application. This chapter contemplates reliability issue through a generic Machine Learning paradigm while referring the most common aspects of Support Vector Machine scenario. Couples of customized simulation and experimental results have been presented to support the proposed reliability measures and strategies.",0
Practical experiences in designing and conducting empirical studies in industry-academia collaboration,"More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success.",0
From Blackboard to the Office: A Look Into How Practitioners Perceive Software Testing Education,,0
Structuring automotive product lines and feature models: an exploratory study at Opel,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Lessons learned on applying design science for bridging the collaboration gap between industry and academia in empirical software engineering,"Collaboration between industry practitioners and researchers has been reported as a challenge to conduct empirical studies in software engineering. Gaining practitioners interest in research activities is challenging in the software development industry characterized by tough competition and short time-to-market. Often, practitioners do not see the direct value in collaborating with researchers. Meanwhile, researchers are frequently frustrated because they have no access to the real-world data that would enable them to develop scientific knowledge. Design science has become a popular research framework in Information Systems. This paper describes our lessons learned on how design science can help to attract and motivate industry practitioners to take part in empirical research. We present our practical experiences with using design science in the context of empirical software engineering, and how the design science framework helped us to bridge the collaborative gap with our industry partners. In illustrating our experiences, we present two case studies conducted in collaboration with Ericsson and Elektrobit in which the design science framework was followed. Based on our experience, design science is a suitable research framework for empirical software engineering since much of the research in the field is constructive. The similarities between the design science practices and the day-to-day work of practitioners in industry make it easy for them to understand the research approach. Thus, it supports their willingness to participate in research activities.",0
Get the cogs in synch,"In industry–academia collaboration projects, there are many issues related to different time horizons in industry and academia. If not adressed upfront, they may hinder collabora-tion in such projects. We analyze our expe-riences from a 10 year industry–academia col-laboration program, the EASE Industrial Ex-cellence Center in Sweden, and identify issues and feasible practices to overcome the hur-dles of different time horizons. Specifically, we identify issues related to contracts, goals, re-sults, organization (in)stability, and work prac-tices. We identify several areas where the time horizon is different, and conclude that mutual awareness of these differences and management commitment to the collaboration are the key means to overcome the differences. The launch of a mediating institute may also be part of the solution.",0
The 4$\mathplus$1 view model of industry--academia collaboration,"Industry–academia projects exist in complex contexts of various stakeholders, time perspec-tives, and goals. In order to analyze projects and communicate about them, we have de-fined an ""architectural"" model for industry– academia collaboration, inspired by Kruchten's software architecture model. The model has four views of i) time, ii) space, iii) activity and iv) domain, corresponding to the ques-tions: when, where, how and what. The +1 view is the scenario, binding the other four to-gether. We illustrate the model by applying it to the Industrial Excellence Center EASE and the Sigrun Software Innovation and En-gineering Institute. The model helps analyz-ing industry–academia collaboration projects, to find gaps and reduce redundant work.",0
Exploring the under-explored terrain of non-open source data for software engineering through the lens of federated learning,,0
Leveraging organizational climate theory for understanding industry-academia collaboration,,1
Bridging the Gap in Technology Transfer for Advanced Process Control with Industrial Applications,"In the present paper, a software framework comprising the implementation of Model Predictive Control—a popular industrial control method—is presented. The framework is versatile and can be run on a variety of target systems including programmable logic controllers and distributed control system implementations. However, the main attractive property of the framework stems from the goal of achieving smooth technology transfer from the academic setting to real industrial applications. Technology transfer is, in general, difficult to achieve, because of the apparent disconnect between academic studies and actual industry. The proposed software framework aims at bridging this gap for model predictive control—a powerful control technique which can result in substantial performance improvement of industrial control loops, thus adhering to modern trends for reducing energy waste and fulfilling sustainable development goals. In the paper, the proposed solution is motivated and described, and experimental evidence of its successful deployment is provided using a real industrial plant.",0
Towards improving industrial adoption,"While promising software engineering approaches are proposed every day, only few are adapted by professional developers. There are many potential reasons for this, such as, problems in identifying helpful approaches, missing tools, or lacking practical relevance. With our current research, we are concerned to improve the knowledge transfer from research to practice. In this paper, we discuss the impact of development environments and programming languages on knowledge transfer - considering that many scientific approaches and tools are interesting for professional developers, but rarely adopted by them. We base our discussion mainly on our personal experiences with industry-academia collaborations. To determine whether these experiences also apply to other developers, we additionally conducted a survey with 89 participants from academia and industry. The first results of our on-going work indicate a gap between the development environments and programming languages that are supported or used by researchers and those that are applied in industry. Based on our results, we describe initial discussions that can help to improve collaborations between industry and research.",0
From Ivory Tower to Democratization and Industrialization: A Landscape View of Real-World Adaptation of Artificial Intelligence,,0
It Takes Two to Tango -- An Experience Report on Industry -- Academia Collaboration,"Industry - academia collaboration is critical for empirical research to exist. However, there are many obstacles in the collaboration process. This paper reports on the experiences gained by the author, in a 2-year collaboration project on software testing which involved on-site work by the researcher in the industry premises. Based on notes, minutes of meetings, and progress reports, the project history is outlined. The project is analyzed, using collaboration models as a frame of reference. We conclude that there must be a balance between company 'pull' and academia 'push' in the collaboration Management support is inevitably a key factor to success, while other factors like cross-cultural skills and interfaces towards key resources also contribute.",0
Agent-based model checking verification framework,"Model checking is an automated formal verification technique that takes formal system design model and formal properties specifications as input to perform verification and produce system correctness result and counterexamples. Although a system has been formally verified to be correct using model checking, end users still want to know how correct the system is. As flawless system is rarely feasible, an approach for verifying the verifier is needed to measure the completeness and accuracy levels of the verification implementation. In this research, we propose a framework for evaluating agent-based model checking results with the Universiti Teknologi Malaysia on-line graduate student application system. We have designed multi-agent runtime verification and validation (MARVV) architecture that incorporates a runtime system profiles to perform the evaluation. Finally, we evaluate the applicability of the proposed model using MCMAS model checking.",0
Software Analytics in Practice,"With software analytics, software practitioners explore and analyze data to obtain insightful, actionable information for tasks regarding software development, systems, and users. The StackMine project produced a software analytics system for Microsoft product teams. The project provided lessons on applying software analytics technologies to positively impact software development practice. The lessons include focusing on problems that practitioners care about, using domain knowledge for correct data understanding and problem modeling, building prototypes early to get practitioners' feedback, taking into account scalability and customizability, and evaluating analysis results using criteria related to real tasks.",0
Supporting Software Decision Meetings: Heatmaps for Visualising Test and Code Measurements,"To achieve software quality it is critical to quickly understand the current test status, its changes over time as well as its relation to source code changes. However, even if this information is available in test logs and code repositories it is seldomly put to good use in supporting decision processes in software development. The amount of information is often large, is time consuming to extract and hard to monitor. This case study shows how visualisation and correlation between software measurements can support improvement discussions. In particular, simple heat maps were found to be effective to visualize and monitor changes and identify recurring patterns in the development of a space-bourn, embedded control system. Statistical analysis quantified the correlation between different sources of development data and heat maps then effectively focused the attention of stakeholders to importants parts of the system. Here the visual analysis was focused on post-project, historical data but we discuss how early identification based on dynamic data analysis could support more effective analysis, planning and execution of quality assurance. Based on our findings we state requirements on such an online, visual analysis system and present a prototype implementation that can help software measurements better support value-based decisions in software development.",0
Scale and Responsiveness in Large-Scale Software Development,"In large-scale software development, there is typically a conflict between being responsive to individual customers, while at the same time achieving scale in terms of delivering a high number of features to a large customer base. Most often, organizations focus on scale and individual customer requests are viewed as problematic since they add complexity to product variation and version control. Here, we explore the use of customer-specific teams as a means to address this conflict. First, we verify the use of customer-specific teams as successful for improving customer responsiveness, customer satisfaction and feature quality through a case study at Ericsson. Second, we identify three approaches for how to organize feature development, and recommendations on how software development companies can efficiently use these to improve their practices. Third, we observe new business opportunities that arise when using customer-specific teams.",0
Identifying risky areas of software code in Agile/Lean software development: An industrial experience report,"Modern software development relies on incremental delivery to facilitate quick response to customers' requests. In this dynamic environment the continuous modifications of software code can cause risks for software developers; when developing a new feature increment, the added or modified code may contain fault-prone or difficult-to-maintain elements. The outcome of these risks can be defective software or decreased development velocity. This study presents a method to identify the risky areas and assess the risk when developing software code in Lean/Agile environment. We have conducted an action research project in two large companies, Ericsson AB and Volvo Group Truck Technology. During the study we have measured a set of code properties and investigated their influence on risk. The results show that the superposition of two metrics, complexity and revisions of a source code file, can effectively enable identification and assessment of the risk. We also illustrate how this kind of assessment can be successfully used by software developers to manage risks on a weekly basis as well as release-wise. A measurement system for systematic risk assessment has been introduced to two companies.",0
University-industry collaboration chairs: Initiatives at the Public University of Navarre,"In the current context of economic crisis, the university Chairs funded by private companies emerge as useful tools to establish a steady and fruitful collaboration between universities and industry. The activities, configuration and management of the Chairs at the Public University of Navarre (UPNa) are described along the paper. The UPNa Chair for Renewable Energies is shown as a successful initiative, particularly concerning its Engineering Degree Final Project and Master Thesis Program.",0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,"Continuous and long-term collaboration between industry and academia is crucial to develop front-line research in context-dependent areas like software development where both practitioners and researchers are searched for data collection, analysis and results. Despite many mutual benefits, this collaboration is often challenging, not only due to different goals, but also because of different pace in providing the results. The software development industry has during the last decade aligned around and organized their development adopting agile methodologies. For the researchers, the agile methodologies are a topic for a research, rather than a means of performing the research itself. We can state a question, whether the agile methodologies can be a good common ground for enabling successful research collaboration between industry and academia? This paper reports on a longitudinal industry - academia research collaboration case, which has stepwise adapted SCRUM over a six-year period. The implementation of SCRUM and the collaboration successes and challenges are presented, and findings are discussed.",1
Lessons Learned on Research Co-Creation: Making Industry-Academia Collaboration Work,"How to increase the impact of software engineering research in the software industry and the society at large is a critical yet perplexing question to answer. Constrained by curtailed communication between researchers and practitioners, research conducted in a vacuum, or the ""publish or perish"" mindset, research collaborations between industry and academia often fail to deliver on the promise of creating a meaningful impact for practitioners. In an attempt to address these circumstances, this paper gives insights on applying research value co-creation to industry-academia collaboration in software engineering. We observe that the core of co-creation includes commitment, continuous engagement and alignment, aiming to produce value for both sides. Further we contend that co-creation has the potential to bridge the acknowledged research-practice collaboration gap through participative knowledge generation. Our experience stems from an eight-year long large collaborative project between a research organization and Norwegian software industry and public sector services. We suggest that for achieving research impact one needs to rethink the way industry and academia engage in and run collaborative projects. Traditional technology-transfer workflows where research is created in a lab and then pushed to industry practice do not stand the best chance of success. Instead, co-creating research with all stakeholders is likely to bring about the best research impact.",1
Anti-Patterns for an Industrial PhD in the Field of ICT,"PhD programmes run by universities are planned for the needs of full-time students who have funding for the study period and an opportunity to work full time as a member of the academic community. This approach aims at following the optimal way to the goals set by the State and the university for these studies - young students, immediate continuation after MSc graduation, with membership in the university's PhD programme ensuring progress. We call these students “administrative optimal” PhDs. However, universities also have a number of postgraduate students that work in industry. These students work full time, have significant and useful experience from practice, but have more limited resources to use for PhD-related activities. This paper reports on the challenges related to PhD students working in industry based on experiences from the field of ICT; the root cause of which is the missing support provided by the university, which focuses on “administrative optimal” students in their PhD programmes. The paper focuses on ICT field, because it is our experience base. We believe that in ICT area it is more common to work simultaneously to studies. This fits especially in MSc studies in Finland, but the same tradition continues even in PhD level. The studies of industrial students typically need twice the time and encounter a variety of problems having their roots in the mental, practical and motivational side. We list the challenges and handle them in a structured way in the form of anti-patterns. To provide a context for our findings we have included a discussion related to general aspects of PhD studies in the paper. The aim of the paper is to open up the discussion about this important topic and report our summarised “close to one hundred years” of experience in mentoring and supervising PhD students.",0
Robust Machine Learning in Critical Care — Software Engineering and Medical Perspectives,"Using machine learning in clinical practice poses hard requirements on explainability, reliability, replicability and robustness of these systems. Therefore, developing reliable software for monitoring critically ill patients requires close collaboration between physicians and software engineers. However, these two different disciplines need to find own research perspectives in order to contribute to both the medical and the software engineering domain. In this paper, we address the problem of how to establish a collaboration where software engineering and medicine meets to design robust machine learning systems to be used in patient care. We describe how we designed software systems for monitoring patients under carotid endarterectomy, in particular focusing on the process of knowledge building in the research team. Our results show what to consider when setting up such a collaboration, how it develops over time and what kind of systems can be constructed based on it. We conclude that the main challenge is to find a good research team, where different competences are committed to a common goal.",0
Strengthening the Bridge Between Academic and the Industry Through the Academia-Industry Collaboration Plan Design Model,"The study has been undertaken to integrate two different aspects of the triple helix model: universities and the industry. Special attention has been paid to the prevailing difference between the two, hampering their working as a coherent unit. Integrating the existing knowledge in the study, we proposed the Academia-Industry Collaboration Plan (AICP) design model. The model comprises processes, methods or approaches, and tools. Processes serve as a road map to third parties for establishing collaboration between academia and the industry. It has all the essential process models and a series of steps that help minimize the organizational complexity of the collaboration process between academia and the industry. Methods or approaches serve the purpose of implementing those processes effectively. Finally, appropriate tools are selected to integrate possible collaboration improvements that lead to innovation.",0
Profiling Prerelease Software Product and Organizational Performance,,0
Monitoring Evolution of Code Complexity and Magnitude of Changes,"Complexity management has become a crucial activity in continuous software development. While the overall perceived complexity of a product grows rather insignificantly, the small units, such as functions and files, can have noticeable complexity growth with every increment of product features. This kind of evolution triggers risks of escalating fault-proneness and deteriorating maintainability. The goal of this research was to develop a measurement system which enables effective monitoring of complexity evolution. An action research has been conducted in two large software development organizations. We have measured three complexity and two change properties of code for two large industrial products. The complexity growth has been measured for five consecutive releases of the products. Different patterns of growth have been identified and evaluated with software engineers in industry. The results show that monitoring cyclomatic complexity evolution of functions and number of revisions of files focuses the attention of designers to potentially problematic files and functions for manual assessment and improvement. A measurement system was developed at Ericsson to support the monitoring process.",0
A framework to improve university--industry collaboration,,1
Empirical studies for innovation dissemination,,0
Fostering Industry-Academia Collaboration in Software Engineering using Action Research: A Case Study,,1
A Systematic Mapping Study of the Current Practice of Indian Software Engineering,"Systematic mapping studies are an important research method and have been used in software engineering to provide an overview of a research area by a process of classification and counting of the outputs in a particular area. They have also been used to examine the outputs found in specific publication outlets. In this paper, we report on the results of a systematic mapping study conducted to review the entire publication output of the Indian Software Engineering Conference (ISEC) series. We use the outputs of the study to present visual depictions of the nature of Indian Software Engineering academic research from 2008--2015. A second contribution of the work reports on comparison of the ISEC series with that of the pre-eminent international conference in software engineering (ICSE). We contextualise the results within the wider picture of the national Indian IT community.",0
Challenges of Structured Reuse Adoption {\textemdash} Lessons Learned,"Adoption of structured reuse approaches in practice often poses multiple challenges. Research-industry collaborations are considered as suitable vehicle to mitigate adoption difficulties as well as to validate the applicability of scientific results. However, research cooperations with industry do not always live up to the expectations of either of the partners. Unfortunately for researchers and practitioners alike, insights behind the scenes of failed adoption and cooperation are often difficult to obtain. This hinders discussions on lessons learned by organizations during the adoption process and delays improvements. This paper aims to mitigate this issue by presenting lessons learned from interviews we conducted with practitioners in the context of a study on software reuse in industry. The study covered a wide range of aspects, including the process of reuse adoption. One of the participating companies had undertaken two attempts to adopt a form of structured reuse. However, both attempts did not succeed as expected. In our study, we identified tacit assumptions that were related to the encountered difficulties and present the lessons learned from the adoption approach. Furthermore , we report strategies that helped us to overcome the skepticism caused by a previous unsuccessful guided collaboration.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
Toward Efficient Academia-Industry Collaboration: A Case Study of Joint {VR} System Development,,0
Evaluation of the Impact of Collaborative Research on Robust Design Methodologies: A Large Scale Empirical Case Study with an Automotive {OEM},"The evaluation of impact of collaborative research on robust design methodologies and methods is important to both academic and industry stakeholders. This paper introduces a framework for impact evaluation which combines the broader framework adopted for the academic research impact assessment with the organisation viewpoint centred on business results, process improvement and product development teams capability improvement. A large scale empirical study conducted with evidence from technical reports on workplace projects from an automotive OEM proved the validity of the proposed framework.",0
Start-up ecosystems as a framework for the cooperation between start-up companies and knowledge-based institutions in Poland,,0
Cooperation between knowledge-based institutions and business: empirical studies and network theories,,0
{SERP}-test: a taxonomy for supporting industry{\textendash}academia communication,"This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry–academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.",1
Critical success factors in university-industry collaboration: a bibliometric analysis,"Considering the technological development, and particularly the global pandemic of COVID-19, it is essential to align universities and companies as agents in the transformation of society. However, a portion of academic research results does not find application in the productive sector. To better understand such (dis)connection, this study aims to verify in the scientific literature the critical success factors proper to the collaboration between universities and companies. Therefore, a bibliographic survey was carried out in the Scopus and Web of Science databases, considering the period 2000-2020 as temporality. From a quantitative point of view, a bibliometric analysis is presented regarding the year of publication, origin, thematic categories, authorship and co-citation networks, and with a qualitative character, through content analysis, critical factors were identified, with emphasis on trust, commitment, assumption of risks, realistic and well-defined objectives, managerial engagement of project coordinators, university reputation, previous experience in collaboration, communication and organizational culture.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Exploring the industry{\textquotesingle}s challenges in software testing: An empirical study,"Context: Software testing is an important and costly software engineering activity in the industry. Despite the efforts of the software testing research community in the last several decades, various studies show that still many practitioners in the industry report challenges in their software testing tasks.

Objective: To shed light on industry’s challenges in software testing, we characterize and synthesize the challenges reported by practitioners. Such concrete challenges can then be used for a variety of purposes, e.g., research collaborations between industry and academia. 

Method: Our empirical research method is opinion survey. By designing an online survey, we solicited practitioners’ opinions about their challenges in different testing activities. Our dataset includes data from 72 practitioners from eight different countries. 

Results: Our results show test management and test automation are considered the most challenging among all testing activities by practitioners. Our results also include a set of 104 concrete challenges in software testing that may need further investigations by the research community.

Conclusion: We conclude that the focal points of industrial work and academic research in software testing differ. Furthermore, the paper at hand provides valuable insights concerning practitioners’ “pain” points and, thus, provides researchers with a source of important research topics of high practical relevance.",0
"The Use of Design Thinking in Transdisciplinary Research and Innovation Consortia: Challenges, Enablers, and Benefits","The innovation management literature describes a competitive advantage when applying Design Thinking (DT) in corporate environments. In this paper we study the perceived challenges, enablers, and benefits for implementing DT in publicly funded transdisciplinary industry-academia research and innovation consortia (RIC). We facilitate and investigate five large RIC from the food and high-tech industry in Norway and Germany using an explorative qualitative action research design. Our research shows that the challenges of using DT in RIC are to some extent comparable to those for the corporate context. Additionally, we identify distinct challenges for RIC. Benefits from using DT in RIC are stronger user and innovation focus, better transdisciplinary collaboration, and triangulation of qualitative with scientific data. We suggest that complex RIC benefit from an intermediary (DT) role translating business needs into research questions, and research results into understandable and business-relevant information and innovation.",0
Case Studies of Industry-Academia Research Collaborations for Software Development with Agile,,0
Bridging the `Valley of Death': Can Agile Principles Be Applied in Industry-Academia Research and Innovation Projects?,,0
Data for: Benefits and Drawbacks of Software Reference Architectures: A Case Study,,0
Generating Real-World Impact from Academic Research,,0
Applying data analytics towards optimized issue management,"This document describes our experience of applying data analytics at Plexina, a leading IT company working in the healthcare domain. The main goal of the project was to identify factors currently affecting issue management and to make analytics based suggestions for optimizing the process. Various statistical and machine learning techniques were applied on a data set extracted from six releases of Plexina, containing more than 666 issues. Statistical techniques successfully identified the various factors that leads to estimation inaccuracy related to issues as well as identified the hidden relationships existing among various variables. The employed predictive analytic models was also successful to some extent, in predicting effort estimation related inaccuracy associated with the issues. The insights provided by the entire data analytics study can be of great help to product managers or the developers to make more informed decisions. In addition, the guidelines presented in this paper based on the lessons learnt can be applied to other data analytics and academia-industry collaboration project.",0
Energizing collaborative industry-academia learning: a present case and future visions,,0
"An Industry-Academia, Multidisciplinary and Expertise-Heterogeneous Design Approach: A Case Study on Designing for Mobility","The purpose of this article is to provide a better understanding of how to effectively develop design projects that simultaneously leverage industry and academic partners, participants from various disciplinary backgrounds, and various levels of expertise to solve complex problems. The article reports a single case of an ongoing project focused on designing smart and connected devices for mobility, which integrates the dimensions of interest. Our findings highlight the importance of careful planning of the collaborative process, contemplating offline and real-time communication opportunities, identifying cross-boundary roles, and considering the development of shared expertise and knowledge within the team. By confronting these findings with key literature, we offer five recommendations to inform similar future projects.KeywordsDesignBoundary crossingComplex problemsInnovationProject coordination",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
Industry-Academy Collaboration in Agile Methodology: Preliminary Findings of a Systematic Literature Review,,0
Practical experiences in designing and conducting empirical studies in industry-academia collaboration,"More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success.",0
How a professionally qualified doctoral student bridged the practice-research gap: a confessional account of Collaborative Practice Research,"Information Systems (IS) is a profession-based discipline that constantly seeks new ways to bridge the practice-research gap. These efforts include enacting scholar-practitioner roles across institutional boundaries, developing and disseminating new knowledge, and engaging professionally qualified doctoral students. Against this backdrop, we provide a confessional account of 10 years of Collaborative Practice Research (CPR) between Anna, an IS practitioner, and Lars, an IS researcher. The collaboration was initiated when Anna, while working full-time, engaged as doctoral student with Lars as supervisor. Combining social process modeling with theories of change and learning, we show how Anna and Lars responded to the experienced challenges and opportunities, how Anna's action strategies developed as she grew into becoming a practitioner-researcher, how the collaboration impacted the practice context, and, how the research resulted in traditional publication outcomes. On the basis of these analyses, we discuss how to engage professionally qualified doctoral students within the IS discipline. In addition, we offer lessons on how CPR can help bridge the practice-research gap as a path towards becoming a practitioner-researcher.",0
Complementary Technology Traces in Software Practice: A Retrospective Reflection over Sixteen Years of Evolution at Ericsson,"To advance knowledge about evolution of practices within a software organisation, we offer a retrospective reflection based on several years of research into a software unit at Ericsson AB. Covering 16 years of evolution, we developed multiple publications from continuously expanding sources of software technology implementation data. While these publications report from specific junctures of software practice evolution at the unit, our retrospective reflection allows us to consider the impacts of the unit’s investments into two technology paradigms over the sixteen-year period: first into CMM-RUP with a focus on discipline and structured practices and years later into Agile-Lean with a focus on flexibility and responsive practices. Hence, we adopt retrospective reflection to investigate how imprints from the two paradigms, despite considerable timespan between the related technology implementations, eventually complemented each other in the unit’s software practices. Because one paradigm focuses on discipline and structured practices and the other on flexibility and responsive practices, our retrospective reflections consider how the two paradigms together impacted the software unit’s ambidextrous capability. As a result, we advance the idea that as software organisations over time invest in complementary technology paradigms they leave important technology traces with sustainable impacts on their software practices.",0
{MeTeaM}{\textemdash}A method for characterizing mature software metrics teams,"Background
Metrics teams play an increasingly important role in handling data and information in modern software development organizations; they manage their companies’ measurement programs, collect and process data, and develop and distribute information products. Metrics teams can comprise several roles, and their set-up can differ between companies, as can the metrics maturity of host organizations. These differences impact the effectiveness and quality of a team’s measurement program.

Objective
Our objective was to design and evaluate a model to describe the characteristics of a mature metrics team, which efficiently designs, develops, maintains, and evolves its organization’s measurement program.

Method
We conducted an action research study on four metrics teams of four distinct companies. We designed and evaluated a domain-specific model for assessing the maturity of metrics teams – MeTeaM – and also assessed the four metrics teams per se.

Results
Our results were two-fold: the creation of the metrics team maturity model MeTeaM and a template to assess metrics teams. Our evaluation showed that the model captures the characteristics of successful metrics teams and quantifies the maturity status of both the metrics teams and their host organizations.

Conclusions
More mature metrics teams score higher in the MeTeaM model than less mature teams. The assessment provides less mature metrics teams with valuable insights on what factors to improve. Such insights can be shared with and acted upon successfully with their organizations.",0
Productivity of agile teams: an empirical evaluation of factors and monitoring processes,,0
"Enablers facilitating industry-academia, transnational~education and university-community partnering agility in higher education","Purpose
The study has a two-fold purpose: first, to identify the enablers of partnering agility in higher education, and, second, to analyze the interplay between the enablers.

Design/methodology/approach
Total interpretive structural modelling (TISM) was used to construct a theoretical model of partnering agility enablers, and cross-impact matrix multiplication applied to classification (MICMAC) analysis was used to rank and segregate the enablers into independent, autonomous, dependent and linkage zones on the basis of their driving and dependence power.

Findings
The study helped in identifying eight enablers that can be instrumental in driving partnering agility in higher education. According to the TISM model, clarity on roles and responsibilities of partners was found to be the most crucial and vital enabler followed by resource sharing.

Practical implications
The conceptual model provides a new direction on how to develop and strengthen higher education partnerships. The model has prioritized all the crucial enablers that the management can work around in order to drive partnering agility in higher education institutions.

Originality/value
Studies in the past have majorly focused on academia–industry partnerships. This research has tried to provide a comprehensive view of the enablers and the multidirectional interplay between the enablers that can facilitate partnerships between academia and industry, Indian and international universities, and academia and community.",0
Leading {FAIR} Adoption Across the Institution: A Collaboration Between an Academic Library and a Technology Provider,,0
Collaborative prioritization of architectural concerns,"Efficient architecture work involves balancing the degree of architecture documentation with attention to needs, costs, agility and other factors. This paper presents a method for prioritizing architectural concerns in the presence of heterogeneous stakeholder groups in large organizations that need to evolve existing architecture. The method involves enquiry, analysis, and deliberation using collaborative and analytical techniques. Method outcomes are action principles directed to managers, and assessment of user needs directed to architects, along with evidence. The method results from 4 years of action research at Ericsson AB with the purpose of adding missing views to architecture documentation and removing superfluous ones. It is illustrated on a case where 29 senior engineers and managers within Ericsson prioritized 37 architectural concerns areas to arrive at 8 action principles, 5 prioritized improvement areas, and 24 improvement suggestions. Feedback from the organization is that the method has been effective in prioritizing architectural concerns, that data collection and analysis is more extensive compared to traditional prioritization practices, but that extensive analysis seems inevitable in architecture improvement work.",0
A Survey of Types of Industry-Academia Collaboration,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Deploying {TESTAR} to Enable Remote Testing in an Industrial {CI} Pipeline: A Case-Based Evaluation,"Companies are facing constant pressure towards shorter release cycles while still maintaining a high level of quality. Agile development, continuous integration and testing are commonly used quality assurance techniques applied in industry. Increasing the level of test automation is a key ingredient to address the short release cycles. Testing at the graphical user interface (GUI) level is challenging to automate, and therefore many companies still do this manually. To help find solutions for better GUI test automation, academics are researching scriptless GUI testing to complement the script-based approach. In order to better match industrial problems with academic results, more academia-industry collaborations for case-based evaluations are needed. This paper describes such an initiative to improve, transfer and integrate an academic scriptless GUI testing tool TESTAR into the CI pipeline of a Spanish company Prodevelop. The paper describes the steps taken, the outcome, the challenges, and some lessons learned for successful industry-academia collaboration.",0
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Identifying critical factors for agility in innovation ecosystems: an exploratory study in the agriculture sector,"Organizational agility is the ability of organizations to adapt and respond to changes, it has been cited to explain theinternal dynamics and competition in innovation ecosystems. Would it be possible to identify differences in agility as ameasure in such environments? The present article investigates the subject, beginning with a systematic literature reviewthat identified critical factors for agility in innovation ecosystems. Next, an exploratory field study was carried out toidentify whether such factors could be observed empirically. An innovation ecosystem in the agriculture sector was chosen- the Brazilian Agricultural Research Corporation - Embrapa. The study allowed identifying agility factors in three sub-levels of analysis, the last two being observed at Embrapa: Programs and Portfolios, Organizations and Ecosystems.Finally, future research that focuses on better understanding the phenomenon in innovation ecosystems is recommended.",0
Get the cogs in synch,"In industry–academia collaboration projects, there are many issues related to different time horizons in industry and academia. If not adressed upfront, they may hinder collabora-tion in such projects. We analyze our expe-riences from a 10 year industry–academia col-laboration program, the EASE Industrial Ex-cellence Center in Sweden, and identify issues and feasible practices to overcome the hur-dles of different time horizons. Specifically, we identify issues related to contracts, goals, re-sults, organization (in)stability, and work prac-tices. We identify several areas where the time horizon is different, and conclude that mutual awareness of these differences and management commitment to the collaboration are the key means to overcome the differences. The launch of a mediating institute may also be part of the solution.",0
The 4$\mathplus$1 view model of industry--academia collaboration,"Industry–academia projects exist in complex contexts of various stakeholders, time perspec-tives, and goals. In order to analyze projects and communicate about them, we have de-fined an ""architectural"" model for industry– academia collaboration, inspired by Kruchten's software architecture model. The model has four views of i) time, ii) space, iii) activity and iv) domain, corresponding to the ques-tions: when, where, how and what. The +1 view is the scenario, binding the other four to-gether. We illustrate the model by applying it to the Industrial Excellence Center EASE and the Sigrun Software Innovation and En-gineering Institute. The model helps analyz-ing industry–academia collaboration projects, to find gaps and reduce redundant work.",0
Increasing the Impact of Industry{\textendash}Academia Collaboration through Co-Production,"Increased competition and globalization motivate us to join forces to enhance the impact of the research conducted. Collaboration between organizations with different views can, however, be difficult to manage and needs awareness and skills to meet different expecta-tions. This article will consider both a mutual industrial and academic perspective into the development of action research and, in six research project cases, empirically explore how the impact can be enhanced by considering certain key factors in the research process. How the phases of problem formulation, methodology, and results are managed is critical for the success of a collaboration and, thereby, its impact. Counter-productive forces that could dilute the progress over time need to be considered given that combining practical relevance and scientific rigour comes with challenges.",0
Certus: an organizational effort towards research-based innovation in software verification and validation,"What is gratifying to a software engineering researcher? Three of many possible answers to this question are (a) the intellectual exercise in developing/disseminating approaches that address emerging and existing challenges, (b) recognition from impact in a community of researchers and (c) widespread use of novel ideas, including software, in the society at large leading to enhancement of human ability and job creation. A culmination of these sources requires an organizational effort. This article presents a detailed account of a research-based innovation centre, Certus, to facilitate such a culmination for software engineering researchers. Certus has established a body of knowledge, methods and tools for the validation and verification of software systems in the Norwegian private and public sector. Certus works in close cooperation with five founding user partners and is hosted by the Simula Research Laboratory. We present the organizational structure of Certus and describe how Certus’s life and health is planned and evaluated on a regular basis as a research-based innovation centre. We expound two successful collaborations, with (a) the private sector entity Cisco systems, Norway and (b) the public sector entity the Norwegian Customs and Excise. We hope that this document will serve as a basis to encourage national/international funding schemes to create call for proposals for long-term research-based innovation centres. This, we believe, is one way to justify use of tax payers resources in creating a win–win situation for the triple helix: government, researchers and industry.",0
Industry-academia collaboration for realism in software engineering research: Insights and recommendations,"Context
Effective industry-academia collaboration may increase software engineering research relevance by increased realism, yet very challenging for reasons like confidentiality concerns, different objectives and priorities.

Objective
We analyse industry-academia collaboration scenarios based on our own experiences as Ph.D. student and supervisor, and provide insights and recommendations to facilitate future collaborations with industry.

Method
We first present our industry-academia collaboration experiences that span over two and a half years with different companies. Then, we analyse both facilitators and problems from those scenarios and synthesize recommendations based on that.

Results
Five different scenarios are analysed, including both success and failure scenarios. Reflections and insights into these experiences as well as some general recommendations are presented.

Conclusion
We believe such experiences and insights are helpful for academic researchers to pursue industry-academia collaboration. We plan to continuously report our experience and provide our suggestions for effective collaboration with industry.",0
{MeSRAM} {\textendash} A method for assessing robustness of measurement programs in large software development organizations and its industrial evaluation,"Measurement programs in large software development organizations contain a large number of indicators, base and derived measures to monitor products, processes and projects. The diversity and the number of these measures causes the measurement programs to become large, combining multiple needs, measurement tools and organizational goals. For the measurement program to effectively support organization’s goals, it should be scalable, automated, standardized and flexible – i.e. robust. In this paper we present a method for assessing the robustness of measurement programs. The method is based on the robustness model which has been developed in collaboration between seven companies and a university. The purpose of the method is to support the companies to optimize the value obtained from the measurement programs and their cost. We evaluated the method at the seven companies and the results from applying the method to each company quantified the robustness of their programs, reflecting the real-world status of the programs and pinpointed strengths and improvements of the programs.",0
Action Research as Research Methodology in Software Engineering,"Compared to other research methodologies, action research is probably the youngest one. It’s been introduced in the middle of the twentieth century and has gained attention ever since. It became popular because it appeals to both researchers and organizations who seek impact and utilization of scientific results in practice. In this chapter, we present the principles of action research and provide concrete guidelines on how to propose an action research project. We elaborate on the main parts of the action research methodology and exemplify them. We show how we can use experiment systems to involve customers in action research, and we finish the chapter by presenting how to manage action research projects.",0
Ensuring Sustainability of Knowledge,"Contemporary companies and organizations have understood since long the value of close cooperation between them and academia. Technology today takes huge leaps forward for every year that passes by, and ways of working evolve dramatically in order to cope with technology. Companies are no longer able to keep up with this “insane” speed of technology and ways of working; they know more possibility to learn and adapt by themselves. The solution to this challenge is called “action research,” an effective and efficient way for companies to keep up with what’s new and necessary for them to succeed in today’s hard competition. This book presents prerequisites needed for both parties to succeed in this type of collaboration, while this chapter focuses on a checklist to be used once such a relationship has been established.",0
Action Research in Software Engineering,"This book addresses action research (AR), one of the main research methodologies used for academia-industry research collaborations. It elaborates on how to find the right research activities and how to distinguish them from non-significant ones. Further, it details how to glean lessons from the research results, no matter whether they are positive or negative. Lastly, it shows how companies can evolve and build talents while expanding their product portfolio.

The book’s structure is based on that of AR projects; it sequentially covers and discusses each phase of the project. Each chapter shares new insights into AR and provides the reader with a better understanding of how to apply it. In addition, each chapter includes a number of practical use cases or examples. Taken together, the chapters cover the entire software lifecycle: from problem diagnosis to project (or action) planning and execution, to documenting and disseminating results, including validity assessments for AR studies.

The goal of this book is to help everyone interested in industry-academia collaborations to conduct joint research. It is for students of software engineering who need to learn about how to set up an evaluation, how to run a project, and how to document the results. It is for all academics who aren’t afraid to step out of their comfort zone and enter industry. It is for industrial researchers who know that they want to do more than just develop software blindly. And finally, it is for stakeholders who want to learn how to manage industrial research projects and how to set up guidelines for their own role and expectations.",0
Collaborative Research Project Networks,"Many businesses seeking enhanced innovation have corporate research teams that engage in collaborative research projects (CRPs), with external entities such as universities, public organizations, or customers. Anecdotal evidence, however, suggests mixed outcomes of CRPs in terms of corporate research impact, which implies successful transfer of novel knowledge generated within CRPs to company-internal business networks to develop radically innovative products. We use the multiple regression quadratic assignment procedure (MRQAP) and meta-analysis to analyze six CRP networks. Our findings indicate that the network’s relational characteristics (tie strength) and structural characteristics (network range) are important determinants of knowledge transfer at the fuzzy front end of innovation.",0
Lessons Learned from a Lean R{\&}amp$\mathsemicolon$D Project,,0
Guiding the selection of research methodology in industry{\textendash}academia collaboration in software engineering,,1
An empirical investigation of transferring research to software technology innovation,"Context: Governments are providing more and more support for academia-industry collaborations for industry led research and innovation via Cooperative Research Centers (CRC). It is important to understand the processes and practices of such programs for transferring scientific R&D to innovation. Goal: We aimed at empirically investigating the processes and practices implemented in the context of one of the Australian CRCs, aimed at transferring big data research to innovative software solutions for national security. Method: We applied case study method and collected and analyzed data from 17 interviews and observations of the participants of the studied CRC program. Findings: We present the innovation process implemented in the studied CRC. We particularly highlight the practices used to involve end-users in the innovation process. We further elaborate on the challenges of running this collaborative model for software technology innovation.",0
Planning for the Unknown: Lessons Learned from Ten Months of Non-participant Exploratory Observations in the Industry,"Convincing industrial partners to support an exploratory study can be difficult, as benefits are often fuzzy at the beginning. The objective of this paper is to present recommendations for industrial exploratory studies based on our experience. The recommendations are based on ten months of observations during a non-participant, exploratory study with a single industrial partner. This study confirms a number of methodological challenges already identified in the software engineering literature. Based on recommendations from the literature and our own experience, we propose a process for future observational exploratory studies.",1
Difficulty Factors of Obtaining Access for Empirical Studies in Industry,"Context: The difficulty (not just effort) of obtaining access for software engineering empirical studies in industry varies greatly. Supposedly, some of this variance in difficulty is particular, stemming from properties of individual contexts (the industrial partners and their work), while the rest is repeatable, related to properties of the research question and research design. Question: What are these recurring difficulty factors that arise from research question and research design? What mechanisms produce their influence? Method: We use ideation and knowledge extraction from research experience to identify potential difficulty factors, use expert discussion to understand their mechanisms, and use concept analysis to arrange them into a taxonomy. We evaluate the result by comparatively applying it to two research efforts pursued by the same research group. Results: We find six scope factors, five problematic intervention effects factors, and seven helpful intervention (side-)effects factors. Conclusion: Considering these factors systematically during the formulation of a research question and the design of a research method can help with balancing data collection difficulty with results validity and relevance.",0
Empirical Strategies in Software Engineering Research: A Literature Survey,"Context: The Software Engineering (SE) research continues to gain strength and interest for researchers considering the need to apply rigor and scientific validity to research results. Objective: Establishing an overview of the topic through a classification scheme of publications and structure the field of interest. Method: We conducted a Systematic Mapping Study, including articles published until 2019, that report at least one study of empirical strategies in SE. Results: 80 initial sets of studies were selected and analyzed, identifying: i) empirical strategy type used and ii) Software Engineering hypotheses types used. Also, 20 papers of the set of studies for mapping were selected and analyzed, identifying 17 empirical strategies and 11 main characteristics to address the empirical research inception in SE. Conclusions: We corroborate that the selection of an empirical strategy in Software Engineering research depends on the nature and scope of the research and on the resources that the researcher has at that moment, in addition to the degree of scientific and methodological knowledge that he has to carry out an empirical study. It is necessary to continue studying in-depth the behavior and nature of the empirical strategies in Software Engineering research that allows strengthening the scientific taxonomy in SE, besides walking towards the automation of the experimental process.",0
{SERP}-test: a taxonomy for supporting industry{\textendash}academia communication,"This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry–academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.",1
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Case Studies of Industry-Academia Research Collaborations for Software Development with Agile,,0
Evaluation in practice,,0
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
It{\textquotesingle}s a circular argument: Examining how a novel configuration impacts information flow in submarine control rooms,,0
Lessons learned on applying design science for bridging the collaboration gap between industry and academia in empirical software engineering,"Collaboration between industry practitioners and researchers has been reported as a challenge to conduct empirical studies in software engineering. Gaining practitioners interest in research activities is challenging in the software development industry characterized by tough competition and short time-to-market. Often, practitioners do not see the direct value in collaborating with researchers. Meanwhile, researchers are frequently frustrated because they have no access to the real-world data that would enable them to develop scientific knowledge. Design science has become a popular research framework in Information Systems. This paper describes our lessons learned on how design science can help to attract and motivate industry practitioners to take part in empirical research. We present our practical experiences with using design science in the context of empirical software engineering, and how the design science framework helped us to bridge the collaborative gap with our industry partners. In illustrating our experiences, we present two case studies conducted in collaboration with Ericsson and Elektrobit in which the design science framework was followed. Based on our experience, design science is a suitable research framework for empirical software engineering since much of the research in the field is constructive. The similarities between the design science practices and the day-to-day work of practitioners in industry make it easy for them to understand the research approach. Thus, it supports their willingness to participate in research activities.",0
"Recruitment, engagement and feedback in empirical software engineering studies in industrial contexts","Context
Research carried out in industrial contexts are recognized as important to the advancement of software engineering knowledge and practice. However, several challenges present themselves in the three key phases of research carried out in industrial contexts, recruitment, engagement and feedback.

Objective
The aim of this paper is to report the challenges related to each of the three phases of research carried out in industrial contexts, and the associated solutions we have found useful from our combined body of industrial empirical software engineering research studies spanning four case studies, five grounded theory studies, seven survey studies and two quasi-experimental studies involving a total of over 400 industrial participants in the past decade.

Method
We designed an instrument to gather details of our studies carried out in industrial contexts and performed thematic analysis to synthesise and draw out the most prominent challenges faced.

Results
We present a set of recommendations around study design, conduct and reporting to try and mitigate some of these challenges as they apply specifically to industrial empirical research.

Conclusion
These recommendations can guide researchers, novice and experienced, working in close collaboration with industry stakeholders to make the most of their industrial software engineering research.",1
A critical examination of recent industrial surveys on agile method usage,,0
The {ABC} of Software Engineering Research,"A variety of research methods and techniques are available to SE researchers, and while several overviews exist, there is neither consistency in the research methods covered nor in the terminology used. Furthermore, research is sometimes critically reviewed for characteristics inherent to the methods. We adopt a taxonomy from the social sciences, termed here the ABC framework for SE research, which offers a holistic view of eight archetypal research strategies. ABC refers to the research goal which strives for generalizability over Actors (A), precise measurement of their Behavior (B), in a realistic Context (C). The ABC framework uses two dimensions widely considered to be key in research design: the level of obtrusiveness of the research, and generalizability of research findings. We discuss metaphors for each strategy and their inherent limitations and potential strengths. We illustrate these research strategies in two key SE domains: global software engineering and requirements engineering, and apply the framework on a sample of 75 articles. Finally, we discuss six ways in which the framework can advance SE research.",0
Planning for the Unknown: Lessons Learned from Ten Months of Non-participant Exploratory Observations in the Industry,"Convincing industrial partners to support an exploratory study can be difficult, as benefits are often fuzzy at the beginning. The objective of this paper is to present recommendations for industrial exploratory studies based on our experience. The recommendations are based on ten months of observations during a non-participant, exploratory study with a single industrial partner. This study confirms a number of methodological challenges already identified in the software engineering literature. Based on recommendations from the literature and our own experience, we propose a process for future observational exploratory studies.",1
Lessons learned on applying design science for bridging the collaboration gap between industry and academia in empirical software engineering,"Collaboration between industry practitioners and researchers has been reported as a challenge to conduct empirical studies in software engineering. Gaining practitioners interest in research activities is challenging in the software development industry characterized by tough competition and short time-to-market. Often, practitioners do not see the direct value in collaborating with researchers. Meanwhile, researchers are frequently frustrated because they have no access to the real-world data that would enable them to develop scientific knowledge. Design science has become a popular research framework in Information Systems. This paper describes our lessons learned on how design science can help to attract and motivate industry practitioners to take part in empirical research. We present our practical experiences with using design science in the context of empirical software engineering, and how the design science framework helped us to bridge the collaborative gap with our industry partners. In illustrating our experiences, we present two case studies conducted in collaboration with Ericsson and Elektrobit in which the design science framework was followed. Based on our experience, design science is a suitable research framework for empirical software engineering since much of the research in the field is constructive. The similarities between the design science practices and the day-to-day work of practitioners in industry make it easy for them to understand the research approach. Thus, it supports their willingness to participate in research activities.",0
Leveraging organizational climate theory for understanding industry-academia collaboration,,1
Asian,,0
Contemporary Empirical Methods in Software Engineering,"Several decades ago, inspired by other knowledge areas, simulation 4 was introduced as a research method to Software Engineering. Motivated by 5 potential benefits achieved in other areas, the software engineering community has 6 used simulation-based studies for planning, controlling, and improving software 7 development. However, unclear expectations from simulation-based studies, a lack 8 of methodological support, as well as dispersed knowledge to support model 9 building and calibration have hindered widespread adoption of simulation-based 10 investigations. In this chapter, we delineate the role of simulation in software 11 engineering research and compile processes and guidelines into a comprehensive 12 life cycle. This chapter aims to guide software engineering researchers to conduct 13 effective simulation-based studies in real-world settings.",0
Towards customer-based requirements engineering practices,"Factors related to the requirements engineering process and customers have been repeatedly reported among those that most strongly influence the success of a software project. However, requirements engineering research has so far barely studied practice from a customer-based perspective. Furthermore, rigorous evidence about customers' perspectives regarding requirements engineering approaches is scarce, and links between customer-based requirements engineering research and the industrial practices are necessary. This paper argues that new research is necessary to tackle the above weaknesses. Our position is that: requirements specification approaches must be validated from a customer-based perspective; the influence of customers' characteristics on the requirements engineering process must be studied in more depth; and potential customer-based improvements in practice must be assessed. We also present situations in which the results from these activities would help practitioners, propose a research agenda to execute these activities, and discuss challenges that might hinder their execution.",0
Software Analytics in Practice,"With software analytics, software practitioners explore and analyze data to obtain insightful, actionable information for tasks regarding software development, systems, and users. The StackMine project produced a software analytics system for Microsoft product teams. The project provided lessons on applying software analytics technologies to positively impact software development practice. The lessons include focusing on problems that practitioners care about, using domain knowledge for correct data understanding and problem modeling, building prototypes early to get practitioners' feedback, taking into account scalability and customizability, and evaluating analysis results using criteria related to real tasks.",0
Dealing with Software Model Quality in Practice: Experience in a Research Project,"Although past research has resulted in different means to deal with software model quality, creation of adequate software models remains challenging. Any modelling effort must be carefully analysed and planned before it starts, and definition or adoption of modelling guidelines is usually necessary. In addition, the amount of publications addressing model quality in practice is low, and the knowledge about others' experience regarding model quality is limited. This paper reports on our experience in dealing with software model quality in the context of a project between industry and academia. Such a project corresponds to a large-scale research project in which modelling has been used both as part of the necessary work for executing the project and for creating project results. We present how we have dealt with model quality in requirements modelling and in conceptual model specification, as well as a set of lessons learned. The insights provided can help both researchers and practitioners when having to deal with software model quality.",0
Specifying a framework for evaluating requirements Engineering Technology: Challenges and lessons learned,"Evaluating requirements engineering technology is a challenging activity. It becomes even more difficult when having to evaluate the technology and thus to show its suitability in real settings, as access to industrial resources might be limited and the target domain might be complex or very sensitive. This paper reports on our experience in specifying an evaluation framework for requirements engineering technology. The technology aims to improve safety assurance and certification practices, and is being developed in the scope of a large-scale European research project. We focus on presenting the challenges encountered and the lessons learned while specifying the framework. These lessons summarise how we addressed, plan to address, or propose to address the challenges. This information can be useful for other researchers and practitioners that have to evaluate requirements engineering technology in general, and with industry and for safety assurance and certification in particular.",0
Success factors for empirical studies in industry-academia collaboration: A reflection,"We conducted several empirical studies over the last couple of years as part of a collaboration with industrial partners in the area of software product lines. Our studies differed regarding their motivation and goals, their scope, the research methods applied, and the involved subjects. In this experience paper we briefly summarize the studies and their key characteristics. We reflect on our experiences based on the success factors for industry-academia collaborations by Wohlin et al. We discuss the role of empirical studies in long-term industry-academia collaborations and present lessons learned.",0
Empirical software engineering research with industry: Top 10 challenges,"Software engineering research can be done in many ways, in particular it can be done in different ways when it comes to working with industry. This paper presents a list of top 10 challenges to work with industry based on our experience from working with industry in a very close collaboration with continuous exchange of knowledge and information. The top 10 list is based on a large number of research projects and empirical studies conducted with industrial research partners since 1983. It is concluded that close collaboration is a long-term undertaking and a large investment. The importance of addressing the top 10 challenges is stressed, since they form the basis for a long-term sustainable and successful collaboration between industry and academia.",0
A little rebellion now and then is a good thing: Views on the requirements engineering conference,"A little rebellion now and then is a good thing. This short position statement describes my views on some of the challenges associated with many conferences, the Requirements Engineering Conference being among them. The main concepts are; the goals, as well as criteria for paper selection for the conference should be defined explicitly, and shared with the community. Industry involvement in the conference should be increased, but the focus of all tracks should be quality - what constitutes quality however needs to be defined and agreed on. Industrial validation of research results have to be more than an intention. Last but not least, how papers are presented and discussed needs to change, focusing on quality over quantity.",0
A Preliminary Examination of Stimulating and Building University-Industry Collaborative Works at a Public University,"Vitalization of University and industry collaboration (UIC) is at the forefront of higher education policy making at institutional and national levels. It benefits both the industries and higher institutions with the sharing of expertise and knowhow. Industry players are investing in innovation, research and development to stay ahead of global competition. It is with this lead of future potentials and opportunities that this study was conducted on university and industry collaboration between Universiti Tun Hussein Onn Malaysia (UTHM) an anchor institution located in Batu Pahat with the industries. The respondents are the Deans, Deputy Deans and Head of Departments. Sources of external funding, adequacy of laboratory equipment, types of services offer to the industry, nature of UIC interaction and coordination were reported. Discussion and suggestion of approaches to UIC from the findings reported in this paper were also drawn from previous works and the authors' personal knowledge and experiences for stimulating and building collaboration works.",0
Preparing global engineers: USA-India academia & industry led approach,"A major challenge in engineering education today in India is preparing students with the skill set needed for a global industry. This paper describes an innovative partnership between two institutions of higher education in India and USA and a multinational corporation to address this challenge. The collaborative manner in which the industry and institutions internationalized the curriculum is a key feature of this program. This unique approach has resulted in the employees of a multinational company in India being able to get two high quality Masters-level degrees in engineering, customized to their current and future requirements at a very affordable price point. This paper looks at cost savings, collaborative course development between industry and international academia, using technology to deliver courses and on-the-job professional development program for employees while keeping the employees motivated. But there are also interesting lessons learnt regarding teaching in English, adjusting to the local cultural context and the overall integration into the Indian academic setting. The process innovation described here would be of great interest to academia, industry and education policy makers and has the potential to be replicated in the entire field of non-engineering and interdisciplinary academic programs.",0
How to Increase the Likelihood of Successful Transfer to Industry -- Going Beyond the Empirical,"The field of Empirical Software Engineering has undergone a much-needed expansion the last decade, and papers of all shapes and sizes are more or less mandated to have an ""empirical"" part to be published in premiere venues. The positive trend has researchers realizing the benefits, but also the investments needed, inherent to industry collaboration. That is, real practitioners, involved in the development of software intensive product, system, and service development. This paper shortly summarizes lessons learned from over ten years experience of industrial collaboration, and knowledge and technology exchange between applied researchers and industry.",0
Difficulty Factors of Obtaining Access for Empirical Studies in Industry,"Context: The difficulty (not just effort) of obtaining access for software engineering empirical studies in industry varies greatly. Supposedly, some of this variance in difficulty is particular, stemming from properties of individual contexts (the industrial partners and their work), while the rest is repeatable, related to properties of the research question and research design. Question: What are these recurring difficulty factors that arise from research question and research design? What mechanisms produce their influence? Method: We use ideation and knowledge extraction from research experience to identify potential difficulty factors, use expert discussion to understand their mechanisms, and use concept analysis to arrange them into a taxonomy. We evaluate the result by comparatively applying it to two research efforts pursued by the same research group. Results: We find six scope factors, five problematic intervention effects factors, and seven helpful intervention (side-)effects factors. Conclusion: Considering these factors systematically during the formulation of a research question and the design of a research method can help with balancing data collection difficulty with results validity and relevance.",0
Technology transfer - Requirements Engineering research to industrial practice an open (ended) debate,"Technology and knowledge have been recognized as main sources of competitive advantage of corporations, industries and nations, particularly in the software domain. They have led to the creation of local ecosystems devoted to development and transfer activities, which ensure not only personal and institutional motivation/recognition, but also social and economic gains. An open (ended) debate panel is proposed in order to develop greater awareness and seek deeper understanding of such activities from Requirements Engineering research to industrial practice. The panel involves researchers and practitioners with the perspective of eliciting: (i) experiences in knowledge and technology development and transfer; (ii) awareness and effectiveness of models and patterns; and (iii) factors for having successful collaboration between research institutions and industry. The organizers also plan to run a survey during and after the conference, summarizing their conclusions in specific post-conference reports.",0
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
Empirical Research in Software Architecture: How Far have We Come?,"Context: Empirical research helps gain well-founded insights about phenomena. Furthermore, empirical research creates evidence for the validity of research results. Objective: We aim at assessing the state-of-practice of empirical research in software architecture. Method: We conducted a comprehensive survey based on the systematic mapping method. We included all full technical research papers published at major software architecture conferences between 1999 and 2015. Results: 17% of papers report empirical work. The number of empirical studies in software architecture has started to increase in 2005. Looking at the number of papers, empirical studies are about equally frequently used to a) evaluate newly proposed approaches and b) to explore and describe phenomena to better understand software architecture practice. Case studies and experiments are the most frequently used empirical methods. Almost half of empirical studies involve human participants. The majority of these studies involve professionals rather than students. Conclusions: Our findings are meant to stimulate researchers in the community to think about their expectations and standards of empirical research. Our results indicate that software architecture has become a more mature domain with regards to applying empirical research. However, we also found issues in research practices that could be improved (e.g., when describing study objectives and acknowledging limitations).",0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,"Continuous and long-term collaboration between industry and academia is crucial to develop front-line research in context-dependent areas like software development where both practitioners and researchers are searched for data collection, analysis and results. Despite many mutual benefits, this collaboration is often challenging, not only due to different goals, but also because of different pace in providing the results. The software development industry has during the last decade aligned around and organized their development adopting agile methodologies. For the researchers, the agile methodologies are a topic for a research, rather than a means of performing the research itself. We can state a question, whether the agile methodologies can be a good common ground for enabling successful research collaboration between industry and academia? This paper reports on a longitudinal industry - academia research collaboration case, which has stepwise adapted SCRUM over a six-year period. The implementation of SCRUM and the collaboration successes and challenges are presented, and findings are discussed.",1
University-industry collaboration: A new way of educating future generations of engineers in India,"India, constitutes the world's third largest education system (after the US and China), but we still continue to struggle with many collective problems such as job placements, student retirement, learning impairments, language barriers and cultural differences. Cooperation between the industry and the scientific community if done with proper design and management can turn out to be beneficial for both industry partners and academic institutions. Such a cooperation can be achieved on micro and macro levels and can provide an inclusion of various educational institutions and industry partners. The collaboration may have different goals catering to the needs of industry partners and academic institutions. The involvement of industry and academia may not only be restricted to course curriculum but also result in joint research efforts and programs, which aims to connect students and industry professionals. This paper is an attempt to explore the relationship between academic and industry cooperation in order to enhance the skill set of a student along with his or hers employability opportunities. We discuss how capital investment and technology transfer can result in better development of the society and result in creation of new products, services and employment opportunities. The paper would be listing down some of the initiatives taken by the Indian government for creating an ecosystem for university-industry collaboration. Apart from this, we list some of the prominent university-industry collaborations that have taken place in the field of computer science engineering. Finally, we discuss some key initiatives which if taken into consideration could enhance the prospects of a fruitful university-industry collaboration and can benefit to the society in large.",0
Software Models for Source Code Maintainability: A Systematic Literature Review,"In this study, we collected evidence from empirical studies published over two decades-from 1995 to 2018-to answer the following general research question: ""What is the current existing empirical evidence concerning the use of software modeling to support source code maintenance?"" We carried out a systematic literature review on research published in relevant journals, as well as conference and workshop proceedings, to investigate various aspects of our general research question. Although there is a common belief that software models are beneficial for source code maintainability, this aspect has been scarcely investigated in the literature and only a few empirical studies have been conducted in an industrial context. Moreover, most of the used models are UML. As so, our study shows that there is a small body of research related to this field.",0
Trends and Challenges for Software Engineering in the Mobile Domain,"Mobile computing is becoming a key aspect of our lives. This article builds on conversations held during the 2018 IEEE/ACM International Conference on Mobile Software Engineering and Systems, highlighting mobile computing's impact on software engineering practices, the transition from research to industry, and related areas.",0
Towards a unified catalog of attributes to guide industry in software testing technique selection,"[Context] The correct selection of a software testing technique can positively influence the quality of the software in development. In previous work, a mapping study was conducted to identify approaches concerning software testing techniques selection, highlighting the attributes used to support the testing technique selection process. [Objective] This paper presents a unified catalog composed of testing technique selection attributes, built from the mapping study results. The aim is to assist testing practitioners to choose the best testing techniques to apply to a particular software project. [Method] Through the 10 studies that present the attributes used for supporting the process of selecting software testing techniques, 178 attributes were extracted. From this, a careful analysis was conducted to exclude the attributes that appeared duplicated. [Results] According to the objective and features, the catalog of attributes was classified into 8 categories, namely (i) general testing characteristics; (ii) tools; (iii) test team; (iv) software project; (v) orthogonal defect classification (ODC) faults; (vi) web applications; (vii) concurrent software; and (viii) model-based testing. [Conclusion] Through the development of this catalog, we intend to help testers, guiding them on how to select the best testing technique to be applied to software projects in the industry. It is expected that this work can foster collaboration between industry and academia to help improve the quality of software developed by choosing the best testing technique. Also, we want to further extend this work through the validation in industry real cases.",0
Lessons Learned on Research Co-Creation: Making Industry-Academia Collaboration Work,"How to increase the impact of software engineering research in the software industry and the society at large is a critical yet perplexing question to answer. Constrained by curtailed communication between researchers and practitioners, research conducted in a vacuum, or the ""publish or perish"" mindset, research collaborations between industry and academia often fail to deliver on the promise of creating a meaningful impact for practitioners. In an attempt to address these circumstances, this paper gives insights on applying research value co-creation to industry-academia collaboration in software engineering. We observe that the core of co-creation includes commitment, continuous engagement and alignment, aiming to produce value for both sides. Further we contend that co-creation has the potential to bridge the acknowledged research-practice collaboration gap through participative knowledge generation. Our experience stems from an eight-year long large collaborative project between a research organization and Norwegian software industry and public sector services. We suggest that for achieving research impact one needs to rethink the way industry and academia engage in and run collaborative projects. Traditional technology-transfer workflows where research is created in a lab and then pushed to industry practice do not stand the best chance of success. Instead, co-creating research with all stakeholders is likely to bring about the best research impact.",1
Teaching Software Product Lines,"Software Product Line (SPL) engineering has emerged to provide the means to efficiently model, produce, and maintain multiple similar software variants, exploiting their common properties, and managing their variabilities (differences). With over two decades of existence, the community of SPL researchers and practitioners is thriving, as can be attested by the extensive research output and the numerous successful industrial projects. Education has a key role to support the next generation of practitioners to build highly complex, variability-intensive systems. Yet, it is unclear how the concepts of variability and SPLs are taught, what are the possible missing gaps and difficulties faced, what are the benefits, and what is the material available. Also, it remains unclear whether scholars teach what is actually needed by industry. In this article, we report on three initiatives we have conducted with scholars, educators, industry practitioners, and students to further understand the connection between SPLs and education, that is, an online survey on teaching SPLs we performed with 35 scholars, another survey on learning SPLs we conducted with 25 students, as well as two workshops held at the International Software Product Line Conference in 2014 and 2015 with both researchers and industry practitioners participating. We build upon the two surveys and the workshops to derive recommendations for educators to continue improving the state of practice of teaching SPLs, aimed at both individual educators as well as the wider community.",0
Strengthening the Bridge Between Academic and the Industry Through the Academia-Industry Collaboration Plan Design Model,"The study has been undertaken to integrate two different aspects of the triple helix model: universities and the industry. Special attention has been paid to the prevailing difference between the two, hampering their working as a coherent unit. Integrating the existing knowledge in the study, we proposed the Academia-Industry Collaboration Plan (AICP) design model. The model comprises processes, methods or approaches, and tools. Processes serve as a road map to third parties for establishing collaboration between academia and the industry. It has all the essential process models and a series of steps that help minimize the organizational complexity of the collaboration process between academia and the industry. Methods or approaches serve the purpose of implementing those processes effectively. Finally, appropriate tools are selected to integrate possible collaboration improvements that lead to innovation.",0
"Knowledge, Skills, and Abilities for Specialized Curricula in Cyber Defense","More specialized cybersecurity education programs are needed to address workforce needs, but it is unclear which knowledge, skills, and abilities (KSAs) fulfil industry needs. We interviewed 48 professionals within four cyber defense specialty areas: (1) Cyber Network Defense Analysis, (2) Cyber Network Defense Infrastructure Support, (3) Incident Response, and (4) Vulnerability Assessment and Management. The professionals rated a number of specialized KSAs along two dimensions: how important the KSA was to their job and how difficult the KSA was to learn. Overall, communication and other non-technical skills were rated as being very important for all cyber defense jobs. Findings indicated that, for some specialty areas, technical knowledge and skills vary considerably between jobs and so the ability to teach oneself is more valuable than proficiency in any one KSA. Findings may be used to inform the development of general cybersecurity curricula, as well as curricula that focus on Cyber Network Defense Analysis, Cyber Network Defense Infrastructure Support, or Vulnerability Assessment and Management.",0
Contextualizing Research Evidence through Knowledge Translation in Software Engineering,"Usage of software engineering research in industrial practice is a well-known challenge. Synthesis of knowledge from multiple research studies is needed to provide evidence-based decision-support for industry. The objective of this paper is to present a vision of how a knowledge translation framework may look like in software engineering research, in particular how to translate research evidence into practice by combining contextualized expert opinions with research evidence. We adopted the framework of knowledge translation from health care research, adapted and combined it with a Bayesian synthesis method. The framework provided in this paper includes a description of each step of knowledge translation in software engineering. Knowledge translation using Bayesian synthesis intends to provide a systematic approach towards contextualized, collaborative and consensus-driven application of research results. In conclusion, this paper contributes towards the application of knowledge translation in software engineering through the presented framework. CCS CONCEPTS • Software and its engineering → Software design techniques;",1
Bridging the industry-academia collaboration gap a focus towards final year projects,,0
Empirical studies for innovation dissemination,,0
Challenges of Structured Reuse Adoption {\textemdash} Lessons Learned,"Adoption of structured reuse approaches in practice often poses multiple challenges. Research-industry collaborations are considered as suitable vehicle to mitigate adoption difficulties as well as to validate the applicability of scientific results. However, research cooperations with industry do not always live up to the expectations of either of the partners. Unfortunately for researchers and practitioners alike, insights behind the scenes of failed adoption and cooperation are often difficult to obtain. This hinders discussions on lessons learned by organizations during the adoption process and delays improvements. This paper aims to mitigate this issue by presenting lessons learned from interviews we conducted with practitioners in the context of a study on software reuse in industry. The study covered a wide range of aspects, including the process of reuse adoption. One of the participating companies had undertaken two attempts to adopt a form of structured reuse. However, both attempts did not succeed as expected. In our study, we identified tacit assumptions that were related to the encountered difficulties and present the lessons learned from the adoption approach. Furthermore , we report strategies that helped us to overcome the skepticism caused by a previous unsuccessful guided collaboration.",0
A quantitative study on Australian doctoral students' perceptions of employability preparedness: how gender and age matter,"Twenty-first-century doctoral candidates face a consistently evolving employment landscape. This paper explores how gender and age influence doctoral students’ perceptions of employability preparedness provided by their higher education institution for future career pathways. A survey-based study (n = 222) was undertaken at a large regional Australian university to assess what employment pathways graduates intend to pursue, how prepared they feel for these pathways, and what strategies could be utilised to increase the effectiveness of doctoral training with a view to employability. Transition pedagogy is used as a lens to unpack and explore participants' perceptions about systems designed to support success. Key findings include (i) a surplus of candidates seeking academic careers; (ii) candidates reporting doctoral training inadequately prepares them for their preferred career path; and (iii) young males feeling most prepared by their doctoral programme and older females feeling the least prepared. We discuss how preparedness is not experienced equally, and how the conditions of higher education are constructed with assumptions of who a doctoral candidate is, with implications for who is most likely to benefit from it.",0
Champions and Trust as Drivers of Industry/University Collaborations: A Relationship Marketing Perspective,,0
Toward Efficient Academia-Industry Collaboration: A Case Study of Joint {VR} System Development,,0
Evaluation of the Impact of Collaborative Research on Robust Design Methodologies: A Large Scale Empirical Case Study with an Automotive {OEM},"The evaluation of impact of collaborative research on robust design methodologies and methods is important to both academic and industry stakeholders. This paper introduces a framework for impact evaluation which combines the broader framework adopted for the academic research impact assessment with the organisation viewpoint centred on business results, process improvement and product development teams capability improvement. A large scale empirical study conducted with evidence from technical reports on workplace projects from an automotive OEM proved the validity of the proposed framework.",0
Traceability information model for very small entities with {ISO}/{IEC} 29110,"Requirements traceability is an important quality factor in the life cycle of the software, there is a lot of software standards that demands his implementation, for example, ISO/IEC 29110, a standard for very small entities; however, projects of small organizations do not perform an adequate application of traceability. In the literature there are proposals with a high level of abstraction; the realization of a traceability information model for small software development organizations provides a narrow alternative, reducing the gap between the theory and the reality in software development. We present a traceability information model for small organizations within the framework of ISO/IEC 29110, in this way organizations access an illustrative and reusable traceability solution that allows them to improve the quality of software development. The article contemplates the definition of the models.",0
Knowledge Management in University-Software Industry Collaboration,"The university-software industry collaboration relationship has been represented a key resource, to the extent that together they can more easily promote technological development that underpins innovation solutions. Through a literature review, this chapter aims to explore the concepts and the facilitator or inhibitor factors associated with the collaboration relationships between university and software industry, taking knowledge management into account. This chapter is organized as follows. In the first section, the
authors briefly introduce university, software industry, and knowledge management. The following section, based on the literature reviewed, provides a critical discussion of the university-software industry collaboration relationship, knowledge management in knowledge intensive organizations or community, and knowledge management in collaboration relationship between these two types of industries. Finally, in the rest of the sections, the authors point to future research directions and conclude.",1
"Fontys {ICT}, Partners in Education Program","In this paper, we describe the existing successful practices at the Fontys University of Applied Sciences, ICT in establishing and maintaining collaboration with industry within its ICT curriculum. We describe our approach and the major challenges that we face. In particular, we provide concrete examples from one semester of the Software Engineering curriculum where different forms of collaboration are employed. Our approach, experiences and lessons learned may be valuable to other software engineering programs in involving industry partners in the education process.",0
A Critical View on {PLM}/{ALM} Convergence in Practice and Research,"The Internet of Things (IoT) is the main driver for industrial smart products produced by an increasing number of manufacturers. The overall functionality of smart products is a combination of mechanical, electrical/electronic functions (hardware functions) and software functions. For hardware and software there are different lifecycle models: Product lifecycle management (PLM) focuses on hardware, application lifecycle management (ALM) focuses on software. Smart products force manufacturers to converge both lifecycle models step by step. Although seemingly important, the research community leaves this innovative area mostly up to the PLM tool vendors and the ALM tool vendors, resulting in them driving the convergence.",0
Critical success factors in university-industry collaboration: a bibliometric analysis,"Considering the technological development, and particularly the global pandemic of COVID-19, it is essential to align universities and companies as agents in the transformation of society. However, a portion of academic research results does not find application in the productive sector. To better understand such (dis)connection, this study aims to verify in the scientific literature the critical success factors proper to the collaboration between universities and companies. Therefore, a bibliographic survey was carried out in the Scopus and Web of Science databases, considering the period 2000-2020 as temporality. From a quantitative point of view, a bibliometric analysis is presented regarding the year of publication, origin, thematic categories, authorship and co-citation networks, and with a qualitative character, through content analysis, critical factors were identified, with emphasis on trust, commitment, assumption of risks, realistic and well-defined objectives, managerial engagement of project coordinators, university reputation, previous experience in collaboration, communication and organizational culture.",0
Misinformation Battle Revisited: Counter Strategies from Clinics to Artificial Intelligence,,0
Collaborative computer graphics product development between academia and government,"Collaborations and partnerships between academia and government agencies are common, especially when it comes to research and development in the fields of science, engineering and technology. However, collaboration between a government agency and an art school is rather atypical. This paper presents the Collaborative Student Project, which aims to explore the following challenge: The ideation, development and realization of education and public outreach products for NASA's upcoming ICESat-2 mission in collaboration with art students.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Industry-academia collaborations in software engineering,"Research collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. However, many researchers and practitioners believe that the level of joint industry-academia collaboration (IAC) in sooware engineering (SE) research is still relatively low, compared to the amount of activity in each of the two communities. e goal of the empirical study reported in this paper is to characterize the state of IAC with respect to a set of challenges , paaerns and anti-paaerns identiied by a recent Systematic Literature Review study. To address the above goal, we gathered the opinions of researchers and practitioners w.r.t. their experiences in IAC projects. Our dataset includes 47 opinion data points related to a large set of projects conducted in 10 diierent countries. We aim to contribute to the body of evidence in the area of IAC, for the beneet of researchers and practitioners in conducting future successful IAC projects in SE. As an output, the study presents a set of empirical ndings and evidence-based recommendations to increase the success of IAC projects. CCS CONCEPTS • Sooware and its engineering → Sooware creation and management ; • Social and professional topics → Professional topics; * Supported by FCT (Fundação para a Ciência e Tecnologia) within the Project Scope UID/CEC/00319/2013.",1
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Exploring the industry{\textquotesingle}s challenges in software testing: An empirical study,"Context: Software testing is an important and costly software engineering activity in the industry. Despite the efforts of the software testing research community in the last several decades, various studies show that still many practitioners in the industry report challenges in their software testing tasks.

Objective: To shed light on industry’s challenges in software testing, we characterize and synthesize the challenges reported by practitioners. Such concrete challenges can then be used for a variety of purposes, e.g., research collaborations between industry and academia. 

Method: Our empirical research method is opinion survey. By designing an online survey, we solicited practitioners’ opinions about their challenges in different testing activities. Our dataset includes data from 72 practitioners from eight different countries. 

Results: Our results show test management and test automation are considered the most challenging among all testing activities by practitioners. Our results also include a set of 104 concrete challenges in software testing that may need further investigations by the research community.

Conclusion: We conclude that the focal points of industrial work and academic research in software testing differ. Furthermore, the paper at hand provides valuable insights concerning practitioners’ “pain” points and, thus, provides researchers with a source of important research topics of high practical relevance.",0
Practical relevance of software engineering research: synthesizing the community's voice,,0
Fashion education in Sri Lanka: the nexus between formal and informal education,"For the past 15 years, the Sri Lankan apparel industry has been upgrading from apparel assembly to providing design and product development services. The country’s fashion education developed in response to the industry’s need for design professionals. The purpose of this study is to explore how fashion designer competencies are developed within Sri Lanka. This study adopts a qualitative approach using semi-structured interviews conducted with 28 fashion and product development professionals, selected through purposive sampling. The development of fashion designer competencies within SL in this context are analysed and discussed. The study proposes a ‘fashion education ecosystem’ that has emerged from the nexus between formal fashion education and training and professional development within the industry, supporting the upgrading of the industry through the enhancement of designer skills. Sri Lanka, as a small country that depends heavily on the apparel industry for employment and economic development, provides a model for other developing countries seeking industrial upgrading from apparel assembly to design and product development services through the fashion education ecosystem.",0
Third Generation Industrial Co-production in Software Engineering,"Industry-academia collaboration is one of the cornerstones of empirical software engineering. The role of researchers should be developing new practices and principles that enable industry in meeting the engineering challenges today and in the future. This chapter describes the third generation of industrial co-production in software engineering that includes seven steps. The co-production model and experiences associated with its use represent deep and long-term co-production with over thirty companies, many of which are still active partners in SERL",1
Solving Problems or Enabling Problem-Solving? from Purity in Empirical Software Engineering to Effective Co-production (Invited Keynote),"Studying and collaborating with any software-intensive organization demands for excellence in empirical software engineering research. The ever-growing complexity and context-dependency of software products, however, demands for more pragmatic and solution-focused research. This is a great opportunity but it also conflicts with the traditional quest for “purity” in research and a very narrow focus of the work. In this short positioning, we elaborate on challenges which emerge from academia-industry collaborations and discuss touch upon pragmatic ways of approaching them along the co-production model which emerged from SERL Sweden.",0
Case Studies of Industry-Academia Research Collaborations for Software Development with Agile,,0
Bridging the `Valley of Death': Can Agile Principles Be Applied in Industry-Academia Research and Innovation Projects?,,0
Effective Customer Relationship Management at {ATB} Financial: A Case Study on Industry-Academia Collaboration in Data Analytics,"Data analytics serve as a means to detect trends and patterns from organizational data repositories. The variety and dynamism of data and analysis approaches create a wide range of opportunities for collaboration between academia and industry. Successful collaboration projects create win-win scenarios with tangible benefits for both sides. This paper reports about an ongoing project between ATB Financial and the Laboratory for Software Engineering Decision Support (SEDS) at The University of Calgary. The key content of the project was to leverage the benefits of data analytics for efficient and effective customer relationship management (CRM). More precisely, the objective was to find analytic solutions that allow us to predict the complexity of an opportunity and to connect it with the right team member in order to increase efficiency and create value for ATB’s customers. We report the results and lessons learned from running through the various steps of a systematic data analytics process.",0
From Research Topic to Industrial Practice: An Experience Report,,0
"Ontology alignment: Simulated annealing-based system, statistical evaluation, and application to logistics interoperability ",,0
Software Startups - A Research Agenda,,0
On Supervising Master's Theses in Industry Context,,0
Changing Museums Through Cooperation and Collaboration,"Working within a new museological paradigm that sees museums as fluid, unbounded, and dependent upon context, this article seeks to examine the discourses that underpin collaboration as a contemporary and necessary museum education practice. In conducting this examination we will use examples from both Germany and the United States to illustrate the fact that though the two nations exist thousands of miles apart, and the museums within each nation are situated in different socio-political and cultural contexts, the underlying purpose of collaboration is the same in each nation and its museums. Collaboration seeks to change the museum from, in the immortal words of Stephen Weil, being about something to being for somebody.",0
Applying data analytics towards optimized issue management,"This document describes our experience of applying data analytics at Plexina, a leading IT company working in the healthcare domain. The main goal of the project was to identify factors currently affecting issue management and to make analytics based suggestions for optimizing the process. Various statistical and machine learning techniques were applied on a data set extracted from six releases of Plexina, containing more than 666 issues. Statistical techniques successfully identified the various factors that leads to estimation inaccuracy related to issues as well as identified the hidden relationships existing among various variables. The employed predictive analytic models was also successful to some extent, in predicting effort estimation related inaccuracy associated with the issues. The insights provided by the entire data analytics study can be of great help to product managers or the developers to make more informed decisions. In addition, the guidelines presented in this paper based on the lessons learnt can be applied to other data analytics and academia-industry collaboration project.",0
Energizing collaborative industry-academia learning: a present case and future visions,,0
"Industry-University Collaborations in Canada, Japan, the {UK} and {USA} {\textendash} With Emphasis on Publication Freedom and Managing the Intellectual Property Lock-Up Problem",,0
Evaluation in practice,,0
Academic and Industry Collaboration {\textendash} A Literature Review,,0
collaborative autoethnographic analysis of industry-academia collaboration for software engineering education development,"As engineering educators seek to prepare students for future careers, it can be challenging to keep course materials current with industry practices and knowledge. Students also often experience a disconnect between their studies and perceived relevance to future industry roles. This study examines the potential impact of an industry-academia collaboration on the development and improvement of software engineering education while addressing these issues. A collaborative autoethnographic approach is used to concurrently analyze the experiences of both industry and academic participants in the collaboration. Common themes across the collected personal reflections show that varied benefits were experienced by all stakeholders while contributing to an improved student experience.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
Industry-Academy Collaboration in Agile Methodology: Preliminary Findings of a Systematic Literature Review,,0
Practical experiences in designing and conducting empirical studies in industry-academia collaboration,"More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success.",0
Making medicines,"The approach to building innovative partnerships between academia and the pharmaceutical industry has expanded to investigate collaborations that offer meaningful outcomes beyond discovery and increased productivity. This case study uses a systems thinking approach to guide the process and analyse the outcome of a partnership undertaken by one pharmaceutical company and academia. The collaborative process established three tiers of evolution over a 3-year period. The outcome was an online module–based course, entitled ‘Making Medicines: The Process of Drug Development’, that provides information about the drug discovery and development process. Both the course development and the final product serve as a useful case study of how collaboration between academia and industry might be achieved. The development process itself is proposed as an appropriate approach for building educational partnerships.",0
"Enablers facilitating industry-academia, transnational~education and university-community partnering agility in higher education","Purpose
The study has a two-fold purpose: first, to identify the enablers of partnering agility in higher education, and, second, to analyze the interplay between the enablers.

Design/methodology/approach
Total interpretive structural modelling (TISM) was used to construct a theoretical model of partnering agility enablers, and cross-impact matrix multiplication applied to classification (MICMAC) analysis was used to rank and segregate the enablers into independent, autonomous, dependent and linkage zones on the basis of their driving and dependence power.

Findings
The study helped in identifying eight enablers that can be instrumental in driving partnering agility in higher education. According to the TISM model, clarity on roles and responsibilities of partners was found to be the most crucial and vital enabler followed by resource sharing.

Practical implications
The conceptual model provides a new direction on how to develop and strengthen higher education partnerships. The model has prioritized all the crucial enablers that the management can work around in order to drive partnering agility in higher education institutions.

Originality/value
Studies in the past have majorly focused on academia–industry partnerships. This research has tried to provide a comprehensive view of the enablers and the multidirectional interplay between the enablers that can facilitate partnerships between academia and industry, Indian and international universities, and academia and community.",0
Continuous and collaborative technology transfer: Software engineering research with real-time industry impact,,1
{CodeFu},"In this paper, we describe the experiences from the collaboration between a software company and university. The company organizes a coding competition on which the best students from Macedonia participate. The competition quickly got the attention of university students and proved to be an arena where they show their knowledge. The involvement of the university staff in the competition directly and indirectly and the involvement of the company in the training process proved to be beneficial both for university and for company. The competition initiates skill improvement and this makes the Macedonian companies more competitive on the regional and European markets.",0
Organized Innovation: A Framework for Effectively Managing Innovation,,0
A Survey of Types of Industry-Academia Collaboration,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A study and comparison of industrial vs. academic software product line research published at {SPLC},"The study presented in this paper aims to provide evidence for the hypothesis that software product line research has been changing and that the works in industry and academia have diverged over time. We analysed a subset (140) of all (593) papers published at the Software Product Line Conference (SPLC) until 2017. The subset was randomly selected to cover all years as well as types of papers. We assessed the research type of the papers (academic or industry), the kind of evaluation (application example, empirical, etc.), and the application domain. Also, we assessed which product line life-cycle phases, development practices, and topics the papers address. We present an analysis of the topics covered by academic vs. industry research and discuss the evolution of these topics and their relation over the years. We also discuss implications for researchers and practitioners. We conclude that even though several topics have received more attention than others, academic and industry research on software product lines are actually rather in line with each other.",0
Collaborating to deliver value in health care: exploring conditions required for successful healthcare and life science sector collaboration,,0
Deploying {TESTAR} to Enable Remote Testing in an Industrial {CI} Pipeline: A Case-Based Evaluation,"Companies are facing constant pressure towards shorter release cycles while still maintaining a high level of quality. Agile development, continuous integration and testing are commonly used quality assurance techniques applied in industry. Increasing the level of test automation is a key ingredient to address the short release cycles. Testing at the graphical user interface (GUI) level is challenging to automate, and therefore many companies still do this manually. To help find solutions for better GUI test automation, academics are researching scriptless GUI testing to complement the script-based approach. In order to better match industrial problems with academic results, more academia-industry collaborations for case-based evaluations are needed. This paper describes such an initiative to improve, transfer and integrate an academic scriptless GUI testing tool TESTAR into the CI pipeline of a Spanish company Prodevelop. The paper describes the steps taken, the outcome, the challenges, and some lessons learned for successful industry-academia collaboration.",0
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Lessons learned on applying design science for bridging the collaboration gap between industry and academia in empirical software engineering,"Collaboration between industry practitioners and researchers has been reported as a challenge to conduct empirical studies in software engineering. Gaining practitioners interest in research activities is challenging in the software development industry characterized by tough competition and short time-to-market. Often, practitioners do not see the direct value in collaborating with researchers. Meanwhile, researchers are frequently frustrated because they have no access to the real-world data that would enable them to develop scientific knowledge. Design science has become a popular research framework in Information Systems. This paper describes our lessons learned on how design science can help to attract and motivate industry practitioners to take part in empirical research. We present our practical experiences with using design science in the context of empirical software engineering, and how the design science framework helped us to bridge the collaborative gap with our industry partners. In illustrating our experiences, we present two case studies conducted in collaboration with Ericsson and Elektrobit in which the design science framework was followed. Based on our experience, design science is a suitable research framework for empirical software engineering since much of the research in the field is constructive. The similarities between the design science practices and the day-to-day work of practitioners in industry make it easy for them to understand the research approach. Thus, it supports their willingness to participate in research activities.",0
Get the cogs in synch,"In industry–academia collaboration projects, there are many issues related to different time horizons in industry and academia. If not adressed upfront, they may hinder collabora-tion in such projects. We analyze our expe-riences from a 10 year industry–academia col-laboration program, the EASE Industrial Ex-cellence Center in Sweden, and identify issues and feasible practices to overcome the hur-dles of different time horizons. Specifically, we identify issues related to contracts, goals, re-sults, organization (in)stability, and work prac-tices. We identify several areas where the time horizon is different, and conclude that mutual awareness of these differences and management commitment to the collaboration are the key means to overcome the differences. The launch of a mediating institute may also be part of the solution.",0
Modeling the Software Prototyping Process in a Research Context,"The paper examines the Third Mission of universities from the point of view of company collaboration in the prototype development process. The paper presents an implementation of university-enterprise collaboration in prototype development described by means of process modeling notation. In this article, the focus is on modeling the software prototyping process in a research context. This research paper introduces prototype development in a university environment. The prototypes are made in collaboration with companies, which offered real-world use cases. The prototype development process is introduced by a modeling procedure with four example prototype cases. The research method used is an eight-step process modeling approach. The goal was to find instances of activity, artifact, resource, and role. The results of modeling are presented using textual and graphical notation. This paper describes the data elicitation, where the process knowledge is collected using stickers-on-the-wall technique, and the creation of the model is described. Finally, the shortcomings found in our existing practices and possibilities for improving our prototype development processes and practices are discussed.",0
Increasing the Impact of Industry{\textendash}Academia Collaboration through Co-Production,"Increased competition and globalization motivate us to join forces to enhance the impact of the research conducted. Collaboration between organizations with different views can, however, be difficult to manage and needs awareness and skills to meet different expecta-tions. This article will consider both a mutual industrial and academic perspective into the development of action research and, in six research project cases, empirically explore how the impact can be enhanced by considering certain key factors in the research process. How the phases of problem formulation, methodology, and results are managed is critical for the success of a collaboration and, thereby, its impact. Counter-productive forces that could dilute the progress over time need to be considered given that combining practical relevance and scientific rigour comes with challenges.",0
Bridging the gap,,0
Certus: an organizational effort towards research-based innovation in software verification and validation,"What is gratifying to a software engineering researcher? Three of many possible answers to this question are (a) the intellectual exercise in developing/disseminating approaches that address emerging and existing challenges, (b) recognition from impact in a community of researchers and (c) widespread use of novel ideas, including software, in the society at large leading to enhancement of human ability and job creation. A culmination of these sources requires an organizational effort. This article presents a detailed account of a research-based innovation centre, Certus, to facilitate such a culmination for software engineering researchers. Certus has established a body of knowledge, methods and tools for the validation and verification of software systems in the Norwegian private and public sector. Certus works in close cooperation with five founding user partners and is hosted by the Simula Research Laboratory. We present the organizational structure of Certus and describe how Certus’s life and health is planned and evaluated on a regular basis as a research-based innovation centre. We expound two successful collaborations, with (a) the private sector entity Cisco systems, Norway and (b) the public sector entity the Norwegian Customs and Excise. We hope that this document will serve as a basis to encourage national/international funding schemes to create call for proposals for long-term research-based innovation centres. This, we believe, is one way to justify use of tax payers resources in creating a win–win situation for the triple helix: government, researchers and industry.",0
Certus: an organizational effort towards research-based innovation in software verification and validation,"What is gratifying to a software engineering researcher? Three of many possible answers to this question are (a) the intellectual exercise in developing/disseminating approaches that address emerging and existing challenges, (b) recognition from impact in a community of researchers and (c) widespread use of novel ideas, including software, in the society at large leading to enhancement of human ability and job creation. A culmination of these sources requires an organizational effort. This article presents a detailed account of a research-based innovation centre, Certus, to facilitate such a culmination for software engineering researchers. Certus has established a body of knowledge, methods and tools for the validation and verification of software systems in the Norwegian private and public sector. Certus works in close cooperation with five founding user partners and is hosted by the Simula Research Laboratory. We present the organizational structure of Certus and describe how Certus’s life and health is planned and evaluated on a regular basis as a research-based innovation centre. We expound two successful collaborations, with (a) the private sector entity Cisco systems, Norway and (b) the public sector entity the Norwegian Customs and Excise. We hope that this document will serve as a basis to encourage national/international funding schemes to create call for proposals for long-term research-based innovation centres. This, we believe, is one way to justify use of tax payers resources in creating a win–win situation for the triple helix: government, researchers and industry.",0
Joining Voices: University {\textendash} Industry Partnerships in the Humanities,"University-industry partnerships are common in the Sciences, but less so in the Humanities. As a result, there is little understanding of how they work in the Humanities. Using the Implementing New Knowledge Environments: Networked Open Social Scholarship (INKE:NOSS) initiative as a case study, this paper contributes to this discussion by examining the nature of the university-industry partnership with libraries and academic-adjacent organizations, and associated benefits, challenges, measures of success, and outcomes. Interviews were conducted with the collaboration’s industry partners. After several years of collaboration on the development of a grant application, industry partners have found the experience of working with academics to be a positive one overall. Industry partners are contributing primarily in-kind resources in the form of staff time, travel to meetings, and reading and commenting on documents. They have also been able to realize benefits while negotiating the challenges. Using qualitative standards, measures of success and desired outcomes are being articulated. This work developing the partnership should stand the larger INKE:NOSS team in good stead if they are successful with securing grant funding.",0
Industry-academia collaboration for realism in software engineering research: Insights and recommendations,"Context
Effective industry-academia collaboration may increase software engineering research relevance by increased realism, yet very challenging for reasons like confidentiality concerns, different objectives and priorities.

Objective
We analyse industry-academia collaboration scenarios based on our own experiences as Ph.D. student and supervisor, and provide insights and recommendations to facilitate future collaborations with industry.

Method
We first present our industry-academia collaboration experiences that span over two and a half years with different companies. Then, we analyse both facilitators and problems from those scenarios and synthesize recommendations based on that.

Results
Five different scenarios are analysed, including both success and failure scenarios. Reflections and insights into these experiences as well as some general recommendations are presented.

Conclusion
We believe such experiences and insights are helpful for academic researchers to pursue industry-academia collaboration. We plan to continuously report our experience and provide our suggestions for effective collaboration with industry.",0
{MeSRAM} {\textendash} A method for assessing robustness of measurement programs in large software development organizations and its industrial evaluation,"Measurement programs in large software development organizations contain a large number of indicators, base and derived measures to monitor products, processes and projects. The diversity and the number of these measures causes the measurement programs to become large, combining multiple needs, measurement tools and organizational goals. For the measurement program to effectively support organization’s goals, it should be scalable, automated, standardized and flexible – i.e. robust. In this paper we present a method for assessing the robustness of measurement programs. The method is based on the robustness model which has been developed in collaboration between seven companies and a university. The purpose of the method is to support the companies to optimize the value obtained from the measurement programs and their cost. We evaluated the method at the seven companies and the results from applying the method to each company quantified the robustness of their programs, reflecting the real-world status of the programs and pinpointed strengths and improvements of the programs.",0
Establishing and implementing data collaborations for public good: A critical factor analysis to scale up the practice,"Data analytics for public good has become a hot topic thanks to the inviting opportunities to utilize ‘new’ sources of data, such as social media insights, call detail records, satellite imagery etc. These data are sometimes shared by the private sector as part of corporate social responsibility, especially in situations of urgency, such as in case of a natural disaster. Such partnerships can be termed as ‘data collaboratives’. While experimentation grows, little is known about how such collaborations are formed and implemented. In this paper, we investigate the factors which are influential and contribute to a successful data collaborative using the Critical Success Factor (CSF) approach. As a result, we propose (1) a framework of CSFs which provides a holistic view of elements coming into play when a data collaborative is formed and (2) a list of Top 15 factors which highlights the elements which typically have a greater influence over the success of the partnership. We validated our findings in two case studies and discussed three broad factors which were found to be critical for the formation of data collaboratives: value proposition, trust, and public pressure. Our results can be used to help organizations prioritize and distribute resources accordingly when engaging in a data collaborative.",0
Collaborative Research Project Networks,"Many businesses seeking enhanced innovation have corporate research teams that engage in collaborative research projects (CRPs), with external entities such as universities, public organizations, or customers. Anecdotal evidence, however, suggests mixed outcomes of CRPs in terms of corporate research impact, which implies successful transfer of novel knowledge generated within CRPs to company-internal business networks to develop radically innovative products. We use the multiple regression quadratic assignment procedure (MRQAP) and meta-analysis to analyze six CRP networks. Our findings indicate that the network’s relational characteristics (tie strength) and structural characteristics (network range) are important determinants of knowledge transfer at the fuzzy front end of innovation.",0
Large-scale information retrieval in software engineering - an experience report from industrial application,,0
Assessing requirements engineering and software test alignment{\textemdash}Five case studies,"The development of large, software-intensive systems is a complex undertaking that we generally tackle by a divide and conquer strategy. Companies thereby face the challenge of coordinating individual aspects of software development, in particular between requirements engineering (RE) and software testing (ST). A lack of REST alignment can not only lead to wasted effort but also to defective software. However, before a company can improve the mechanisms of coordination they need to be understood first. With REST-bench we aim at providing an assessment tool that illustrates the coordination in software development projects and identify concrete improvement opportunities. We have developed REST-bench on the sound fundamentals of a taxonomy on REST alignment methods and validated the method in five case studies. Following the principles of technical action research, we collaborated with five companies, applying REST-bench and iteratively improving the method based on the lessons we learned. We applied REST-bench both in Agile and plan-driven environments, in projects lasting from weeks to years, and staffed as large as 1000 employees. The improvement opportunities we identified and the feedback we received indicate that the assessment was effective and efficient. Furthermore, participants confirmed that their understanding on the coordination between RE and ST improved.",0
An Evidence Profile for Software Engineering Research and Practice,"Evidence-based software engineering has emerged as an important part of software engineering. The need for empirical evaluation and hence evidence when developing new models, methods, techniques and tools in research has grown in the last couple of decades. Furthermore, industrial decision-making ought to become more evidence-based. The objective here is to develop and present an evidence-based profile, which could be used to divide pieces of evidence into different types and hence create an overall picture of evidence in a specific case. The evidence profile is developed in such a way that it allows evidence to be judged in context. The evidence profile consists of five types of evidence, and it is illustrated for perspective-based reading. It is shown how pieces of evidence can be classified into the different types. It is concluded that this type of approach may be useful for capturing the evidence with respect to a specific topic and in a specific context. Further work will include applying the evidence profile to evidence collected from different types of studies and contexts. © 2013 Springer-Verlag Berlin Heidelberg. All rights are reserved.",0
"A general theory of software engineering: Balancing human, social and organizational capitals","There exists no generally accepted theory in software engineering, and at the same time a scientific discipline needs theories. Some laws, hypotheses and conjectures exist, but yet no generally accepted theory. Several researchers and initiatives emphasize the need for theory in the discipline. The objective of this paper is to formulate a theory of software engineering. The theory is generated from empirical observations of industry practice, including several case studies and many years of experience in working closely between academia and industry. The theory captures the balancing of three different intellectual capitals: human, social and organizational capitals respectively. The theory is formulated using a method for building theories in software engineering. It results in a theory where the relationships between the three different intellectual capitals are explored and explained. The theory is illustrated based on an industrial case study, where it is shown how decisions made in industry practice are explainable with the formulated theory, and the consequences of the decisions are made explicit. Based on the positive results, it is concluded that the theory may have a good explanatory power, although more evaluations are needed.",0
Guiding the selection of research methodology in industry{\textendash}academia collaboration in software engineering,,1
Successful combination of database search and snowballing for identification of primary studies in systematic literature studies,,0
Empirical software engineering research with industry: Top 10 challenges,"Software engineering research can be done in many ways, in particular it can be done in different ways when it comes to working with industry. This paper presents a list of top 10 challenges to work with industry based on our experience from working with industry in a very close collaboration with continuous exchange of knowledge and information. The top 10 list is based on a large number of research projects and empirical studies conducted with industrial research partners since 1983. It is concluded that close collaboration is a long-term undertaking and a large investment. The importance of addressing the top 10 challenges is stressed, since they form the basis for a long-term sustainable and successful collaboration between industry and academia.",0
Some researcher considerations when conducting empirical studies in industry,"Research collaborations must be set up for a win-win relationship, avoiding many hurdles along the way. In this short paper the goal is to identify some considerations when conducting empirical studies in industry. These considerations deal with problem solution approaches, communication focus, unpleasant results, mismatching interpretations and scope, business aspects and some evaluation criteria for a successful collaboration.",0
University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research,"Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.",0
On The Gap Between Software Maintenance Theory and Practitioners’ Approaches,"The way practitioners perform maintenance tasks in practice is little known by researchers. In turn, practitioners are not always up to date with the proposals provided by the research community. This work investigates the gap between software maintenance techniques proposed by the research community and the software maintenance practice. We carried out a survey with 112 practitioners from 92 companies and 12 countries. We concentrate on analyzing if and how practitioners understand and apply the following subjects: bad smells, refactoring, software metrics, and change impact analysis. This study shows that there is a large gap between research approaches and industry practice in those subjects, especially in change impact analysis and software metrics.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
"Scaling agile in large organizations: Practices, challenges, and success factors",,0
Practical experiences in designing and conducting empirical studies in industry-academia collaboration,"More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Get the cogs in synch,"In industry–academia collaboration projects, there are many issues related to different time horizons in industry and academia. If not adressed upfront, they may hinder collabora-tion in such projects. We analyze our expe-riences from a 10 year industry–academia col-laboration program, the EASE Industrial Ex-cellence Center in Sweden, and identify issues and feasible practices to overcome the hur-dles of different time horizons. Specifically, we identify issues related to contracts, goals, re-sults, organization (in)stability, and work prac-tices. We identify several areas where the time horizon is different, and conclude that mutual awareness of these differences and management commitment to the collaboration are the key means to overcome the differences. The launch of a mediating institute may also be part of the solution.",0
The 4$\mathplus$1 view model of industry--academia collaboration,"Industry–academia projects exist in complex contexts of various stakeholders, time perspec-tives, and goals. In order to analyze projects and communicate about them, we have de-fined an ""architectural"" model for industry– academia collaboration, inspired by Kruchten's software architecture model. The model has four views of i) time, ii) space, iii) activity and iv) domain, corresponding to the ques-tions: when, where, how and what. The +1 view is the scenario, binding the other four to-gether. We illustrate the model by applying it to the Industrial Excellence Center EASE and the Sigrun Software Innovation and En-gineering Institute. The model helps analyz-ing industry–academia collaboration projects, to find gaps and reduce redundant work.",0
Exploring the under-explored terrain of non-open source data for software engineering through the lens of federated learning,,0
Towards improving industrial adoption,"While promising software engineering approaches are proposed every day, only few are adapted by professional developers. There are many potential reasons for this, such as, problems in identifying helpful approaches, missing tools, or lacking practical relevance. With our current research, we are concerned to improve the knowledge transfer from research to practice. In this paper, we discuss the impact of development environments and programming languages on knowledge transfer - considering that many scientific approaches and tools are interesting for professional developers, but rarely adopted by them. We base our discussion mainly on our personal experiences with industry-academia collaborations. To determine whether these experiences also apply to other developers, we additionally conducted a survey with 89 participants from academia and industry. The first results of our on-going work indicate a gap between the development environments and programming languages that are supported or used by researchers and those that are applied in industry. Based on our results, we describe initial discussions that can help to improve collaborations between industry and research.",0
Planning for the Unknown: Lessons Learned from Ten Months of Non-participant Exploratory Observations in the Industry,"Convincing industrial partners to support an exploratory study can be difficult, as benefits are often fuzzy at the beginning. The objective of this paper is to present recommendations for industrial exploratory studies based on our experience. The recommendations are based on ten months of observations during a non-participant, exploratory study with a single industrial partner. This study confirms a number of methodological challenges already identified in the software engineering literature. Based on recommendations from the literature and our own experience, we propose a process for future observational exploratory studies.",1
Ethical Interviews in Software Engineering,"Background: Despite a long history, numerous laws and regulations, ethics remains an unnatural topic for many software engineering researchers. Poor research ethics may lead to mistrust of research results, lost funding and retraction of publications. A core principle for research ethics is confidentiality, and anonymization is a standard approach to guarantee it. Many guidelines for qualitative software engineering research, and for qualitative research in general, exist, but these do not penetrate how and why to anonymize interview data. Aims: In this paper we aim to identify ethical guidelines for software engineering interview studies involving industrial practitioners. Method: By learning from previous experiences and listening to the authority of existing guidelines in the more mature field of medicine as well as in software engineering, a comprehensive set of checklists for interview studies was distilled. Results: The elements of an interview study were identified and ethical considerations and recommendations for each step were produced, in particular with respect to anonymization. Important ethical principles are: consent, beneficence, confidentiality, scientific value, researcher skill, justice, respect for law, and ethical reviews. Conclusions: The most important contribution of this study is the set of checklists for ethical interview studies. Future work is needed to refine these guidelines with respect to legal aspects and ethical boards.",0
Enablers and impediments for collaborative research in software testing,"hen it comes to industrial organizations, current collaboration efforts in software engineering research are very often kept in-house, depriving these organizations off the skills necessary to build independent collaborative research. The current trend, towards empirical software engineering research, requires certain standards to be established which would guide these collaborative efforts in creating a strong partnership that promotes independent, evidence-based, software engineering research. This paper examines key enabling factors for an efficient and effective industry-academia collaboration in the software testing domain. A major finding of the research was that while technology is a strong enabler to better collaboration, it must be complemented with industrial openness to disclose research results and the use of a dedicated tooling platform. We use as an example an automated test generation approach that has been developed in the last two years collaboratively with Bombardier Transportation AB in Sweden.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Software test results exploration and visualization with continuous integration and nightly testing,"Software testing is key for quality assurance of embedded systems. However, with increased development pace, the amount of test results data risks growing to a level where exploration and visualization of the results are unmanageable. This paper covers a tool, Tim, implemented at a company developing embedded systems, where software development occurs in parallel branches and nightly testing is partitioned over software branches, test systems and test cases. Tim aims to replace a previous solution with problems of scalability, requirements and technological flora. Tim was implemented with a reference group over several months. For validation, data were collected both from reference group meetings and logs from the usage of the tool. Data were analyzed quantitatively and qualitatively. The main contributions from the study include the implementation of eight views for test results exploration and visualization, the identification of four solutions patterns for these views (filtering, aggregation, previews and comparisons), as well as six challenges frequently discussed at reference group meetings (expectations, anomalies, navigation, integrations, hardware details and plots). Results are put in perspective with related work and future work is proposed, e.g., enhanced anomaly detection and integrations with more systems such as risk management, source code and requirements repositories.",0
Planning for the Unknown: Lessons Learned from Ten Months of Non-participant Exploratory Observations in the Industry,"Convincing industrial partners to support an exploratory study can be difficult, as benefits are often fuzzy at the beginning. The objective of this paper is to present recommendations for industrial exploratory studies based on our experience. The recommendations are based on ten months of observations during a non-participant, exploratory study with a single industrial partner. This study confirms a number of methodological challenges already identified in the software engineering literature. Based on recommendations from the literature and our own experience, we propose a process for future observational exploratory studies.",1
Difficulty Factors of Obtaining Access for Empirical Studies in Industry,"Context: The difficulty (not just effort) of obtaining access for software engineering empirical studies in industry varies greatly. Supposedly, some of this variance in difficulty is particular, stemming from properties of individual contexts (the industrial partners and their work), while the rest is repeatable, related to properties of the research question and research design. Question: What are these recurring difficulty factors that arise from research question and research design? What mechanisms produce their influence? Method: We use ideation and knowledge extraction from research experience to identify potential difficulty factors, use expert discussion to understand their mechanisms, and use concept analysis to arrange them into a taxonomy. We evaluate the result by comparatively applying it to two research efforts pursued by the same research group. Results: We find six scope factors, five problematic intervention effects factors, and seven helpful intervention (side-)effects factors. Conclusion: Considering these factors systematically during the formulation of a research question and the design of a research method can help with balancing data collection difficulty with results validity and relevance.",0
On top of the consortium: Keeping control of consortium-building in ICT R&D programmes,"Research projects in the engineering domain are often performed in partnership between academia and industry. Some kinds of funding presuppose a specific blend and participation of different partners in the projects. The initiator of a project, the prospective consortium leader, thus has to take on board a selection of organisations to meet the requirements from the funding programme or funding body. One usual way is to ask ""old friends"", partners you know from previous collaboration, but sometimes it is not sufficient to get a well-balanced consortium with sufficient competence and/or country representation. On the European level, there are many attempts to help proposers to build a consortium, often named ""brokerage events"", ""proposer's days"" or the like. These often seem to encourage large consortia, both in principle and in practice. Large consortia can possibly help to be more complementary and well balanced, but there is no evidence that the quality of the project performance or result is better. The encouraged process can be described as a ""snowball"" method. New partners arrive more or less spontaneously, and in their turn bring more partners to the consortium. Often, groups of partners who already know one another tend to join a developing consortium cluster-wise, either by country or by research or competence area. From the funding programme or funding body, consortia are also encouraged to merge with one another, which gives the process of building a consortium another level of complexity. An advantage of this model can be that partners with previous experience join the consortium, group-wise. An opposite approach is to be open, but to stay in control of the consortium-building process. This can be done by giving successive tasks and instructions to the interested partners, without any promises, and just successively incorporating new partners in the consortium. This strategy is a structured semi-open selection process for the consortium, paired with the development of the proposal. We state the hypothesis that the ""standard"" mechanisms might lead to large consortia, loss of control and possibly bad performance, and that a more restricted method can lead to sufficiently sized consortia, help the consortium leader to keep control, and possibly lead to better quality of performance. To learn more about this, we have interviewed a number of experienced project managers to find out how they perform consortium-building in practice. We have also been interested in learning more about how they examine new research partners before inviting them to a research cooperation proposal or project.",0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,"Continuous and long-term collaboration between industry and academia is crucial to develop front-line research in context-dependent areas like software development where both practitioners and researchers are searched for data collection, analysis and results. Despite many mutual benefits, this collaboration is often challenging, not only due to different goals, but also because of different pace in providing the results. The software development industry has during the last decade aligned around and organized their development adopting agile methodologies. For the researchers, the agile methodologies are a topic for a research, rather than a means of performing the research itself. We can state a question, whether the agile methodologies can be a good common ground for enabling successful research collaboration between industry and academia? This paper reports on a longitudinal industry - academia research collaboration case, which has stepwise adapted SCRUM over a six-year period. The implementation of SCRUM and the collaboration successes and challenges are presented, and findings are discussed.",1
Empirical Studies in Question-Answering Systems: A Discussion,"Researchers perform empirical studies in industry to gain qualitative insights into a real-world problem. However, common critics are the diversity and selection process of participants. To address these issues, we propose to improve the integration of question-answering systems into empirical study. In this paper, we i) describe approaches to conduct studies in such systems, ii) exemplify corresponding challenges, and iii) discuss their potential. We illustrate the approaches on existing works in which they were partly implemented to show that they can succeed.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Case Studies of Industry-Academia Research Collaborations for Software Development with Agile,,0
Bridging the `Valley of Death': Can Agile Principles Be Applied in Industry-Academia Research and Innovation Projects?,,0
Foundations for long-term collaborative research,Collaborative research between academia and industry is considered by many the perfect combination of expertise. The strong academic theoretical background is perfectly complemented by the applied knowledge of the industry. Yet we see many collaborative projects that fail to deliver the intended results. We believe that long-term collaboration should be based on foundations that ensure its success. In this paper we aim at defining those foundations by reflecting on the successful collaborative research projects we achieved.,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Guide to Advanced Empirical Software Engineering,,0
Perspectives on the Future of Software Engineering,"Computer software is increasingly critical to the products, infrastructure, and science upon which society depends. However, the production of society’s software is known to be problematic. Current understanding of software production, largely based on anecdotes, is inadequate. Achieving the deeper understanding needed to transform software production experiences into software production improvements requires collecting and using evidence on a large scale. This paper proposes some steps toward that outcome, with particular attention to what government can do to stimulate software engineering studies that will advance the capabilities of software production.",0
The Future of Empirical Methods in Software Engineering Research,"We present the vision that for all fields of software engineering (SE), empirical research methods should enable the development of scientific knowledge about how useful different SE technologies are for different kinds of actors, performing different kinds of activities, on different kinds of systems. It is part of the vision that such scientific knowledge will guide the development of new SE technology and is a major input to important SE decisions in industry. Major challenges to the pursuit of this vision are: more SE research should be based on the use of empirical methods; the quality, including relevance, of the studies using such methods should be increased; there should be more and better synthesis of empirical evidence; and more theories should be built and tested. Means to meet these challenges include (1) increased competence regarding how to apply and combine alternative empirical methods, (2) tighter links between academia and industry, (3) the development of common research agendas with a focus on empirical methods, and (4) more resources for empirical research.",0
Agile Collaborative Research: Action Principles for Industry-Academia Collaboration,"Both the software industry and academia promote collaboration to solve challenges together that neither can solve alone. Collaboration brings opportunities to understand and improve in ways not possible when working apart, but it succeeds only if both parties are contributing. A collaboration model developed from eight years' experience setting up and managing a research center explicitly focused on industry needs is based on five success factors enabling research results (need orientation, industry goal alignment, deployment impact, industry benefit, and innovativeness), five success factors enabling research activities (management engagement, network access, collaborator match, communication ability, and continuity), and 10 action principles for industry-academia collaboration management.",0
The Maturation of Empirical Studies,"Conducting empirical studies and transferring their results into industry in a design discipline such as software engineering is ambitious. This is due to contextual restrictions, representativeness as well as problems in aggregating results from individual studies towards guidelines for practitioners. Nevertheless, they are necessary, as scientific contributions need to be challengeable. Significant progress in areas such as measurement, controlled experiments, industrial case studies, empirical based modeling, and packaging knowledge have been made over the past 30 to 40 years. External visibility has been increased significantly by means of books, conferences & journals! Future challenges include attracting more industrial contributions to the existing body of knowledge, using quantitative & qualitative studies to create more trustful evidences, and aggregation of empirical results. These challenges require community efforts.",0
"Integration of SE Research and Industry: Reflections, Theories and Illustrative Example","Currently, there is limited literature in Software Engineering (SE) that sheds light on the success factors and challenges for knowledge transfer between SE scientists and practitioners. Upon reflections on personal experiences from both academia and industry, this paper attempts to underpin some of the challenges for a successful collaboration, and relate them back to existing theories in the fields of Management, Medicine and Social Sciences. Furthermore, strategies for overcoming some of the challenges are provided and illustrated via a simplified example within the topic of Software Evolution. The intention of this paper is to establish a dialogue for an overall strategy within our field, by providing an illustrative example, and to promote a deeper reflection on the term 'knowledge transfer', which has predominantly focused on an unidirectional knowledge flow from academia to industry.",1
An Exploratory Study on Technology Transfer in Software Engineering,"Background: Technology transfer is one key to the success of research projects, especially in Software Engineering, where the (practical) impact of the outcome may depend not only on the reliability and feasibility of technologies, but also on their applicability to industrial settings. However, there is limited knowledge on the current state of practice and how to assess the success of technology transfer. Objective: We aim at elaborating a set of hypotheses on how technology transfer takes place in Software Engineering research projects. Method: We designed an exploratory survey with the participants of two large research projects in Germany, which involve both industrial and academic partners in the area of model driven development for embedded systems. Results: Base on the extracted respondents answers of this survey, we defined a resulting theory which is based on the following set of main hypothesis: Most of the technologies developed in research projects are not mature enough for a direct application, but need post-project customisation to fit the industrial contexts (H1). Common models that represent technology transfer as a transaction of an object from a transferor to a transferee does not fit industrial reality (H2). Additionally, technology transfer takes place without an explicit process (H3). Regarding transfer mediums, most used mediums are human-intensive (H5) and industry organisations gain new knowledge mainly within their own confines (H4). Finally the motivations that drive the transfer in industry and academia are heterogenous (H6). Conclusions: From the theoretical perspective, this theory and set of hypotheses extracted from the survey results will be further explored and tested in different follow-up activities. This initial set, however, already may serve as a basis for independent assessments from other researchers to collaboratively shed light on a how technology transfer takes place in Software Engineering research projects, which are the barriers, and how to improve the transfer into practice. From the practical perspective, our results may be used as a basis for an evaluation framework for the transfer of the developed technologies in our projects. This would also help companies in getting new developed technologies transfer easier to their specific context.",1
Towards an Approach Matching CMD and DSR to Improve the Academia-Industry Software Development Partnership: A Case of Agile and UX Integration,"The interest on promoting the Academia-Industry partnership in the software development field has been increasingly encouraged by means of research approaches that support the cooperation between researchers and practitioners. The main focus is driven by the collaborative work where the scientific research work meets the real needs of the Industry. Aiming to contribute to this effort we present an approach called Soft Coder (Software Cooperative Design Research) that combines CMD (Cooperative Method Development), a method of Action Re-search, to concepts of DSR (Design Science Research). Our proposal supports the conduction of projects integrating the view-points of Industry and Academia, aiming to add User experience (UX) methods into agile practices. We carried out two studies applying the Soft Coder approach in a software Industry, work in close cooperation with UX and SCRUM teams for building and evaluating artifacts based on UX methods to support practical activities of both teams.",0
"Exploring the Role of Knowledge, Innovation and Technology Management ({KNIT}) Capabilities that Influence Research and Development","A supporting management discipline is an under researched phenomenon. A majority of firms’ operating capabilities relating to knowledge, innovation and technology management as a supporting management discipline. This paper reviews the literature in the research and development (R&D) domain to formulate and propose a conceptual model which is influenced by capabilities relating to knowledge, innovation and technology management. We performed a systematic literature review in which a range of articles were searched related to R&D, from 1990 to 2018. Our review is presented in two parts. The first part presents a descriptive analysis using the Preferred Reporting Items for Systemic View and Mata Analysis (PRISMA)protocol and the second part develop proposition based on keywords analysis. The review revealed that there are nine capabilities that contribute to influence on R&D based on three dimensions known as knowledge, innovation and technology management which correspond to some of the key resources that used to drive these capabilities. Finally, this work proposes a conceptual model based on the outcome of Systematic Literature Review (SLR) interpretation. This research may support current trends on the literature. The list of references may be considered a potential source for future research in this area.",0
A framework to improve university{\textendash}industry collaboration,,1
"Innovation, Knowledge- and Technology Transfer Process Capability Model {\textendash} {innoSPICETM}","The constant technological improvement of products, services, processes and work environment is a critical factor for the development of our economy and society. It strongly depends on the ability to develop knowledge and technology, to transfer it from the point of generation to the site of adaptation and application and to put the technology into use for the benefit of the acquirers and transferors. So far, there is no widely accepted, reliable, predictable and efficient method to evaluate to what extent an organization performs such activities, i.e., innovation, knowledge- and technology transfer (IKaTT). To cope with this problem, we propose to adopt a process-oriented point of view where outcome quality is achieved by the means of process quality. This paper introduces a SPICE conformant innovation, knowledge and technology transfer process capability model that reuses the existing capability dimension of ISO/IEC 15504 to assess knowledge and technology development, transfer and innovation.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
An Approach to Development of an Application Dependent {SPICE} Conformant Process Capability Model,"The Process capability modeling elaborated by the world-wide software engineering community during the last 25 years became a tool for systematization and codifying knowledge and experience of process oriented activities. This tool is designed to improve the predictability of activity results, i.e. process capability. Namely, ISO/IEC 15504 defines a process capability dimension and the requirements for any external process definition to be applicable process capability dimension. Enterprise SPICE defines a domain-independent integrated model for enterprise-wide assessments and pertinent improvement. On the other hand, any application domain contains application specific knowledge and experience that is not covered in width and depth by domain independent process modeling. The purpose of this paper is to address the problem of application dependent SPICE conformant process modeling integrated with application independent components. It will be illustrated with the developer processes of the innovation, knowledge and technology transfer process model innoSPICE.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
A systematic map on verification and validation of emergent behavior in software engineering research,"Context
Emergent behavior cannot be attributed to one individual system alone but arises in the interplay of various systems, components etc. Ensuring the correctness of emergent behavior is a well-known challenge that has been addressed by research in various subfields of software engineering.

Objective
This paper aims at providing a unified view on the research activities conducted and research contributions made on verification and validation of emergent behavior.

Methods
We have conducted a systematic mapping study on the topic of verification and validation of emergent behavior. We applied a combined search strategy using manual, database, and snowball search. In total we investigated 7211 papers, from these 168 relevant papers have been included and classified.

Results
Results show an increasing interest in the topic of verification and validation of emergent behavior. As only little validation and evaluation research has been conducted, the field can be considered still immature. There exist different verification and validation techniques used in the various solution approaches such as model checking, simulation, or runtime monitoring. It stands out that even though research is published in different software engineering fields and subfields no verification or validation technique can be attributed solely to a single field.",0
"{SoftCoDeR} approach: promoting Software Engineering Academia-Industry partnership using {CMD}, {DSR} and {ESE}","Background
The Academia-Industry partnership has been increasingly encouraged in the software development field. The main focus of the initiatives is driven by the collaborative work where the scientific research work meets the real needs of the Industry. Methods
Aiming to contribute to this effort we have proposed an approach called SoftCoDeR (Software Cooperative Design Research) that combines CMD (Cooperative Method Development), a method of Action Research, to concepts of DSR (Design Science Research). ResultsWe have applied the SoftCoDeR approach in a software development company to support a research and development project aiming to integrate User Experience practices into the agile software development process. Conclusions
In this paper, we present new findings about this approach that has been extended with the use of Experimental Software Engineering (ESE) practices to conduct experimental validations of artifacts before putting them in industrial practice.",1
Cooperation between knowledge-based institutions and business: empirical studies and network theories,,0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Measuring Corporate Innovation Capacity: Experience and Implications from i2Metrix Implementation in Vietnam,"This paper discusses the issue of measuring corporate innovation capacity, and proposes a method for implementing such measurement program (i2Metrix). The actual survey on 19 Vietnamese leading businesses suggests that the i2Metrix design is working and can be further improved for future use. Responses by firms’s executives show not only their awareness of innovation but also interest in management tools and methods to make use of this crucially important but elusive concept and resource. Insights from the survey highlight a disciplined process of innovation, adoption, and diffusion.",0
Generating Real-World Impact from Academic Research,,0
Empirical Practice in Software Engineering,"Experimental software engineering has been defined as the scientific approach to systematically evaluating software technologies by referring to predefined hypotheses using sound empirical methods.

The purpose of this chapter is to give an overview of the history, current practice, and future of empirical practice in Software Engineering. In particular, based on what we have learned from 20 years of research in empirical software engineering, we describe the empirical approach we are currently using in terms of a scientific approach to applied research and as a means for systematic evaluation.",0
Creating Minimum Viable Products in Industry-Academia Collaborations,"Customer value determines how products and services succeed in the marketplace. Early assessment of customer value is important for software startups, spin-off companies, and new product development in existing companies. Software technology often influences customer value and typically defines the main competitive advantage in both entrepreneurial and intrapreneurial settings. Value-related feedback from real customers is needed during software development and maintenance, and decision-making should be increasingly based on empirical evidence acquired through experiments. Getting such value-related feedback usually requires a so-called minimum viable product (MVP), i.e., an artefact that may be incomplete in functionality or quality, but displays characteristics that allows determining its customer value. In this article we report on a case study which used industry-academia collaboration for creating such an MVP. Our goal was to identify strengths and weaknesses of such an approach to creating MVPs while providing practical recommendations for improvement. The process followed in the case study was found to be very suitable for creating MVPs, reducing company-specific risks when testing customer-value, and advancing university education.",0
Industry-Academy Collaboration in Agile Methodology: Preliminary Findings of a Systematic Literature Review,,0
Further Development of Information Technology Transfer Concept for Adaptation and Exploitation of European Research Results in the Baltic Sea Region Countries,"Further Development of Information Technology Transfer Concept for Adaptation and Exploitation of European Research Results in the Baltic Sea Region Countries
This paper describes further development of information technology transfer concept for adaptation and exploitation of European research results in the Baltic Sea Region (BSR) countries. Riga Technical University (RTU) and Vilnius University (VU) as the partners of BSR Interreg Programme project BONITA (Baltic Organisation and Network of Innovation Transfer Associations) participate in the research which aims to develop a generic innovation & technology transfer concept (ITTC) to improve the collaboration between academia and industry. Particular attention in the paper is paid to the successfully proven concept of small and specialized exhibitions (the so-called ""showrooms"") run by technology suppliers and technology transfer facilitators. The creation of the distributed multi-organisational showroom-network environment in the framework of BONITA project for the purpose of technology & innovation transfer improvement is described.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Moving Toward Evidence-Based Software Production,,0
An empirical investigation of transferring research to software technology innovation,"Context: Governments are providing more and more support for academia-industry collaborations for industry led research and innovation via Cooperative Research Centers (CRC). It is important to understand the processes and practices of such programs for transferring scientific R&D to innovation. Goal: We aimed at empirically investigating the processes and practices implemented in the context of one of the Australian CRCs, aimed at transferring big data research to innovative software solutions for national security. Method: We applied case study method and collected and analyzed data from 17 interviews and observations of the participants of the studied CRC program. Findings: We present the innovation process implemented in the studied CRC. We particularly highlight the practices used to involve end-users in the innovation process. We further elaborate on the challenges of running this collaborative model for software technology innovation.",0
On the teaching of distributed software development,"As the software industry moves towards software development projects involving several sites around the world, universities should incorporate this trend into their software engineering curricula. We describe the experiences from the development of a university course in distributed software development. Some of the problems of distributed development make it inherently difficult to transfer this domain to the university environment. Also, the concept of ""distribution "" has penetrated not only the contents of the course but many other levels as well.",0
A comparison of computer science and software engineering programmes in English universities,"Recent years have seen much debate about the appropriate content of software engineering (SE) programs and how they relate to computer science (CS) programs, culminating in the distinguishing knowledge areas identified in the ACM/IEEE CS and SE curricula. Given these publications, a reasonable question to ask is: how do current SE programs differ from CS programs and to what extent do the differences reflect the characterizing features given in the ACM/IEEE curricula? We aim to answer these questions for SE programs offered in England. The content of a third of the SE programs in England are analyzed and summarized with respect to the knowledge areas of both the ACM/IEEE CS and SE curricula. The results reveal interesting features; such as intelligent systems is a more distinguishing feature between the CS and SE programs than the expected knowledge areas given in the SE curriculum. The main finding is that there are relatively few differences between existing SE and CS programs offered in England. We conclude with a discussion of the reasons for this situation and its likely implications.",0
Case studies: the potential teaching instruments for software engineering education,"The current approaches to the software engineering education fall short to fulfill the industry demand for quality software engineering. A constant need to create and imbibe more effective learning environments is growing in order to manage this demand. This paper discusses the learning disabilities possessed by both the conventional and the non-conventional approaches for teaching software engineering. We propose that case studies can be used as effective teaching mediums and a case study centric learning environment can address these learning disabilities. A case study approach can help the students to gain and retain realistic exposure to concepts of software engineering as they are applied in the real world, and the students of today can be groomed as excellent professionals who have experienced the intricacies and complexities of the real world as well as tried their hands to manage these complexities.",0
Maintaining High Process Capability in a Student Project Course,"We have provided a focus on process management and improvement as a basis for conducting student group projects. This paper summarises the lessons learnt from eight years of experience in improvement-focussed projects. The approach has been based upon the establishment of the course as a separate and identifiable organization unit, with its own set of process assets. The responsibility for establishment of these assets resides with the students. Assessment for the course is based on an intensive assessment of the capability of the processes implemented by the project team. The project was assessed on three criteria: the process capability achieved; the achievement against a target capability profile defined by the student team in an Improvement Plan; and the comparison of the capability achieved compared to previous year's achievements We have found that it has been quite possible for the student project to achieve capabilities equivalent to Level 3 (as defined in ISO 15504) for a significant set of processes under their control. This work demonstrates the feasibility of maintaining organizational identification in a student project course, with the accompanying benefit of achieving improvement in process capability. The educational benefit of the course derives from exposure to process improvement as a critical goal for the students.",0
Cultivating Operating System Process Concept with Card Game,"Game can be one of the educational tools. With the interactivity and competition, learners will have high motivation to play games. In order to express some abstract concept like operation system process, we designed a card game which subject is operation system process diagram. It is too hard to realize the real process lifecycle. For some students, it is uneasy to find solid examples about operating system. We hope game launch high learning motivation and interaction in operating system. Learners can experience some experience in operation system process lifecycle.",0
Software Engineering Education From Indian Perspective,"Software is omnipresent in today's world. India is a hub to more than 1000 software companies. The software industry is a major employment providing industry in India. As a wholly intellectual artifact, software development is among the most labor demanding, intricate, and error-prone technologies in human history. Software's escalating vital role in systems of pervasive impact presents novel challenges for the education of software engineers. This paper focuses on the current status of software engineering education in India and suggestions for improvement so as to best suit the software industry's needs",0
Cases development for teaching software engineering,"Software engineering offers vast variety of methods and tools for improving the quality of software development. As software products seem to be more complex to build than any other engineered artifacts, selecting suitable methods and tools appears to be crucial. Software engineers should possess broad knowledge on various technologies so that their appropriateness for a particular project could be judged sensibly. Wise judgment however requires not only knowledge but also critical minds. Case method is a discussion-based learning technique where students explore and exploit the knowledge and understanding of a subject matter themselves. The method needs the preparation of specific cases that inspire the exploration and sharing of knowledge, and also encourage critical thinking. This paper discusses the issues and shares the experience of preparing cases for teaching a software engineering course at the undergraduate level. Some guidelines are offered for future case developers of such courses to produce cases.",0
Engineering a successful partnership between academia and the financial industry: A software engineering program for IT professionals,"This paper describes an ongoing partnership between the Seidenberg School of Computer Science and Information Systems at Pace University, a Registered Education Provider (REP) for IEEE and the Information Technology Division at Bank of New York Mellon. The goal of the project is to deliver at the bank's location, a high quality, customized, graduate program in software engineering as well as to reflect on its strong and weak points and improve it. More importantly, through intense interaction with the Bank's IT Management, to ensure that the academic program matches their actual needs. The technology transfer, the customized training and the challenges are discussed.",0
Evaluating the Effectiveness of Board Game Usage to Teach GSE Dynamics,,0
Empirical software engineering research with industry: Top 10 challenges,"Software engineering research can be done in many ways, in particular it can be done in different ways when it comes to working with industry. This paper presents a list of top 10 challenges to work with industry based on our experience from working with industry in a very close collaboration with continuous exchange of knowledge and information. The top 10 list is based on a large number of research projects and empirical studies conducted with industrial research partners since 1983. It is concluded that close collaboration is a long-term undertaking and a large investment. The importance of addressing the top 10 challenges is stressed, since they form the basis for a long-term sustainable and successful collaboration between industry and academia.",0
Business and Information Systems Engineering -- In Quest for Research and Education Agenda in Europe,"The new complex digital and information services systems and industries are calling for new transdisciplinary approaches on how to achieve technical, social, and cultural knowledge and skills to serve future needs of the industry and society. The leading digital industry is in demand of engineer's with knowledge and capabilities to collaborate and move between highly complex digital business and technical systems domains. The new reality is under constant transformation, highly intangible and nonlinear interconnected system. Transformative digital business innovations, rapidly evolving business models, architectures enabled business model scalability and ultra large-scale of systems are the new characteristics of this software-dominant-logic. This paper aims at covering contemporary challenges of the interdisciplinary in business, service, software and systems engineering by analyzing different research ontologies and curriculum models. The paper analyses recent Computer Science (CS) and Information Systems (IS) curriculum developments and reflects through different ontologies and recent research. Paper uses Service Design and Engineering (SDE) as a didactic and curriculum model for future Information Systems Engineering (ISE) and Business and Information Systems Engineering (BISE). The new curriculums serve the needs of global information start-ups, businesses, governments, and societies. This paper aims at describing the ontological foundations and conflicts, the axiology of the new curriculum model and proposes an integrated multi-ontology as the foundation for BISE new curriculum.",0
Industrial case studies in graduate requirements engineering courses: The impact on student motivation,"University education in software engineering instructs sound theoretical concepts together with method competence. It seeks to provide hands-on experience with the learning content along with insights into its application in practice. Even theoretical disciplines are beginning to adopt more experience-oriented instruction as opposed to passive, lecture-oriented instruction. One favored way for experience-oriented instructions is using case studies in lecture-accompanying assignments and/or tutorials. Compared with real-world scenarios, such case studies are often simplified in order to illustrate specific challenges related to the instructed material. This paper reports on our experience in using realistic industry-oriented case studies in a requirements engineering course with graduate students. The experience indicates a strong positive effect on student motivation as well as the degree of comprehension of the instructed theoretical material. These findings are confirmed by evaluations of the learning experience as self-reported through students' questionnaires. Comparing the exam results with previous years indicates substantial improvement in final exam scores.",0
Teaching software engineering through comics and micro-movie design projects,"A new approach based on comics and designing micro-movies is proposed for software engineering education. Comics are used to help students capture the key issues quickly and effectively. The process of making micro-movies provides a context for students to simulate the challenges happened in the real world. The experiment for the new teaching approach has been conducted. The preliminary results are positive. Furthermore, the learning experience is joyful when compared with the other courses.",0
Using a case study to teach students about finding and fixing logic flaws in software,"An application logic flaw is a type of software vulnerability related to privilege manipulation or transaction control manipulation. They are often difficult to identify using automated scanners. A case study on the eCommerce merchant software Bigcommerce, integrated with PayPal Express as a third party payment collector, was created to teach students about this topic. Case studies provide students with a real-world context, and help them understand complex topics better than traditional teaching methods. However, the computer science field, especially computer security, does not have many case studies available. The case study on logic flaws in software was taught in Spring 2015, and the teaching experience is discussed.",0
Project-Based Learning with Examples from Industry in University Courses: An Experience Report from an Undergraduate Requirements Engineering Course,"A significant challenge within university education, especially with regard to the teaching of highly theoretical topics like requirements engineering, is to maintain students' interest and motivation whilst addressing the core concepts that will enable students to work in industry upon graduation. It has long been established that experience-based learning can aid in both these feats: On the one hand, providing students with industrial case examples rather than ""dry"" academic assignments can increase student interest and motivation. On the other hand, a case example-centric classroom approach can yield a rich learning environment which fosters collaboration, communication, and self-directed exploration of the instructed principles. In previous work, we have reported on our experience in changing a graduate requirements engineering course towards using case examples based on real industry projects. As more and more curricula change in advance of project-based teaching paradigms, this paper discusses results from the long-term application of such a course design in a graduate setting. In addition, this paper reports our findings from the replication in an undergraduate requirements engineering course indicating that project-based learning techniques foster different teaching goals in graduate and undergraduate settings.",0
A new software engineering programme - structure and initial experiences,"Software plays an increasingly important role in new products of different kinds. Therefore, the need for engineers developing software is continuously increasing. However computer science education programmes are not enough to fulfil the industrial needs. Software engineering programmes are required with a holistic approach to the software life-cycle and its economics, as well as education in monitoring and managing the software process. At Lund University, Sweden, a new Bachelors software engineering programme was launched 1998. In this paper, the education programme's principles and structures are presented, as well as experiences from the first year. Software processes and methods play an important part in the education programme. It is concluded that the basic principles do function as expected, although the programme must be changed in the direction of requiring more programming skills before the introduction of systematic software processes.",0
An experimental card game for teaching software engineering processes,"The typical software engineering course consists of lectures in which concepts and theories are conveyed, along with a small “toy” software engineering project which attempts to give students the opportunity to put this knowledge into practice. Although both of these components are essential, neither one provides students with adequate practical knowledge regarding the process of software engineering. Namely, lectures allow only passive learning and projects are so constrained by the time and scope requirements of the academic environment that they cannot be large enough to exhibit many of the phenomena occurring in real-world software engineering processes. To address this problem, we have developed Problems and Programmers, an educational card game that simulates the software engineering process and is designed to teach those process issues that are not sufficiently highlighted by lectures and projects. We describe how the game is designed, the mechanics of its game play, and the results of an experiment we conducted involving students playing the game.",0
Teaching software engineering by means of computer-game development: Challenges and opportunities,"Software-engineering education programs are intended to prepare students for a field that involves rapidly changing conditions and expectations. Thus, there is always a danger that the skills and the knowledge provided may soon become obsolete. This paper describes results and draws on experiences from the implementation of a computer game-development course whose design addresses problems in software-engineering education by improving students' abilities in four areas: (1) problem solving; (2) the application of previously learned knowledge; (3) the use of independent learning; and (4) learning by doing. In order to better understand this course's effect on students' performance in a software-development project, I investigated 125 students' performance in a 1-year senior-project course. Results of this study show that the students who had taken the computer game-development course became more successful in the senior-project course than the students who had not taken it.",0
Computer Assisted Learning with Card Game in System Design Concept,"Interactivity and competition will give learners high motivation to play game and let learners interesting in game. Educational
game not only accommodates learner entertainment, but also plays a role of educational tools. In order to assist learners
in study system analysis and design, we create a card game about Rapid Application Development. Learners can gain some experience
from requirements planning, user designing, construction and implementation. This game assists learners remember and realize
the practical experience in system design. We expect that learners can obtain the ability to make decisions and method which
solve the problem mutually when they playing this game.",0
Is software engineering training enough for software engineers?,"Most software engineering courses focus exclusively on the software development process, often referring to problems related to the complexity of software products and processes. In practice, however, many problems of a complex nature arise in which system engineering and other engineering disciplines are important in the development of systems. In such cases software engineers may have difficulty in coping with the entire problem, in the same way that engineers in other fields may have difficulty in understanding the software part. This suggests that the software engineering education of today is inadequate in certain respects. This paper presents a case study of a software engineering course and discusses the difficulty for computer science students to understand and to develop a system which also requires skills in engineering of a non-software nature.",0
A systematic literature review of requirements engineering education,"Requirements engineering (RE) has established itself as a core software engineering discipline. It is well acknowledged that good RE leads to higher quality software and considerably reduces the risk of failure or budget-overspending of software development projects. It is of vital importance to train future software engineers in RE and educate future requirements engineers to adequately manage requirements in various projects. To this date, there exists no central concept of what RE education shall comprise. To lay a foundation, we report on a systematic literature review of the field and provide a systematic map describing the current state of RE education. Doing so allows us to describe how the educational landscape has changed over the last decade. Results show that only a few established author collaborations exist and that RE education research is predominantly published in venues other than the top RE research venues (i.e., in venues other than the RE conference and journal). Key trends in RE instruction of the past decade include involvement of real or realistic stakeholders, teaching predominantly elicitation as an RE activity, and increasing student factors such as motivation or communication skills. Finally, we discuss open opportunities in RE education, such as training for security requirements and supply chain risk management, as well as developing a pedagogical foundation grounded in evidence of effective instructional approaches.",0
Team composition in software engineering project courses,"Composing well-balanced, effective development teams for software engineering project courses is important for facilitating learning, fostering student motivation as well as obtaining a successful project outcome. However, team composition is a challenging task for instructors because they have to consider a variety of possibly conflicting criteria such as practical constraints, skill distribution, or project motivation.
In this paper, we describe our process for composing development teams based on a pre-defined set of criteria that we have established from our experience conducting project courses since 2008 and constantly refined since. We reflect on these criteria by analyzing the team synergy and project satisfaction of participating students as well as their perspective on challenges in their teams in one concrete instance of a multi-project capstone course. Our findings show that lack of motivation, problems with interpersonal relationships and communication issues affect the less satisfied teams more than the others.",0
Industry/University software engineering collaborations for the successful reeducation of non-software professionals,"Production of software is growing at a phenomenal rate worldwide. In addition, the increasingly global business climate has accelerated the need for business software. There are too few software engineers to produce and maintain software to meet this demand. One possible solution to correcting this shortfall is reeducating existing non-software employees to become software engineers. For the past two years, the Industry/University (UU) subgroup of the Working Group on Software Engineering Education and Training (WGSEET) has been investigating active collaborations between companies and universities in which employees without formal software education are reeducated to become software engineers. This paper reports on our findings by discussing our approach to the investigation, outlining the factors involved in successful collaboration construction and execution, and describing alumni views of the knowledge and skills transferred by the collaboration.",0
Reeducation to Expand the Software Engineering Workforce: Successful Industry/University Collaborations,,0
Characteristics of Successful Collaborations to Produce Educated Software Engineering Professionals,"Currently, a large gap exists between the number of open software engineering positions and the number of qualified software engineers to fill those positions. The Industry/University (I/U) subgroup of the Working Group on Software Engineering Education and Training (WGSEET) is investigating active collaborations between companies and universities in which non-software professionals and practitioners without formal software education are reeducated to become software engineers. This paper describes the current status of work performed by the I/U subgroup in the investigation of reeducation collaborations. It is our goal to identify the common characteristics of successful collaborations in order to provide guidance to universities and companies when constructing a collaborative program, as well as to promote future collaborations. In this paper, we report on the current activity of the I/U subgroup, describe the features of successful collaborations identified so far in our research, and provide some conclusions as to the usefulness of such collaborations.",0
A Framework for Interaction in Software Development Training,"Software development Training), which allows students to experience real-world project structures and goals. FIST was devised to establish a corporate-style interaction between the instructor, managers, software project teams, and customers. There are multiple courses involved in FIST. The first course is a combined senior-level/graduate course in software design and specification. In this fall semester course, instruction is given on the Unified Process and the inception phase of the project is begun. In the spring semester, senior computer science students take the capstone software engineering projects course, while graduate students enroll in project management. FIST structures these two courses in an innovative manner. Namely, graduate students perform all the duties of middle and upper management for the senior projects. The main objectives of the framework are to increase productivity, create a realistic business atmosphere, and gain needed experience in development and the application of studied management techniques. These objectives are accomplished through multiple mechanisms. First, we assign explicit roles to all participants and structure the projects, lectures, and assignments across the Unified Process. The classes meet separately so that focus on the particular course instruction can be performed. However, external team meetings are required, as well as multiple customer meetings and reviews throughout the",0
Achieving industrial relevance with academic excellence,"Many educational institutions are developing graduate programs in software engineering targeted to working professionals. These educators face the dilemma of providing programs with both industrial relevance and academic excellence. This paper describes our experience and lessons learned in developing such a program, the Oregon Master of Software Engineering (OMSE). It describes a structured approach to curriculum design, curriculum design principles and methods that can be applied to develop a quality professional program.",0
Aligning software engineering education with industrial needs: A meta-analysis,"Context: According to various reports, many software engineering (SE) graduates often face difficulties when beginning their careers, which is mainly due to misalignment of the skills learned in university education with what is needed in the software industry. Objective: Our objective is to perform a meta-analysis to aggregate the results of the studies published in this area to provide a consolidated view on how to align SE education with industry needs, to identify the most important skills and also existing knowledge gaps. Method: To synthesize the body of knowledge, we performed a systematic literature review (SLR), in which we systematically selected a pool of 35 studies and then conducted a meta-analysis using data extracted from those studies. Results: Via a meta-analysis and using data from 13 countries and over 4,000 data points, highlights of the SLR include: (1) software requirements, design, and testing are the most important skills; and (2) the greatest knowledge gaps are in configuration management, SE models and methods, SE process, design (and architecture), as well as in testing. Conclusion: This paper provides implications for both educators and hiring managers by listing the most important SE skills and the knowledge gaps in the industry.",0
Business Technology Education in the Early 21st Century: The Ongoing Quest for Relevance,,0
On Supervising Master's Theses in Industry Context,,0
Teaching Research Methodologies with a Robot in a {CS} Lab Course,"describe a computer science lab course that teaches a scientific research methodology. Our course is based on a recent research project and augments it with a motivating goal: We program a robot based on the Lego EV3 brick with plain English. Our students developed a multi-module solution; all modules were planned, implemented, and benchmarked following a research life cycle. The results of our case study indicate that a lab course can familiarize students with academic research methodologies. Interviews with the participants, conducted half a year after the lab course, confirm our positive impressions: Our participants indeed internalized the research life cycle and all told us that they wanted to pursue research in their upcoming curriculum. Three of four stated that the possibility to monitor progress by running solutions on the robot was highly motivating.",0
Problems in requirements engineering education,Requirements Engineering Education literature presents various problems that students face while taking courses in Requirements Engineering. This paper reports on an exploratory study to assess the present status of the Requirements Engineering course offered in major public universities in Malaysia. The main instrument used to gather data was the questionnaire. 47 responses were received and analyzed. The results from the questionnaire were discussed and compared with the problems presented in Requirements Engineering Education Literature.,0
Critical Issues in Requirements Engineering Education,"Requirements Engineering (RE) is the most crucial process within software development projects. In order to prepare skilled requirements engineers, Requirements Engineering Education (REE) needs to be provided to students at the university level before they become software engineers and part of the workforce. However, RE is considered the most difficult subject within the software engineering curriculum for students to learn and for lecturers to teach due to its uncertain nature. This chapter examines the current and potential areas for research within REE. It first presents the current status of REE provided in universities and the REE problems reported in the literature that lead us to the potential research problems in REE. The REE teaching approaches proposed by researchers are then elaborated. The proposed approaches are mapped back to address the REE problems. The chapter closes with recommended directions for future REE research.",0
On the Role of Learning Theories in Furthering Software Engineering Education,"Learning theories describe how people learn. There is a large body of work concerning learning theories on which to draw, a valuable resource of which the domain of software engineering educational research has thus far not taken full advantage. In this chapter, we explore what role learning theories could play in software engineering education. We propose that learning theories can move the field of software engineering education forward by helping us to categorize, design, evaluate, and communicate about software engineering educational approaches. We demonstrate this by: (1) surveying a set of relevant learning theories, (2) presenting a categorization of common software engineering educational approaches in terms of learning theories, and (3) using one such approach (SimSE) as a case study to explore how learning theories can be used to improve existing approaches, design new approaches, and structure and guide the evaluation of an approach.",0
Developing Industrial Cases for Teaching Software Engineering {\textendash} A Lesson Learned,"Software engineers are provided with an enormous choice of technology for improving the quality of software. Being intangible, software products tend to be more intricate to build than any other artifacts. The selection of technology can thus become a critical factor for the success of software development. Software engineers are expected to be well-versed in various technologies to enable them to decide the best one for a particular development project. Sensible decisions however require not only understanding but also active minds, which can be achieved through meaningful learning. Being a discussion-based learning approach that encourages students to exploit knowledge and understanding of the subject matter, the Case Method seems to be a practical teaching and learning option. This method entails developing specific cases that promote exploration and critical thinking. To ensure the developed cases are useful, they should be evaluated. This paper presents a practical methodology for developing as well as evaluating industrial cases for teaching software engineering through the Case Method. It also shares some important lessons learned from the process. These lessons act as a guideline for future case developers to compose useful cases and motivate software engineering instructors to use cases in teaching.",0
Success Factors for Using Case Method in Teaching and Learning Software Engineering,,0
Digital Home,"While many Software Engineering (SE) and Computer Science (CS) textbooks make use of case studies to introduce difference concepts and methods, the case studies introduced by these texts focus on a specific life-development phase or a particular topic within software engineering object-oriented design and implementation or requirements analysis and specification. Moreover, these case studies usually do not come with instructor guidelines on how to adopt the introduced material to the instructor's teaching style or to the particular level of the class or students in the class. The DigitalHome Case Study aims at addressing these shortcomings by providing a comprehensive set of artifacts associated with the full software development life-cycle. The project provides an extensive set of case study modules with exercises for teaching different topics in software engineering and computer science, as well as guidance for instructors on how to use these case modules. In this chapter, the authors motivate the use of the case study approach in teaching SE and CS concepts. They provide a description of the DigitalHome case study and the associated artifacts and case modules. The authors also report on the use of the developed material.",0
Involving External Stakeholders in Project Courses,,0
Final Year Students{\textquotesingle} Approaches to Implementing Complex Distributed Systems,"Understanding how final year students build complex software systems is critical for determining whether desired graduate outcomes have been met, for identifying curriculum gaps, and for designing scaffolding and support structures. A large body of work focuses on the programming strategies employed by novice programmers, with few existing research in understanding programming strategies and development focus of final year students, in particular with respect to non-functional requirements. In this paper, we analyse consecutive revisions of 77 students across two cohorts that implemented a large and complex Distributed Systems assignment with several non-functional requirements. To obtain a qualitative overview of the students' approach to software development, we manually read and tagged all sourcefiles in all assignment revisions with specific development focus categories. Our analysis identifies how the students' development focus evolves throughout the assignment timeline. We visualise the software development process and identify several areas that require further support.",0
Industry Projects in Requirements Engineering Education:  Application in a University Course in the {US} and Comparison with Germany,,0
Participating in an Industry Based Social Service Program: a Report of Student Perception of What They Learn and What They Need,,0
Difficulty Factors of Obtaining Access for Empirical Studies in Industry,"Context: The difficulty (not just effort) of obtaining access for software engineering empirical studies in industry varies greatly. Supposedly, some of this variance in difficulty is particular, stemming from properties of individual contexts (the industrial partners and their work), while the rest is repeatable, related to properties of the research question and research design. Question: What are these recurring difficulty factors that arise from research question and research design? What mechanisms produce their influence? Method: We use ideation and knowledge extraction from research experience to identify potential difficulty factors, use expert discussion to understand their mechanisms, and use concept analysis to arrange them into a taxonomy. We evaluate the result by comparatively applying it to two research efforts pursued by the same research group. Results: We find six scope factors, five problematic intervention effects factors, and seven helpful intervention (side-)effects factors. Conclusion: Considering these factors systematically during the formulation of a research question and the design of a research method can help with balancing data collection difficulty with results validity and relevance.",0
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
A Dissection of the Test-Driven Development Process: Does It Really Matter to Test-First or to Test-Last?,"Background: Test-driven development (TDD) is a technique that repeats short coding cycles interleaved with testing. The developer first writes a unit test for the desired functionality, followed by the necessary production code, and refactors the code. Many empirical studies neglect unique process characteristics related to TDD iterative nature. Aim: We formulate four process characteristic: sequencing, granularity, uniformity, and refactoring effort. We investigate how these characteristics impact quality and productivity in TDD and related variations. Method: We analyzed 82 data points collected from 39 professionals, each capturing the process used while performing a specific development task. We built regression models to assess the impact of process characteristics on quality and productivity. Quality was measured by functional correctness. Result: Quality and productivity improvements were primarily positively associated with the granularity and uniformity. Sequencing, the order in which test and production code are written, had no important influence. Refactoring effort was negatively associated with both outcomes. We explain the unexpected negative correlation with quality by possible prevalence of mixed refactoring. Conclusion: The claimed benefits of TDD may not be due to its distinctive test-first dynamic, but rather due to the fact that TDD-like processes encourage fine-grained, steady steps that improve focus and flow.",0
Successful Engagement of Practitioners and Software Engineering Researchers: Evidence From 26 International Industry–Academia Collaborative Projects,"There has been a push to increase the practical relevance and impact of software engineering research. Although many practitioners and researchers agree that this change is desirable, thus far, only a few concrete actions have been taken by the community. In this article, we present our experiences with a large number of collaborative research projects that have had a practical (industrial) impact.",1
Towards an operationalization of test-driven development skills: An industrial empirical study,,0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Practical relevance of software engineering research: synthesizing the community's voice,,0
Questions for data scientists in software engineering: a replication,,0
What do software engineers care about? gaps between research and practice,"It is a cliche to say that there is a gap between research and practice. As the interest and importance in the practical impact of research has been growing, the gap between research and practice is expected to be narrowing. However, our study reveals that there still seems to be a wide gap. We survey so ware engineers about what they care about when developing so ware. We then compare our survey results with the research topics of the papers published in ICSE/FSE recently. We found the following discrepancy: while so ware engineers care more about so ware development productivity than the quality of so ware, papers on research areas closely related to so ware productivity--such as so ware development process management and so ware development techniques--are significantly less published than papers on so ware verification and validation that account for more than half of publications. We also found that so ware engineers are in great need for techniques for accurate effort estimation, and they are not necessarily knowledgable about techniques they can use to meet their needs.",0
Experiences conducting experiments in industry,"The Experimental Software Engineering Industry Laboratory (ESEIL) project funded by the Finland Distinguished Professor Programme (FiDiPro) kicked off in January 2013. The aim of this research is to gain insight into whether experiments in the software industry can play the role of clinical trials in medicine, that is, field test laboratory findings, acting as the last link in the experimental chain. Besides this research goal, we believe that companies can benefit from the conducted experiments by applying the resulting evidence in their decision-making processes.
Controlled experiments in laboratory settings are commonplace in software engineering, but experiments in industry are thin on the ground. Of the few existing cases, most are 1-1 (running one experiment at one company), just a few are n-1 (running n experiments at one company) and still fewer are 1-n (running one and the same experiment at n companies). So far we have conducted the same experiment at seven sites of six companies (four Finnish, one Estonian and one Spanish), and the results have been transferred so that these companies could use the local and global results in decision-making.
This talk will discuss several striking and unexpected behaviours regarding both the developers participating in the experiments and the managers receiving and using the results of the experiments. The talk presents challenges and lessons learnt in recruiting participants for experiments, designing and running the experiment, as well as transferring the results.",0
"An Industry-Academia, Multidisciplinary and Expertise-Heterogeneous Design Approach: A Case Study on Designing for Mobility","The purpose of this article is to provide a better understanding of how to effectively develop design projects that simultaneously leverage industry and academic partners, participants from various disciplinary backgrounds, and various levels of expertise to solve complex problems. The article reports a single case of an ongoing project focused on designing smart and connected devices for mobility, which integrates the dimensions of interest. Our findings highlight the importance of careful planning of the collaborative process, contemplating offline and real-time communication opportunities, identifying cross-boundary roles, and considering the development of shared expertise and knowledge within the team. By confronting these findings with key literature, we offer five recommendations to inform similar future projects.KeywordsDesignBoundary crossingComplex problemsInnovationProject coordination",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Leveraging organizational climate theory for understanding industry-academia collaboration,,1
A Supervised Approach for Automatic Web Documents Topic Extraction Using Well-Known Web Design Features,,0
An industry experiment on the effects of test-driven development on external quality and productivity,"Existing empirical studies on test-driven development (TDD) report different conclusions about its effects on quality and productivity. Very few of those studies are experiments conducted with software professionals in industry. We aim to analyse the effects of TDD on the external quality of the work done and the productivity of developers in an industrial setting. We conducted an experiment with 24 professionals from three different sites of a software organization. We chose a repeated-measures design, and asked subjects to implement TDD and incremental test last development (ITLD) in two simple tasks and a realistic application close to real-life complexity. To analyse our findings, we applied a repeated-measures general linear model procedure and a linear mixed effects procedure. We did not observe a statistical difference between the quality of the work done by subjects in both treatments. We observed that the subjects are more productive when they implement TDD on a simple task compared to ITLD, but the productivity drops significantly when applying TDD to a complex brownfield task. So, the task complexity significantly obscured the effect of TDD. Further evidence is necessary to conclude whether TDD is better or worse than ITLD in terms of external quality and productivity in an industrial setting. We found that experimental factors such as selection of tasks could dominate the findings in TDD studies.",0
On the effectiveness of unit tests in test-driven development,,0
Uso de escenarios en la derivaci{\'{o}}n de software,,0
Architectural design of an intelligent requirements engineering tool,"Research in requirements engineering has resulted in various techniques, methods and frameworks but tool support is currently still very limited. It has been recognized that the lack of intelligent support tools for flexible, reliable, and adaptable requirements engineering processes is a major issue that prevents organizations from improving their requirements engineering practices. In order to implement tools that offer intelligent support for requirements engineering processes, a web-based multitier software architecture is proposed in this paper. An intelligent support tool using this architecture can support scalable software projects and can be adapted to different requirements engineering processes. Based on this architecture we have implemented a web-based tool for the ""Requirements acquisition and specification for telecommunication services"" (RATS) process. It can be configured to run on a standalone computer or in an enterprise environment.",0
Adding hypermedia requirements to goal-driven analysis,"Requirements analysis for Web applications still needs to employ effective RE practices to accommodate some distinctive aspects: capturing high-level communication goals, considering several user profiles, defining hypermedia-specific requirements, and reusing requirements for an effective usability evaluation. Techniques should be usable, informal, require little training effort, and show relative advantage to project managers. Starting from the i* framework, we present a proposal for defining hypermedia requirements (concerning aspects such as content, navigation and presentation) for Web applications. The model adopts a goal-driven approach coupled with scenario-based techniques, introduces a hypermedia requirement taxonomy to facilitate Web conceptual design, and paves the way for systematic usability evaluation. Particular attention is paid to the empirical validation of the model based on the perceived quality attributes theory. A case study developed with industrial partners is discussed.",0
Identifying fruitful connections between and among researchers and practitioners,"Many organizations look to research to yield new and improved products and practices. Connecting practitioners who have the need for research results to the researchers producing those results is important to guiding research and utilizing its results. Likewise, connecting researchers working on related topics to one another, and connecting practitioners with related needs to one another, is important to establishing communities of shared interests. We present an approach that helps identify fruitful such connections.",0
Matching software practitioner needs to researcher activities,"We present an approach to matching software practitioners' needs to software researchers' activities. It uses an accepted taxonomical software classification scheme as intermediary, in terms of which practitioners express needs, and researchers express activities. A decision support tool is used to combine these expressions of needs/activities, and to assist in studying the implications of that combined knowledge. This enables identification of fruitful connections between researchers and practitioners, of areas of common interest among researchers, and practitioners, and of ""gaps"": areas of unfulfilled needs or unmotivated research. We discuss the software engineering underpinning this approach, illustrating its utility by reporting on experiments with a real-world dataset gathered from researchers and practitioners. We also suggest that this same approach would be applicable to understanding the distribution of interests represented by presenters and attendees of a conference such as APSEC.",0
A linguistic-engineering approach to large-scale requirements management,"For large software companies, the sheer number of textual requirements presents specific challenges. To find market opportunities, organizations must continuously elicit new requirements and reevaluate old ones as market needs evolve. Developing large, complex software products aimed at broad markets involves identifying and maintaining the link between product requirements and the massive inflow of customers' wishes. Automating this support through linguistic engineering could save considerable time and improve software quality.",0
Tackling the complexity of requirements engineering process improvement by partitioning the improvement task,"Software process improvement is a complex and expensive endeavor requiring extensive resources and long term commitment. In the present study software process improvement (SPI) problems in small organizations were tackled by dividing the overall effort into three subtopics: technical infrastructure, working practices, and management infrastructure. Partitioning the SPI efforts into these three subtopics makes it apparent that all of these topics do not need to be tackled in the same way but some tasks can, e.g., be outsourced. In this paper the results of an investigation into the use of the model above in requirements engineering (RE) process improvement are reported from three industrial case studies. A domain specific method was constructed independently of the utilizing companies, i.e., outsourced, and it was then used in SPI efforts in the companies to establish a solid infrastructure for basic RE in a short period of time, with limited resources, and without previous expertise in RE. It is argued that the suggested partitioning can both lower the threshold for initiating software process improvement efforts in industry and increase the likelihood of successfully completing them.",0
Shaping requirements for institutional Web applications: experience from an industrial project,"In this paper we recount the experience and the lessons we learned trying to use concretely and in-depth a requirements engineering method (called AWARE) combined with a conceptual user-centered design method (called W2000) for the development of the institutional Web site of the Superior Council for Public Works of the Ministry of Infrastructure and Transportation in Italy. The project is framed within its contractual context, and discussed through the process followed and the artifacts produced during requirements analysis and design. Lessons learned are depicted from a twofold perspective. From the one side they crystallize insights from the research experience of using and transferring the methods to industry, suggesting practical and methodological recommendations. From the other they express what a medium-size software company has experienced trying to use academic methods.",0
"An Empirical Study of the Complex Relationships between Requirements Engineering Processes and Other Processes that Lead to Payoffs in Productivity, Quality, and Risk Management","Requirements engineering is an important component of effective software engineering, yet more research is needed to demonstrate the benefits to development organizations. While the existing literature suggests that effective requirements engineering can lead to improved productivity, quality, and risk management, there is little evidence to support this. We present empirical evidence showing how requirements engineering practice relates to these claims. This evidence was collected over the course of a 30-month case study of a large software development project undergoing requirements process improvement. Our findings add to the scarce evidence on RE payoffs and, more importantly, represent an in-depth explanation of the role of requirements engineering processes in contributing to these benefits. In particular, the results of our case study show that an effective requirements process at the beginning of the project had positive outcomes throughout the project lifecycle, improving the efficacy of other project processes, ultimately leading to improvements in project negotiation, project planning, and managing feature creep, testing, defects, rework, and product quality. Finally, we consider the role collaboration had in producing the effects we observed and the implications of this work to both research and practice",0
What is This Science Called Requirements Engineering?,"This vision paper reflects on the nature and status of requirements engineering as a science, based on recent RE journal articles on methodological foundations and research classification such as (R. Wieringa, et al., 2006). We put this discussion into the wider perspective of ongoing debates in other areas, including social and natural sciences methodology, IS and design research. We propose a new categorization of the notions of validity and evaluation, and suggest a criterial framework inspired by work on the structure of scientific argument",0
A Model for Technology Transfer in Practice,Successful technology transfer requires close cooperation and collaboration between researchers and practitioners. Researchers need to observe the challenges facing industry firsthand and tailor their work accordingly. Practitioners can help shape technology development on the basis of tangible issues identified on site. This article presents a seven-step technology transfer model that reflects collaborations between university researchers and practitioners at two Swedish companies. The authors discuss key lessons learned for each of these seven steps.,0
Value-Oriented Requirements Prioritization in a Small Development Organization,"Requirements engineering, especially requirements prioritization and selection, plays a critical role in overall project development. In small companies, this often difficult process can affect not only project success but also overall company survivability. A value-oriented prioritization (VOP) framework can help this process by clarifying and quantifying the selection and prioritization issues. A case study of a small development company shows a successful VOP deployment that improved communications and saved time by focusing requirements decisions for new product releases on core company values",0
A Reference Framework for Requirements and Architecture in Biomedical Grid Systems,"In this paper we introduce the work done to define a framework for requirements and architectural understanding in biomedical grid computing systems. A set of core requirements for biomedical grids have been identified on the basis of our experience in the analysis and development of several biomedical and other grid systems including the National Cancer Institute 's Early Detection Research Network (EDRN) in the US and the National Cancer Research Institute (NCRI) Platform in the UK. The requirements have been specified taking into account different points of view and are intended as a core set that can be extended on the basis of project specific aspects. These are also mapped to existing architectures of biomedical grid systems, and their constituent components. Such a framework is intended as a guide for equipping developers with conceptual tools to avoid costly mistakes when architecting biomedical grid systems.",0
Putting Business into Business Process Models,"The paper outlines an approach to link business models, based on enterprise ontology, with semantic business process models that are expressed with BPMO concepts and linked to WSMO concepts. The integration of business modelling and business process modelling ensures that the requirements for a Business Process Management System are driven by business objectives. At the same time it allows for flexibility inthe modelling process as underspecified elements in early requirements models are gradually refined intofully specified elements in late requirements models. The integration of both types of models is done via concepts of the i* approach to goal-oriented requirements engineering.",0
Modeling interaction constraints of component interfaces based on dynamic analysis,"The interface specification of components usually lacks behavioral semantics information. Behavioral semantics information specify component interaction constraints on the usage of interface methods, including the order in which these methods should be called and the constraints on the method arguments and returns of methods. Based on dynamic analysis technique, a method which abstracts interaction constraints of component interfaces from the execution traces of component-based software system test is presented in this paper. These interaction constraints are incrementally modeled as finite state machines with parameters. Compared with the existing techniques which synthesize either information on the values of the variables or information on sequences of method invocations, our method generates models that represent the sequence constraints of method invocations, constraints of variable value, and the relations that exist between data values and method invocations.",0
How to Combine Requirements Engineering and Interaction Design?,"In this panel, we propose to figure out how requirements engineering and interaction design can be usefully combined. In particular, some people argue that scenarios/ use cases should be concrete, as in story-telling. Others argue for use of ""essential"" use cases as a methodological approach to interaction and user-interface design. Somewhat in the middle, it is argued that use cases should help acquiring the requirements in the first place. What should the practitioner believe and, in particular, do, in order to develop useful and usable software and systems? Software development and interaction design require different skills and different methods and are typically done by different people. Still, scenario-based design is proposed for several activities relevant for both tasks, such as requirements elicitation, software design, and interaction design. Symbolic modeling in this spirit is actually common to various fields. However, scenario-based approaches vary, especially with regard to their use, e.g., employing abstract use cases or integrating scenarios with functions and goals in a systematic design process. So, the key issue to be raised at the panel is how to combine different approaches, e.g., in scenario-based development, so that the interaction design as well as the development of the user interface and of the software internally result in an overall useful and useable system.",0
Bridging the Research-Practice Gap in Requirements Engineering through Effective Teaching and Peer Learning,"In this paper, we introduce the concept of the research-practice gap as it is perceived in the field of software requirements engineering. An analysis of this gap has shown that two key causes for the research-practice gap are lack of effective communication and the relatively light coverage of requirements engineering material in University programmes. We discuss the design and delivery of a masters course in software requirements engineering (SRE) that is designed to overcome some of the issues that have caused the research-practice gap. By encouraging students to share their experiences in a peer learning environment, we aim to improve shared understanding between students (many of whom are current industry practitioners) and researchers (including academic staff members) to improve the potential for effective collaborations, whilst simultaneously developing the requirements engineering skill sets of the enrolled students. Feedback from students in the course is discussed and directions for the future development of the curriculum and learning strategies are given.",0
A Unification of the Essence of Goal-Oriented Requirements Engineering,"Goal-oriented requirements engineering has been extensively studied and it certainly has a lot of appeal and potential. However, it is not (yet) in wide-spread industrial use. We conjecture as a major reason that the existing approaches are somewhat isolated and generally too complex. The latter reason makes them difficult to apply in real-world projects. Therefore, we distill the essence of goal-oriented requirements engineering and unify it in a simple and comprehensive approach. We also connect it with more common approaches like scenario based requirements engineering (including use cases). As another step towards better applicability, we define a metamodel for a modeling language that allows representing all kinds of goals and their relationships in UML style.",0
Improving the Effectiveness of Visual Representations in Requirements Engineering: An Evaluation of i* Visual Syntax,"Goal-oriented modelling is one of the most important research developments in the RE field. This paper conducts a systematic analysis of the visual syntax of i*, one of the leading goal-oriented languages. Like most RE notations, i* is highly visual. Yet surprisingly, there has been little debate about or modification to its graphical conventions since it was proposed more than a decade ago. We evaluate the notation using a set of evidence-based principles for visual notation design. The paper identifies some serious flaws in the i* visual notation together with some recommendations for improvement. A broader goal of the paper is to raise the level of debate and stimulate discussion about visual representation in RE research.",0
Requirements Prioritization in On-line Banking Systems: Using Value-Oriented Framework,"The concept of decision making is an important issue that has been recognized in requirements prioritization because most projects are constrained by budget and time; therefore it is often difficult to implement all requirements that have been elicited for a system. For prioritization purposes, many approaches have been proposed so far to help the process but still it is not possible to get a real understanding of whether one approach is better. One reason for this may be that different studies are done in different contexts, measure and report different variables, and use different data sets. This makes it hard to compare different studies with each other to get an understanding of when different prioritization approaches are suitable to use. It is also important to realize that using common and similar studies for the body of knowledge in this area will not be possible. This paper presents a study designed for prioritizing of online-banking system requirements through using value-oriented framework which is based on bank business value. Three bank employees from online-banking group have participated in a survey for this study. This study demonstrates accuracy and ease of use of value-oriented framework prioritization in the banking systems by managing and prioritizing of the requirements.",0
Challenges in Contemporary Requirements Practice,"The management of requirements remains a key source of difficulty in systems development projects. Substantive changes in the practice of systems development and associated requirements engineering efforts suggest that a reconsideration of prevailing requirements challenges is warranted. In this essay, we report on a field study of practicing design professionals in which we assess the key challenges they experience in developing a stable set of system requirements. Building upon the findings from our study, we propose a framework for understanding contemporary requirements challenges and the ways in which they are fundamentally interrelated.",0
Key role of value-oriented requirements to develop real-time database systems,"Value-oriented requirements play key role for the success of real time database systems. Specifying value oriented-requirements is crucial for real-time database systems. As real-time database systems have lot of constraints, we cannot control real-time database system at run time, but we can collect value-oriented requirements to improve and develop next version of real-time database system. Quality requirements are elicited from stakeholders, and stakeholders define requirements qualitatively. Qualitatively defined requirements are not measurable and difficult to verify. So there is need to create a value-oriented approach to specify high quality requirements to develop next version of real-time database system. Not so many results have been reported for supporting value-oriented requirements to develop next version of real-time database system. We address issues on non-functional and functional requirements, will try to prove how non-functional requirement can be value-oriented requirements and present a model to get value-oriented requirements. We tried to improve iterative and incremental development by merging value-oriented model, in response to the weaknesses of waterfall model.",0
Integrating analysis of customers' processes into roadmapping: The value-creation perspective,"Roadmapping has been recognized as a critical activity for combining a business strategy with release planning. Furthermore, the marketing literature has placed increasing emphasis on the importance of understanding customers' processes and customer value. This paper presents an action research study on the roadmapping problems of two software product companies. The key findings were that customer knowledge was fragmented across different functions of the companies and that roadmapping neglected service development. To solve these problems, analysis of customer value and customers' processes was integrated into roadmapping. Facilitated workshops with cross-functional teams were used to analyze the customers' processes in their entirety and to create a holistic view to roadmapping. The lessons learned offer practical means with which software companies can shift their focus from the prioritization of software features to the analysis of customers' processes and the prioritization of customers' activities. The shift promotes value creation from the customers' perspective and the discovery of new service business opportunities.",0
A history of the international requirements engineering conference (RE)RE@21,"This paper traces the history of the International Requirements Engineering Conference from its beginnings as the International Symposium on Requirements Engineering and the International Conference on Requirements Engineering. The history is tracked to the present, with suggestions for future considerations, such as more emphasis on systems requirements engineering, and enhanced practitioner participation. Other requirements engineering events and activities are also discussed. A timeline of major milestones is included, along with a brief discussion of requirements engineering research activities that occurred in parallel with the conference.",0
The Concept of Order of Conflict in Requirements Engineering,"Conventional approaches to system design use requirements as boundary conditions against which the design activity occurs. Decisions at a given level of the architecture decomposition can result in the flowing down of conflicting requirements, which are easy to fulfill in isolation but extremely difficult when dealt with simultaneously. Designing against such sets of requirements considerably limits system affordability. Existing research on the evaluation of such conflicts primarily seek to determine the level of conflicts between pairs of requirements. We assert in this paper that these methods are incomplete and using traditional methodologies can result in missing significant conflicts between groups of requirements. We provide a mathematical proof for this assertion and present two case studies that support the mathematical proof. We present the concept of “order of conflict.” The objective of this paper is to prove why pairwise-based conflicting requirements identification and analysis methods based on pairwise comparisons are flawed.",0
"Integration of SE Research and Industry: Reflections, Theories and Illustrative Example","Currently, there is limited literature in Software Engineering (SE) that sheds light on the success factors and challenges for knowledge transfer between SE scientists and practitioners. Upon reflections on personal experiences from both academia and industry, this paper attempts to underpin some of the challenges for a successful collaboration, and relate them back to existing theories in the fields of Management, Medicine and Social Sciences. Furthermore, strategies for overcoming some of the challenges are provided and illustrated via a simplified example within the topic of Software Evolution. The intention of this paper is to establish a dialogue for an overall strategy within our field, by providing an illustrative example, and to promote a deeper reflection on the term 'knowledge transfer', which has predominantly focused on an unidirectional knowledge flow from academia to industry.",1
Reducing Excess Requirements Through Orthogonal Categorizations During Problem Formulation: Results of a Factorial Experiment,"Problem formulation lays at the heart of systems engineering. While an over-constrained solution space may yield no satisficing solution affordably, properly defined solution spaces may enable developing solutions with high levels of affordability. Therefore, effective requirement elicitation from stakeholder needs is key to achieve a proper definition of the problem to be solved. Categorizing requirements according to predefined taxonomies is an inherent part of this activity and they are as diverse as engineering industries are. Conventional approaches, which use a designer-perspective, a contractual perspective, or a combination of both, facilitate the generation of excess facilitate the generation of excess requirements during requirements elicitation due to promoted design biases and overlaps between the different categories. In order to mitigate those problems, orthogonal, system-centric categorization methods have been proposed as a potential solution. Yet, research has not measured the influence of any type of requirement taxonomy on the effectiveness in defining solution spaces of maximum size, i.e., without excess requirements with respect to a given set of stakeholder needs. In order to fill in this gap, this paper presents the results of a factorial experiment involving systems engineering practitioners that compares the effectiveness in eliciting less excess requirements of an orthogonal, system-centric categorization method versus traditional ones.",0
New Frontiers for Requirements Engineering,"Requirements Engineering (RE) has grown from its humble beginnings to embrace a wide variety of techniques, drawn from many disciplines, and the diversity of tasks currently performed under the label of RE has grown beyond that encom-passed by software development. We briefly review how RE has evolved and observe that RE is now a collection of best practices for pragmatic, outcome-focused critical thinking - applicable to any domain. We discuss an alternative perspective on, and de-scription of, the discipline of RE and advocate for the evolution of RE toward a discipline that supports the application of RE prac-tice to any domain. We call upon RE practitioners to proactively engage in alternative domains and call upon researchers that adopt practices from other domains to actively engage with their inspiring domains. For both, we ask that they report upon their experience so that we can continue to expand RE frontiers.",0
How do Practitioners Perceive the Relevance of Requirements Engineering Research? An Ongoing Study,"The relevance of Requirements Engineering (RE) research to practitioners is a prerequisite for problem-driven research in the area and key for a long-term dissemination of research results to everyday practice. To understand better how industry practitioners perceive the practical relevance of RE research, we have initiated the RE-Pract project, an international collaboration conducting an empirical study. This project opts for a replication of previous work done in two different domains and relies on survey research. To this end, we have designed a survey to be sent to several hundred industry practitioners at various companies around the world and ask them to rate their perceived practical relevance of the research described in a sample of 418 RE papers published between 2010 and 2015 at the RE, ICSE, FSE, ESEC/FSE, ESEM and REFSQ conferences. In this paper, we summarize our research protocol and present the current status of our study and the planned future steps.",0
Successful Engagement of Practitioners and Software Engineering Researchers: Evidence From 26 International Industry–Academia Collaborative Projects,"There has been a push to increase the practical relevance and impact of software engineering research. Although many practitioners and researchers agree that this change is desirable, thus far, only a few concrete actions have been taken by the community. In this article, we present our experiences with a large number of collaborative research projects that have had a practical (industrial) impact.",1
Engineering Education Gaming: Case Study of Engineering Ethics Game Modeling,"People have become addicted to their electronic devices spending more time playing video games. This addiction could be due to the attractive and rapid development in technology of devices. Additionally, home quarantine precaution imposed by the COVID 19 pandemic increased one's connection to electronic devices. These reasons and much more affected the educational methodology landscape. On the other hand, old teaching techniques especially in the engineering education nowadays are not fulfilling the market needs [1], [2]. Engineers are required to be up to date as market requirements changes [3]. More practical teaching methods are expected to prepare fresh graduate engineers to the market [1]. These practical skills should be developed in safe environments with an economic, and more engaging ways to engineering students. With the help of Virtual Reality (VR) technologies, this goal could be achieved [4]. This research aims to develop a VR game that meets these needs. This work focuses on understanding the system requirements of the VR game for engineering education using engineering ethics as a case study. Requirements investigation, understanding, and documentation are done using Unified Modeling Language (UML) tools. As a result, the system's requirements are identified with seven logical models and an initial physical model. Consequently, three entities are identified for this VR game: learners, instructor and advisor. Entities relationships also have been demarcated. Future work includes the models' validation, game prototyping, and implementation using learners and educators' feedbacks on the proposed VR game.",0
How do Practitioners Perceive the Relevance of Requirements Engineering Research?,"Context: The relevance of Requirements Engineering (RE) research to practitioners is vital for a long-term dissemination of research results to everyday practice. Some authors have speculated about a mismatch between research and practice in the RE discipline. However, there is not much evidence to support or refute this perception. Objective: This article presents the results of a study aimed at gathering evidence from practitioners about their perception of the relevance of RE research and at understanding the factors that influence that perception. Method: We conducted a questionnaire-based survey of industry practitioners with expertise in RE. The participants rated the perceived relevance of 435 scientific papers presented at five top RE-related conferences. Results: The 153 participants provided a total of 2,164 ratings. The practitioners rated RE research as essential or worthwhile in a majority of cases. However, the percentage of non-positive ratings is still higher than we would like. Among the factors that affect the perception of relevance are the research's links to industry, the research method used, and respondents’ roles. The reasons for positive perceptions were primarily related to the relevance of the problem and the soundness of the solution, while the causes for negative perceptions were more varied. The respondents also provided suggestions for future research, including topics researchers have studied for decades, like elicitation or requirement quality criteria. Conclusions: The study is valuable for both researchers and practitioners. Researchers can use the reasons respondents gave for positive and negative perceptions and the suggested research topics to help make their research more appealing to practitioners and thus more prone to industry adoption. Practitioners can benefit from the overall view of contemporary RE research by learning about research topics that they may not be familiar with, and compare their perception with those of their colleagues to self-assess their positioning towards more academic research.",0
Higher Education Support to Small Medium Enterprises: A Local Experience in Energy Efficiency,,0
Modeling and scenario simulation for decision support in management of requirements activities in software projects,"There are many tools and techniques readily available to support the work in requirements activities of software development processes. As a consequence, the high frequency of errors still occurring in requirements activities suggests that the misunderstanding of the relationships among key decisions is the probable reason for this. The present work presents a system dynamics model constructed to make it possible for users to better understand the relations among key decision variables in requirements activities. The model was parameterized with data taken from previous studies and from a software development company so as to run two sets of simulations with three scenarios each. Optimistic, baseline and pessimistic scenarios are created on the basis of different assumptions regarding risk factors related to requirements volatility and people turnover. We used our simulation results to foresee the effects of these risk factors on the quality and cost of work in requirements activities. Up-to-date results from the software engineering literature strongly support the simulation outcomes obtained in our research. Copyright © 2010 John Wiley & Sons, Ltd.",0
An Empirical Study of Enterprise Conceptual Modeling,"Business analysts, business architects, and solution consultants use a variety of practices and methods in their quest to
understand business. The resulting work products could end up being transitioned into the formal world of software requirement
definitions or as recommendations for all kinds of business activities. We describe an empirical study about the nature of
these methods, diagrams, and home-grown conceptual models as reflected in real practice at IBM. We identify the models as
artifacts of “enterprise conceptual modeling”. We study important features of these models, suggest practical classifications,
and discuss their usage. Our survey shows that the “enterprise conceptual modeling” arena presents a variety of descriptive
models, each used by a relatively small group of colleagues. Together they form a “long tail” that extends from “drawings”
on one end to “standards” on the other.",0
Insights into enterprise conceptual modeling,"Business analysts, business architects, and solution consultants use a variety of practices and methods in their quest to understand business. The resulting work products often end up being transitioned into the formal world of software requirement definitions or as recommendations for all kinds of business activities. We describe an empirical study about the nature of these methods, diagrams, and home grown conceptual models as reflected in real practice at IBM. We identify the models as artifacts of “enterprise conceptual modeling”. We study important features of these models, suggest practical classifications and characterizations, and distinguish them from drawings. Specifically we look into context, type, methods and complexity to determine enterprise conceptual models usage. Our survey shows that the “enterprise conceptual modeling” arena presents a variety of descriptive models, each used by a relatively small group of colleagues. Together they form a spectrum that extends from “drawings” on one end to “standards” on the other.",0
High Impact Design Requirements - Key Design Challenges for the Next Decade,"The High Impact Design Requirements Project involves an international, cross-disciplinary group of researchers and practitioners
focused on setting the agenda for the design requirements discourse. The group’s initial workshop identified five key themes
that should receive more attention in design requirements and practice: (1) fundamental concepts of design, (2) evolution
and the fluidity of design, (3) quality and value-based requirements, (4) requirements intertwining, and (5) adapting requirements
practices in different domains. This chapter presents an introduction to the project, the workshop, and these five themes.",0
Una Aproximaci{\'{o}}n de Ingenier{\'{\i}}a de Requisitos para L{\'{\i}}neas de Productos Software Basada en una Estrategia de Desarrollo Dirigido por Modelos,,0
Goal-driven requirements analysis for hypermedia-intensive Web applications,"Requirements analysis for Web applications still needs to employ effective RE practices to accommodate some distinctive aspects: capturing high-level communication goals, considering several user profiles, defining hypermedia-specific requirements, bridging the gap between requirements and Web design, and reusing requirements for an effective usability evaluation. Techniques should be usable, informal, require little training effort, and show relative advantage to project managers. On the basis of the i * framework, this paper presents a proposal for defining hypermedia requirements (concerning aspects such as content, interaction, navigation, and presentation) for Web applications. The model adopts a goal-driven approach coupled with scenario-based techniques, introduces a hypermedia requirement taxonomy to facilitate Web conceptual design, and paves the way for systematic usability evaluation. Particular attention is paid to the empirical validation of the model based on the perceived quality attributes theory. A case study developed with industrial partners is discussed.",0
Experiences in using practitioner{\textquotesingle}s checklists to evaluate the industrial relevance of requirements engineering experiments,,0
Business process-based requirements specification and object-oriented conceptual modelling of information systems,,0
A Goal-Oriented Requirements Engineering Method for Business Processes,"Central to the development of BPMS technology was the promotion of a new language, Business Process Modelling Notation (BPMN).
The primary goal of BPMN is to provide a common language for describing process behaviour, shareable by business and IT, which
includes business users, business analysts, and technical developers. What seems to be missing in the way that business users
are supposed to use BPMN, is an explicit consideration of the strategic rationale of having certain business processes as
well as support for describing business processes in terms familiar to business people. We extended current work on Goal-Oriented
Requirements Engineering (GORE) for business process design, i.e., B-SCP framework [1] and the work of Lapouchnian et al.
[2], in order to obtain an appropriate GORE for BPMN modelling method. Our first contribution is the introduction of a B-SCP
metamodel, which has been implemented by means of the Eclipse Modelling Framework. Our second contribution is an Eclipse-based
B-SCP editor that enables business users to specify their strategic requirements and operational tasks. Our third contribution
consists of model transformations to generate BPMN skeletons out of the B-SCP model, which were implemented by means of the
Atlas Transformation Language.",0
Integrated product-service analysis using {SysML} requirement diagrams,"During the design of integrated products and services, such as in a product‐service system (PSS), an analysis of specific customer needs and the requirements to fulfil them is an important activity needed to determine value propositions based on the function, use, and result of products. Requirements modeling using the OMG Systems Modeling Language (OMG ™ ) offers a model‐based systems engineering approach to documenting the functionality, performance, and interfacing of systems. However, to use modeling languages, there is a need to understand how the language meets the needs of the modeled system or domain. Following an initial review and evaluation of attributes of PSSs and existing approaches to modeling a PSS, this article analyzes the SysML requirements diagrams–as a technique for analyzing PSS requirements. SysML was compared against existing approaches to PSS modeling using the identified PSS attributes. Case scenarios of PSSs in the automotive industry were also applied to evaluate the use of SysML requirement diagrams. The article concludes by discussing implications of SysML for PSS researchers and managers. ©2012 Wiley Periodicals, Inc. Syst Eng 15",0
Software requirements for interoperable and standard-based power system modeling tools,"Standardization processes and collaborative tools are becoming essential for interoperable modeling and simulation of power systems. The implementation of new electrical network codes at European level requires the development of a common grid modeling exchange standard. Consequently, this requires the development of dynamic models which expose their individual and integrated physical behavior in simulations used in trade-off analyses. These analyses are of particularly importance due to the increasing number of renewable variable energy sources connected to the grid. The development of such models leads to the development of new requirements for power system studies, while ensuring interoperability, security, and privacy of the models. The use of open standards for modeling and simulation could allow the export of all the necessary model information and physical behavior to guarantee consistency between software vendors and stakeholders. This work presents a formalization of functional and non-functional requirements for new standard-compliant software tools using the System Modeling Language (SysML). This work also presents the implementation of these requirements using available information modeling and equation-based modeling standards, illustrating that standards can be combined for model exchange and co-simulation by the application of the FMI standard.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Practical relevance of software engineering research: synthesizing the community's voice,,0
Towards a Communicational Perspective for Enterprise Information Systems Modelling,"This paper presents an overview of Communication Analysis, an approach to enterprise information systems (ISs) modelling that
adopts a communicational perspective. It consists of a method and its underlying requirements structure. The proposed approach
is conceived to be conceptually sound (it is founded on settled knowledge from various scientific fields), practically prescriptive
(it offers guidance and criteria) and flexible (it offers specific strategies to deal with static and dynamic aspects of ISs).
Both the method and the structure have been proved to be successful in complex projects.",0
Industry evaluation of the Requirements Abstraction Model,"Software requirements are often formulated on different levels and hence they are difficult to compare to each other. To address
this issue, a model that allows for placing requirements on different levels has been developed. The model supports both abstraction
and refinement of requirements, and hence requirements can both be compared with each other and to product strategies. Comparison
between requirements will allow for prioritization of requirements, which in many cases is impossible if the requirements
are described on different abstraction levels. Comparison to product strategies will enable early and systematic acceptance
or dismissal of requirements, minimizing the risk for overloading. This paper presents an industrial evaluation of the model.
It has been evaluated in two different companies, and the experiences and findings are presented. It is concluded that the
requirements abstraction model provides helpful improvements to the industrial requirements engineering process.",0
A survey of software project managers on software process change,"Software project managers play an important role in selecting their software development process. In this study we conducted a survey of software project managers about software process change. The result of the survey revealed several factors affecting this type of decision making. It also revealed critical issues in software development projects. In particular, the findings point to the importance of a piloting strategy in technology transfer, as well as the importance of highlighting cost, quality, and schedule information in reporting evidence of a new technique's effectiveness. We expect that the findings of this study could facilitate research on technology transfer and adoption.",0
The iterative and incremental development on real-time database systems,"Our new idea can make the system classification technology requirements
with value-oriented requirements more easily and less ambiguous. So, the
new concept is platform to refine the value orientation for the
requirements of iterative and incremental development real-time database
system. This idea gives us life time keep a single platform of real-time
database update user needs and full availability, guarantees the
reliability of the real-time database system. The method of the value
orientation is the evolution of proof that the batter support
requirements and specifications. This new model more system structure of
the definition and model is better than the existing iterative and
incremental model. All kinds of relations attribute and traceability
value the requirement to alleviate.",0
Costs and obstacles encountered in technical debt management {\textendash} A case study,"Technical debt (TD) is a metaphor that characterizes the effect of immature software artifacts. The costs and benefits of TD, along with the uncertainty of its interest repayment, provide leverage for software managers, but also could lead to problems such as increased costs and lower quality during maintenance if it is left unattended. Therefore, effective approaches to TD management are needed by software practitioners. As one of our series of studies on TD management, this study was originally designed to reveal the cost side of explicit TD management. The study design required applying a simple proposed TD management approach to the subject project and then collecting cost information. Not surprisingly, we observed some deviation of the actual management process from our proposed one, which provided us with an opportunity to investigate the obstacles to explicitly managing 1D. We also identified some costs and cost patterns related to TD management. Based on the insights gained from this study, we further propose strategies to overcome the obstacles and improve the application of TD management in practice.",0
Assessing and improving the front end activities of software development,"The most significant benefits in software development can be achieved through improvements in the front end activities. By improving these processes, the likelihood of delivering high quality software and future business success increases. In this paper, a case study of initial state assessment of requirements engineering (RE) practices in a small software house is reported, along with an outline to improve them. The data was collected by interviewing all company employees with designer responsibilities and a meeting with unit managers was conducted to complement the designer viewpoints on company RE practices and development needs. The findings suggest a need to improve practices in all key RE areas, starting with training the practices and techniques considered suitable for the company. Collaboration and team spirit within the development units were also found to be an essential part of the improvement effort.",0
Requirements in the 21st Century: Current Practice and Emerging Trends,"Requirements have remained one of the grand challenges in the design of software intensive systems. In this paper we review
the main strands of requirements research over the past two decades and identify persistent and new challenges. Based on a
field study that involved interviews of over 30 leading IT professionals involved in large and complex software design and
implementation initiatives, we review the current state-of-the-art in the practice of design requirements management. We observe
significant progress in the deployment of modeling methods, tools, risk-driven design, and user involvement. We note nine
emerging themes and challenges in the requirement management arena: 1) business process focus, 2) systems transparency, 3)
integration focus, 4) distributed requirements, 5) layered requirements, 6) criticality of information architectures, 7) increased
deployment of COTS and software components, 8) design fluidity and 9) interdependent complexity. Several research challenges
and new avenues for research are noted in the discovery, specification, and validation of requirements in light of these requirements
features.",0
Contemporary Challenges in Requirements Discovery and Validation: Two Case Studies in Complex Environments,"Requirements have remained a key source of difficulty since the dawn of computing. Complicating this fact, recent substantive changes in systems development and associated requirements processes - as reflected in reliance on packaged software components, off-shore development, and software-as-a-service - demand a reappraisal of requirements challenges. Yet, there are few empirical studies focusing on what current requirements challenges are, why they emerge and how they affect requirements engineering (RE) efforts. In the present study, we assess the cognitive, social, and complexity-based impediments to effective requirements discovery through two exploratory case studies of large, multi-party development projects. We develop a rich understanding of the requirements challenges facing these development efforts, how these challenges interact and affect the requirements engineering process and outcomes. The analyses reveal significant consistency in the primary challenges of large RE efforts and the profoundly systemic nature of requirements-related impediments. Several recommendations for research and practice of RE are developed.",0
Mapping the State of the Art of Scientific Production on Requirements Engineering Research,"Requirements engineering (RE) is gaining acceptance by industries and practitioners as a significant process in systems development. Similarly, the publications on the research related to the RE topic progresses. However, there is a lack of study on the progressions of this research based on a bibliographic portfolio. This paper presents the emergence of the RE field and mapping the state of the art of scientific production using a bibliometric survey approach. This study identifies the research trends based on the observations of scientific production over the past two decades. Quantitative and qualitative information in requirements engineering research through various bibliographic attributes are presented, such as the leading journals, top-cited articles, top authors, and top countries. Research trends in RE can be observed based on the number of research themes, and the involvement of various disciplines from RE begin to get acknowledged until this study was conducted. The results provide evidence and an overview of future directions in this research field.",0
Development of Systems of Objectives in Early Product Engineering. Entwicklung von Zielsystemen in der frühen Produktentstehung,,0
Requirements for Successful Software Development with Variability: A Case Study,"According to state of the art literature, software product lines are an effective way to achieve economies of scale through reusability while coping with the problem of variability in related software systems. Fundamentals of variability management and product lines have been available in the software engineering research field for several decades. Nevertheless, projects to cope with variability in practice tend to fall short of target. The reason for this gap between sound theories and poor practice, common in multiple software engineering subfields, remains unclear. Therefore, an empirical study was conducted in a large-scale software dependent multinational. The results of this case study show a number of factors that impact successful variability practice. These factors can be abstracted into general hypotheses useful for bridging the gap between theory and practice. Based on the sources of discrepancy, this research suggests a practical way to overcome the obstacles on the road towards successful variability management.",0
A case study on variability management in software product lines: identifying why real-life projects fail,"Economies of scale can be seen as some kind of holy grail in state of the art literature on the development of sets of related software systems. Software product line methods are often mentioned in this context, due to the variability management aspects they propose, in order to deal with sets of related software systems. They realize the sought-after reusability. Both variability management and software product lines already have a strong presence in theoretical research for several decades, but in real-life software product line projects trying to obtain economies of scale still tend to fall short of target. The objective of this paper is to study this gap between theory and reality through an empirical case study in order to see why such gap exists, and to find a way to bridge this gap. Through analysis of the causes of failure identified by the stakeholders in the case study, the underlying problem, which is found to be located in the requirements engineering phase, is crystallized. The identification of a framework describing the problems will provide practitioners with a better focus for future endeavors in the field of software product lines, so that economies of scale can be achieved.",0
Technology transfer decision support in requirements engineering research: a systematic review of {REj},"One of the main goals of an applied research field such as requirements engineering is the transfer of research results to
industrial use. To promote industrial adoption of technologies developed in academia, researchers need to provide tangible
evidence of the advantages of using them. This can be done through industry validation, enabling researchers to test and validate
technologies in a real setting with real users and applications. The evidence obtained, together with detailed information
on how the validation was conducted, offers rich decision support material for industrial practitioners seeking to adopt new
technologies. This paper presents a comprehensive systematic literature review of all papers published in the Requirements
Engineering journal containing any type of technology evaluation. The aim is to gauge the support for technology transfer,
i.e., to what degree industrial practitioners can use the reporting of technology evaluations in the journal as decision support 
for adopting the technologies in industrial practice. Findings show that very few evaluations offer full technology transfer 
support, i.e., have a realistic scale, application or subjects. The major improvement potential concerning support for technology
transfer is found to be the subjects used in the evaluations. Attaining company support, including support for using practitioners
as subjects, is vital for technology transfer and for researchers seeking to validate technologies.",0
A method for evaluating rigor and industrial relevance of technology evaluations,"One of the main goals of an applied research field such as software engineering is the transfer and widespread use of research
results in industry. To impact industry, researchers developing technologies in academia need to provide tangible evidence
of the advantages of using them. This can be done trough step-wise validation, enabling researchers to gradually test and
evaluate technologies to finally try them in real settings with real users and applications. The evidence obtained, together
with detailed information on how the validation was conducted, offers rich decision support material for industry practitioners
seeking to adopt new technologies and researchers looking for an empirical basis on which to build new or refined technologies.
This paper presents model for evaluating the rigor and industrial relevance of technology evaluations in software engineering.
The model is applied and validated in a comprehensive systematic literature review of evaluations of requirements engineering
technologies published in software engineering journals. The aim is to show the applicability of the model and to characterize
how evaluations are carried out and reported to evaluate the state-of-research. The review shows that the model can be applied
to characterize evaluations in requirements engineering. The findings from applying the model also show that the majority
of technology evaluations in requirements engineering lack both industrial relevance and rigor. In addition, the research
field does not show any improvements in terms of industrial relevance over time.",0
Getting the balance right between functional and non-functional requirements: the case of requirement specification in {IT} procurement,"IT procurement represents a business process of high importance, including the ability to articulate requirements that the procurement deals with. Furthermore, specifying requirements is of importance for both procurer and potential supplier, as it functions as central contractual element between the two. The purpose of this article is twofold: (i) to show how established terminology for requirement specification is represented in current call for bids for the procurement of IT; and (ii) to introduce an organizing framework that may assist procurers in actively addressing functional requirements and business requirements. Ten "" call for bids "" were examined from a Swedish national procurement database. From the analysis of the bids, it can be concluded that: (i) the call for bids displays a high degree of precision regarding hardware aspects, but less precision regarding software; (ii) supplier experience and competence is stressed, but rarely elaborated on in detail; and (iii) call for bids vagueness may be used as a lock-in opportunity for suppliers. From the discussion on this, a tentative procurement framework is suggested, aiming on increasing the logical transparency for the procurement of IT.",0
Requirements Engineering Process Improvement Challenges faced by Software {SMEs} in Uganda,,0
Introducing object-oriented requirements engineering for automation systems,"This article raises the question, if and how object-oriented requirements engineering can be applicable and useful for specifying
automation systems. In order to ease the judgment of applicability, it introduces this author’s approach to object-oriented
requirements engineering in the form of a mini-tutorial. Another such approach dedicated to specifying real-time industrial
automation systems is sketched as well, and a combination of ideas appears feasible.
Dieser Artikel stellt die Frage, ob bzw. wie objektorientiertes Requirements Engineering für das Spezifizieren von Automationssystemen
anwendbar und nützlich sein kann. Um die Beantwortung zu erleichtern, führt er in den Ansatz dieses Autors für objektorientiertes
Requirements Engineering ein. Ein anderer solcher Ansatz speziell für das Spezifizieren von industriellen Automationssystemen
mit Realzeit-Anforderungen wird ebenfalls skizziert. Eine Kombination der Ideen erscheint möglich.",0
Method configuration: adapting to situational characteristics while creating reusable assets,"The world of systems engineering methods is changing as rigorous ‘off-the-shelf’ methods gain popularity. The need for configuration of such methods is increasing accordingly. In this paper, method configuration is treated as a kind of method engineering, focusing on adaptation of a base method. A meta-method based on the concepts of Configuration Packages and Configuration Templates is proposed. Configuration Packages are pre-made reusable configurations of a base method suitable for a specific characteristic of a development situation. Configuration Templates with different characteristics can be related to different Configuration Packages and used as a base for reaching a situational method efficiently. The paper presents experiences from two empirical studies in which the Method for Method Configuration was developed and validated. These studies indicate that this meta-method eases the burden of the method engineer in configuring a method for particular project characteristics. Specifically it helped in deciding what in the base method to omit and to make sure that omissions made were congruent with the overall situational method.",0
Implementing requirements engineering processes throughout organizations: success factors and challenges,"This paper aims at identifying critical factors affecting organization-wide implementation of requirements engineering (RE) processes. The paper is based on a broad literature review and three longitudinal case studies that were carried out using an action research method. The results indicate that RE process implementation is a demanding undertaking, and its success greatly depends on such human factors as motivation, commitment and enthusiasm. Therefore, it is essential that the RE process is useful for its individual users. Furthermore, the results indicate that organizations can gain benefits from RE by defining a simple RE process, by focusing on a small set of RE practices, and by supporting the systematic usage of these practices.",0
A {DSS} Design Model for complex problems: Lessons from mission critical infrastructure,"This paper presents a new DSS Design Model for complex, mission critical decision-making situations and its technical, conceptual, and partial empirical evaluation. The new model was derived from conceptual design research and through a deep qualitative field research study at an electric power utility control center—a typical arena for “wicked” problems. The model suggests an iterative process of theory, simulation, and decision-making interactions. The DSS Design Model is validated using a tool instantiation, microgrid mini-case, and current research of a KMDSS for telecommunications. Main findings suggest that broader and more integrated approaches are necessary to design DSS for complex domains.",0
Roadmapping problems in practice: value creation from the perspective of the customers,"Roadmapping has been recognized as a critical activity for adding business value to a software product. The marketing literature has placed increasing emphasis on customer value and that value is created in customers’ everyday activities. This paper presents an action research study on the roadmapping problems of two software product companies. The key findings were that customer knowledge was fragmented across different functions of the companies and that roadmapping neglected service development. To solve these problems, the analysis of customer value and customers’ processes was integrated into roadmapping. Facilitated workshops with cross-functional teams were used to analyze the customers’ processes in their entirety and to create a holistic view to roadmapping. The lessons learned offer practical means for software companies to shift their focus from the prioritization of software features to the analysis of customers’ processes and the prioritization of customers’ activities. That shift can promote value for customers and uncover new service business opportunities. Accordingly, this paper provides a six-step approach to adopt the value-creation logic from the customers’ perspective into the existing roadmapping process of a company.",0
Exploiting Tag Clouds for Database Browsing and Querying,"Querying and browsing of databases is a task exclusively done by experts that have mastered the query language and are familiar
with a database’s schema. We show how tag clouds can be used alongside more traditional query languages and data visualisation 
techniques as a means for browsing and querying databases by both experts and non-expert users. Our approach is based on a
general, extensible framework that supports different modes of visualisation as well as different database systems. We have
validated our prototype with a user study that has shown how non-experts were able to browse and retrieve data that usually
would only be possible by means of queries.",0
"An Industry-Academia, Multidisciplinary and Expertise-Heterogeneous Design Approach: A Case Study on Designing for Mobility","The purpose of this article is to provide a better understanding of how to effectively develop design projects that simultaneously leverage industry and academic partners, participants from various disciplinary backgrounds, and various levels of expertise to solve complex problems. The article reports a single case of an ongoing project focused on designing smart and connected devices for mobility, which integrates the dimensions of interest. Our findings highlight the importance of careful planning of the collaborative process, contemplating offline and real-time communication opportunities, identifying cross-boundary roles, and considering the development of shared expertise and knowledge within the team. By confronting these findings with key literature, we offer five recommendations to inform similar future projects.KeywordsDesignBoundary crossingComplex problemsInnovationProject coordination",0
Requirements Elicitation by Defect Elimination,"This paper aims to develop an Indian-logic based approach for automatic generation of software requirements from a domain-specific ontology. The structure of domain ontology is adapted from Indian logic. The interactive approach proposed in this paper parses the problem statement, and the section of domain ontology, which matches the problem statement, is identified. The software generates questions to stakeholders based on the identified concepts. The answer is analysed for presence of flaws or inconsistencies. Subsequent questions are recursively generated to repair the flaw in the previous answer. These answers are populated into requirements ontology, which contains problem specific information coupled with the interests of the stakeholder. The information gathered is stored in a database, which is later segregated into functional and non-functional requirements. These requirements are classified, validated and prioritized based on combined approach of AHP and stakeholders’defined priority. Conflict between requirements is resolved by the application of cosine correlation measure.",0
An alumni-based collaborative model to strengthen academia and industry partnership: The current challenges and strengths,"Industry-academia collaboration (IAC) has long been a source of discussion in various ways. A vital first step toward closing the gap is fostering alumni engagement in industry and academia. Industry-academia collaborations are like earth and water, and they live in harmony. They cannot exist apart from one another. The collaborative effort between industry and academia promotes improvement and innovation in technology and innovative research and enables the university to be more relevant to the industry. This article proposes a collaborative approach based on alumni influences and uses secondary data on the influences of alumni in engineering to enrich the collaboration between industry and academia. The industry and academia utilize the alumni’s potential to facilitate communication and offer their students and staff facilities. The research findings can be used by policymakers to innovate in the field of engineering and to strengthen the partnership between industry and academia in society. The model enables academia and industry to utilize the alumni strengths in enriching the collaboration; it also enhances academic research output, recruitment, fundraising, marketing, product promotion, and internship opportunities for students via alumni active participation. We propose some significant agendas for future work.",0
Survey of Requirements Engineering Practice in Lithuanian Software Development Companies,,0
How Requirements Specification Quality Depends on Tools: A Case Study,"Requirements specification is a complex activity, where the automated support by the requirements engineering (RE) tools plays
an important role. However, the surveys report that the mainstream practice relies on office and modelling tools rather than
the targeted RE-tools. This work performs a case study, where two requirements specification processes are analyzed. In order
to prepare a requirements document, standard office and modelling tools are used in the first case. In the second case, requirements
specification is executed by the means of the RE-tools. Finally, the quality of both requirements documents is compared and
evaluated by their qualitative properties. The results indicate that the targeted RE-tools provide better support for the
RE process than the standard office and modelling facilities. The requirements document prepared using the targeted RE-tools,
is substantially of better quality. The work findings suggest the RE-tool features which could be improved for the qualitative
automated support of the RE process.",0
Requirements Engineering Tool Evaluation Approach,"Requirements engineering (RE) is a complex activity, potentially involving stakeholders participating in the elicitation,
documentation, validation and management of system requirements. For such a complex activity, powerful tool support is clearly
useful [10, 12]; however, the mainstream of RE practice relies on office and modelling tools rather than targeted RE-tools (e.g. DOORS,
CaliberRM, and RequisitePro). Reasons for not using the RE-tools include financial causes, like high RE-tool price and low
return on investment. Hofmann and Lehner [8]stress that a lack of well-defined RE process and a lack of team training in the selected tools cause the insufficient RE
support. An infrastructure must be set for tool acquisition, and a company must be willing to invest in putting such an infrastructure
[2]. However, the management of such companies usually has the unrealistic expectations, e.g., immediate pay-off.",0
Validating an Evaluation Framework for Requirements Engineering Tools,"Automated support for the requirements engineering (RE) process is a recognized research area. However, the mainstream practice still relies on word processors and drawing tools rather than the requirements engineering tools (RETs). The aim of this chapter is to validate an evaluation framework for RETs. The validation process concerns an RET acquisition process for concrete organizational needs. An observation of maintaining requirements specification shows the important organizational and environmental characteristics for a proper automated support of RE process. The contribution of this work is twofold: first, the validation of the evaluation framework for RETs according to environmental needs in a specific environment, and second the identification of environmental needs, which emerge from the requirements specification maintenance process.",0
Benefits and Challenges in the Use of Case Studies for Security Requirements Engineering Methods,"The premise of this article is that pilot case studies in security requirements engineering provide both benefits and challenges to the underlying research, education, and technology transition effort. Over the past four years we have worked with seven development groups in five organizations in the process of refining and transitioning the Security Quality Requirements Engineering (SQUARE) and SQUARE-Lite methods into practice. These experiences have provided the opportunity to step back and assess the use of pilots in conjunction with student projects to support method refinement and technology transition. Although SQUARE and SQUARE-Lite are concerned with security requirements, the benefits and challenges that have been observed would apply to many security research and technology transition efforts. We itemize and justify these benefits and challenges and discuss their practical relevance and application to ensuring adequate information assurance protection.",0
Continuous and collaborative technology transfer: Software engineering research with real-time industry impact,,1
Theoretical and practical issues in evaluating the quality of conceptual models: current state and future directions,"An international standard has now been established for evaluating the quality of software products. However there is no equivalent standard for evaluating the quality of conceptual models. While a range of quality frameworks have been proposed in the literature, none of these have been widely accepted in practice and none has emerged as a potential standard. As a result, conceptual models continue to be evaluated in practice in an ad hoc way, based on common sense, subjective opinions and experience. For conceptual modelling to progress from an “art” to an engineering discipline, quality standards need to be defined, agreed and applied in practice. This paper conducts a review of research in conceptual model quality and identifies the major theoretical and practical issues which need to be addressed. We consider how conceptual model quality frameworks can be structured, how they can be developed, how they can be empirically validated and how to achieve acceptance in practice. We argue that the current proliferation of quality frameworks is counterproductive to the progress of the field, and that researchers and practitioners should work together to establish a common standard (or standards) for conceptual model quality. Finally, we describe some initial efforts towards developing a common standard for data model quality, which may provide a model for future standardisation efforts.",0
Visual syntax does matter: improving the cognitive effectiveness of the i{\ast} visual notation,"Goal-oriented modelling is one of the most important research developments in the requirements engineering (RE) field. This
paper conducts a systematic analysis of the visual syntax of i*, one of the leading goal-oriented languages. Like most RE notations, i* is highly visual. Yet surprisingly, there has been little debate about or modification to its graphical conventions since
it was proposed more than a decade ago. We evaluate the i* visual notation using a set of principles for designing cognitively effective visual notations (the Physics of Notations).
The analysis reveals some serious flaws in the notation together with some practical recommendations for improvement. The
results can be used to improve its effectiveness in practice, particularly for communicating with end users. A broader goal
of the paper is to raise awareness about the importance of visual representation in RE research, which has historically received
little attention.

KeywordsGoal modelling-
i*-Visualisation-Visual syntax-Evaluation-Visual notation-Visual language",0
Analysis of Early Aspects in Requirements Goal Models: A Concept-Driven Approach,"Early aspects are stakeholder concerns that crosscut the problem domain, with the potential for a broad impact on questions of scoping, prioritization, and architectural design. Analyzing early aspects improves early stage decision-making, and helps trace stakeholder interests throughout the software development life cycle. However, analysis of early aspects is hard because stakeholders are often vague about the concepts involved, and may use different vocabularies to express their concerns. In this paper, we present a rigorous approach to conceptual analysis of stakeholder concerns. We make use of the repertory grid technique to identify terminological interference between stakeholders' descriptions of their goals, and formal concept analysis to uncover conflicts and trade-offs between these goals. We demonstrate how this approach can be applied to the goal models commonly used in requirements analysis, resulting in the clarification and elaboration of early aspects. Preliminary qualitative evaluation indicates that the approach can be readily adopted in existing requirements analysis processes, and can yield significant insights into crosscutting concerns in the problem domain.",0
Using soft systems methodology to improve requirements practices: an exploratory case study,"Soft systems methodology (SSM) should offer substantial benefits in managing expectations and requirements for a software-intensive system, but the benefits have not yet been examined empirically. This study reports an exploratory case study investigating the hypothesis that 'soft systems approach would identify all the flaws in requirements practices and suggest improvements suited to an organisation's context'. The authors analysed problematic requirements practices in an ongoing software-intensive socio-technical project, modelled potential changes and asked the project team to assess the organisational fit of these changes. The authors further monitored the requirements engineering improvements that the project team made according to the case study. The authors conclude that SSM could indeed uncover a relatively complete set of flaws in requirements practices. Although not all suggested changes were regarded as necessary, the implemented changes had contributed positively to the organisation's requirements engineering improvements.",0
An Analysis of Empirical Requirements Engineering Survey Data,"The gap between research and practice in requirements engineering is immense. To understand practice and the reasons for this gap, empirical evidence about requirements engineering practice is needed. In the last ten years a number of empirical studies have been conducted to gather such data. This chapter gives an overview focusing on broad surveys. The aim of this overview is to understand the following three issues: (1) what kind of questions can and should we ask to understand practice, (2) what evidence do we have about practice, (3) what further evidence do we need about practice. To further illustrate the issues, we provide findings of new studies conducted by the authors in Germany and Australia. Altogether this chapter aims at establishing a basis for further empirical research on requirements engineering.",0
A {SURVEY} {OF} {EXISTING} {REQUIREMENTS} {ENGINEERING} {TECHNOLOGIES} {AND} {THEIR} {COVERAGE},"Requirements engineering is a process in which a most diverse set of product demands from a most diverse set of stakeholders has to be considered. Thus, requirements engineering is generally thought of as the most critical and complex process within the development of embedded systems. Over the years, a lot of requirements engineering research has been carried out and reported, but still it seems clear that the industry is struggling with requirements engineering. Why is that, and what should be done to support the industry in tackling its problems? Develop a new method, tailor the existing ones, or better inform the industry of what is available that could help them in their problems? To find some answers, we carried out an inventory of the available requirements engineering technologies, while also looking into their support for requirements engineering. This paper describes the survey and reports our findings indicating that what is most urgently needed is information and evidence of the applicability of the available technologies in different situations, though further development of the technologies is also required.",0
A stakeholders centered approach for conceptual modeling of communication-intensive applications,"To be successful, any engineering product should accomplish the needs and expectations of its potential stakeholders. Similarly, design models should be defined taking into account goals and requirements of their users, i.e. the practitioners who daily conceive, develop and deploy applications. Neglecting stakeholders' needs can bring to lack of attention towards these engineering products (design models) while fitness to requirements can drastically increase their acceptability in the real world. This paper focuses on the domain of Communication and Interaction Intensive applications (C&II applications) by presenting a suite of two conceptual models (namely IDM and E-WOOD) belonging to a more comprehensive methodological framework addressing the analysis and design of such a kind of applications. The focus of the paper is not on the presentation of the methods but on highlighting their fitness to the requirements of the potential adopters of such methods. To this end, the overall framework has been defined on the basis of an accurate analysis of potential stakeholders' goals and requirements gained from our training experience to professional designers and from adoption of our previous conceptual methods in several real-life projects.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
,"This paper is an experience report on an initiative to incorporate requirements engineering practices into the development process of two large corporations. The project was framed by a government program to foster collaboration between academia, industry, and government agencies. Its expected result—proposals for cooperative work—is in itself a major challenge, since it was not decided from the beginning what aspect of requirements engineering would be covered by the proposals.We describe the cooperation process followed by the project partners, three universities, and two companies, the difficulties found therein, and compare our experience with other reports on the issue of adoption of requirements engineering into the mainstream practice.",0
An iterative requirements engineering framework based on Formal Concept Analysis and C{\textendash}K theory,"In this paper, we propose an expert system for iterative requirements engineering using Formal Concept Analysis. The requirements engineering approach is grounded in the theoretical framework of C–K theory. An essential result of this approach is that we obtain normalized class models. Compared to traditional UML class models, these normalized models are free of ambiguities such as many-to-many, optional-to-optional or reflexive associations which cause amongst others problems at design time. FCA has the benefit of providing a partial ordering of the objects in the conceptual model based on the use cases in which they participate. The four operators of the C–K design square give a clear structure to the requirements engineering process: elaboration, verification, modification and validation. In each of these steps the FCA lattice visualization plays a pivotal role. We empirically show how the strategy works by applying it to a set of case studies and a modeling experiment in which 20 students took part.",0
A Noble Methodology for Users' Work Process Driven Software Requirements for Smart Handheld Devices,,0
Market-Driven Requirements Engineering for Software Products,An increasing part of software development is devoted to products that are offered to an open market with many customers. Market-driven development imposes special challenges for the requirements engineering process. This chapter provides an overview of the special characteristics of market-driven requirements engineering and describes the most important challenges of the area. Key elements of market-driven requirements engineering processes are presented together with a definition of process quality. Requirements state models and requirements repositories are also described and examples of typical solutions to progress tracking and data management are provided. The difficult problem of release planning is also discussed and an industrial example of a release planning process is given.,0
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Requirement engineering elicitation methods,,0
Requirement engineering elicitation methods,,0
A field study of the requirements engineering practice in Australian software industry,"Empirical studies have demonstrated that requirements errors introduced during software development are most numerous in the
software life-cycle, making software requirements critical determinants of software quality. This article reports an exploratory
study which provides insight into industrial practices with respect to requirements engineering (RE). A combination of both
qualitative and quantitative data is collected, using semi-structured interviews and a detailed questionnaire from 28 software
projects in 16 Australian companies. The contribution of this RE study is threefold: Firstly, it includes a detailed examination
of the characteristics of the RE activities involved in the projects. Secondly, it reconstructs the underlying practiced process
models. Thirdly, it compares these models to one another and with a number of well-known process models from RE literature
to give insight into the gap between RE theory and practice.",0
Understanding Requirement Engineering Practices,"Requirement engineering is a main task in software process. In Software Engineering literature, many best practices and guidelines are present to construct quality software. However, adoption of such uniform guidelines is not in practice across the globe. In this chapter, the authors discuss requirement engineering practices followed in Pakistani small- and medium-scale enterprises. In order to understand work practices the authors conducted a survey and analyzed the responses. They found that cost and budgeting is one of the major issues of Pakistani industry: higher management is not willing to invest to adopt state-of-the-art standardized practices. This situation can be improved by enhancing public private partnerships to get desired quality software in the local IT industry.",0
A Categorization Model of Requirements Based on Max-Neef{\textquotesingle}s Model of Human Needs,"Requirements categorization is an inherent part of the requirements engineering activity. Conventional approaches use a designer perspective (requirements organized according to design needs or attributes), a contractual perspective (requirements organized according to procurement or acquisition needs), or a combination of both. Such models present several inconveniences that result in limitation of system affordability: facilitate the generation of overlapping requirements, of design-dependent requirements, and of a mix of requirements applicable to different levels of the architecture decomposition or to different products. The present research proposes a Need-based Categorization (NbC) model that is system-centric: Requirements are organized around the system. Inspired by Max-Neef's model of human needs, the proposed model supports requirement elicitation by defining only what the system does, how well, where, and what it uses to accomplish it. The model facilitates the identification of constraints that limit the solution tradespace without supporting the satisfaction of new needs, of overlapping requirements, and of requirements that are not applicable to the system. Finally, the proposed model defines requirements in subsets that are associated with value to stakeholders, thus reflecting the actual dependency nature of requirements at a given level of an architecture decomposition, which promotes holistic decisions instead of local optimizations. © 2013 Wiley Periodicals, Inc. Syst Eng 17",0
Adaptive Requirements Prioritization ({ARP}): Improving Decisions between Conflicting Requirements,"Prioritization of requirements is a core activity of requirements engineering. Conventionally used to resolve conflicting requirements, it can be performed on a wide variety of attributes, reflecting, for example, stakeholder value, value to business, cost, connectivity, or risk. Its benefit in decision making is unquestionable, yet existing techniques are ineffective for realistic sets of requirements and consequently their adoption by practitioners is scarce, particularly in the fields of hardware-intensive systems. The present research proposes an Adaptive Requirements Prioritization (ARP) method that improves decision making between conflicting requirements due to its principles of multidimensionality and objective-base (the right criteria are used for any particular decision), and its usability due its principles of openness (it can be tailored according to specific project needs) and structure (requirements are grouped in subsets so that existing techniques become effective). The effectiveness of the proposed method is evaluated using Monte Carlo simulation for a variety of priority dimensions and priority levels.",0
Um Estudo de Caso de Aplica{\c{c}}{\~{a}}o de um M{\'{e}}todo {\'{A}}gil para Desenvolvimento de Requisitos de Software: O {REAC},,0
Avalia{\c{c}}{\~{a}}o Experimental de um M{\'{e}}todo para Avalia{\c{c}}{\~{a}}o de Equipes de Requisitos,"Esse artigo relata um processo de avaliação experimental de um método de avaliação de equipes de requisitos. Avaliar equipes é uma área explorada no âmbito de gerência de software. No entanto, verificamos que em termos específicos de engenharia de requisitos havia uma lacuna significativa na literatura de avaliação de equipes, o que nos levou a construir um método de avaliação. Nesse artigo mostramos como esse método foi avaliado utilizando-se conceitos de experimentação. A experimentação envolveu quatro equipes, um total de 20 pessoas e foi conduzida ao longo de três meses. Com base na experimentação fizemos uma análise qualitativa do método, que foi utilizada para a própria melhoria do método. O artigo detalha o desenho do experimento, enfatizando as avaliações qualitativas que contribuíram para a melhoria do método de avaliação de equipes de requisitos.",0
Insights from Mining Eleven Years of Scholarly Paper Publications in Requirements Engineering ({RE}) Series of Conferences,"We present insights from a bibliometric analysis and scientific paper publication mining of 551 papers in Requirements Engineering (RE) series of conference (11 years from 2005 to 2015). We study cross-disciplinary and interdisciplinary nature of RE re- search by analyzing the cited disciplines in the reference section of each paper. We apply topic modeling on a corpus consisting of 551 abstracts and extract topics as frequently co-occurring and connected terms. We use topic modeling to study the structure and composition of RE research and analyze popular topics in industry as well as research track. Co-authorship in papers is an indicator of collaboration and interaction between scientists as well as institutions and we analyze co-authorship data to in- vestigate university-industry collaboration, internal and external collaborations. We present results on the distribution of the num- ber of co-authors in each paper as well as distribution of authors across world regions. We present our analysis on the public or proprietary dataset as well as the domain of the dataset used in studies published in Requirements Engineering (RE) series of conferences.",0
Requirements Analysis for Engineering Computation: A Systematic Approach for Improving Reliability,"This paper argues that the reliability of engineering computation can be significantly improved by adopting software engineering 
methodologies for requirements analysis and specification. The argument centers around the fact that the only way to judge
the reliability of a system is by comparison to a specification of the requirements. This paper also points to methods for
documenting the requirements. In particular, a requirements template is proposed for specifying engineering computation software.
To make the mathematical specification easily understandable by all stakeholders, the requirements documentation employs the
technique of using tabular expressions. To clarify the presentation, this paper includes a case study of the documentation
for a system for analyzing statically determinant beams.",0
Model-Driven User Requirements Specification using {SysML},"Requirements engineering is an important phase in a system’s life cycle. When poorly performed, various problems may occur, such as failures, cost overrun and delays. The increasing complexity of systems makes requirements engineering activities both more important and more difficult. Model-driven engineering, in which models are the main artifact during system development, is an emergent approach that tries to address system complexity by the intense use of models. This article proposes a model-driven approach to requirements engineering based on SysML Requirements and Use Case Diagrams. The main advantages are that user requirements are graphically modeled, their relationships are explicitly mapped, and system decomposition is considered in the early system development activities. In addition, requirements traceability is enhanced by using the SysML Requirements tables. The approach is illustrated by a list of user requirements for a road traffic management system.",0
Quality Requirements Analysis with Machine Learning,,0
What practitioners really want: requirements for visual notations in conceptual modeling,,0
Interspecies information systems,"This article introduces a new class of socio-technical systems, interspecies information systems (IIS) by describing several examples of these systems emerging through the use of commercially available data-driven animal-centered technology. When animal-centered technology, such as pet wearables, cow health monitoring, or even wildlife drones captures animal data and inform humans of actions to take towards animals, interspecies information systems emerge. I discuss the importance of understanding them as information systems rather than isolated technology or technology-mediated interactions, and propose a conceptual model capturing the key components and information flow of a general interspecies information system. I conclude by proposing multiple practical challenges that are faced in the successful design, engineering and use of any IIS where animal data informs human actions.",0
Interspecies information systems,"This article introduces a new class of socio-technical systems, interspecies information systems (IIS) by describing several examples of these systems emerging through the use of commercially available data-driven animal-centered technology. When animal-centered technology, such as pet wearables, cow health monitoring, or even wildlife drones captures animal data and inform humans of actions to take towards animals, interspecies information systems emerge. I discuss the importance of understanding them as information systems rather than isolated technology or technology-mediated interactions, and propose a conceptual model capturing the key components and information flow of a general interspecies information system. I conclude by proposing multiple practical challenges that are faced in the successful design, engineering and use of any IIS where animal data informs human actions.",0
Method Components {\textendash} Rationale Revealed,"The configuration of systems engineering methods is a challenging task. As a method engineer it is essential to have conceptual constructs capable of reducing the burden of details during method configuration and thus make it possible to create a balance between precision and cost. In this paper we present the method component construct, which seems fruitful for method configuration and meta method development. Furthermore, by introducing an internal and an external view of this construct we can hide details of the method component during configuration work and connect method components to each other through use of interfaces expressing goals realized by the method components. The proposed concept and views can also be used in the process of developing tool-support for method configuration.",0
"Knowledge Transfer, Sharing, and Management System Based on Causality for Requirements Change Management","In software development, requirements changes cannot be avoided. Despite the importance of requirements change management, few studies in the literature concern requirements change knowledge management(RCKM). This study explored knowledge transfer and sharing of RCKM based on change cause analysis and the design of a knowledge management system(KMS) for change management. In this paper, previous research is discussed in three aspects: factors affecting knowledge transfer and sharing, methods to implement knowledge transfer and sharing, and the design of a KMS. After that, the results of a recent questionnaire are analyzed. Finally, this paper discusses the sources of tacit knowledge in the personnel management aspects of software development; the knowledge and the methods of knowledge transfer and sharing in the requirements change management process based on change cause analysis; the design of a data flowchart of repositories, and a prototype structure, logical model, and functional modules of RCKM systems. In conclusion, further study is suggested.",0
Mapping software testing practice with software testing research — SERP-test taxonomy,There is a gap between software testing research and practice. One reason is the discrepancy between how testing research is reported and how testing challenges are perceived in industry. We propose the SERP-test taxonomy to structure information on testing interventions and practical testing challenges from a common perspective and thus bridge the communication gap. To develop the taxonomy we follow a systematic incremental approach. The SERP-test taxonomy may be used by both researchers and practitioners to classify and search for testing challenges or interventions. The SERP-test taxonomy also supports comparison of testing interventions by providing an instrument for assessing the distance between them and thus identify relevant points of comparisons.,0
Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report,"The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase.",0
A Taxonomy for Improving Industry-Academia Communication in IoT Vulnerability Management,"Background: In software engineering, industryacademia is a symbiotic relationship. Researchers need to be aware of the industry to produce relevant research, while practitioners are educated in academia and could take advantage of empirical research. The SERP taxonomy architecture is designed to support communication between practitioners and researchers in software engineering. Objective: The purpose of this study is to analyze to what extent the SERP taxonomy architecture is useful for improving communication between researchers and practitioners in IoT vulnerability management. Method: We developed a SERP taxonomy for IoT vulnerability management, SERP-MENTION, in an incremental way. Along the development, we evaluated the developed taxonomy in a project of industry academia collaboration. Results: In addition to the taxonomy itself we elaborate on the taxonomy development process and the potential of SERP-MENTION to support communication between researchers and practitioners within the area. Conclusion: The SERP architecture can be used in a new field, it is perceived as useful by potential users to better describe and communicate research outputs and practical challenges in software vulnerability management.",0
A Method to Assess and Argue for Practical Significance in Software Engineering,"A key goal of empirical research in software engineering is to assess practical significance, which answers the question whether the observed effects of some compared treatments show a relevant difference in practice in realistic scenarios. Even though plenty of standard techniques exist to assess statistical significance, connecting it to practical significance is not straightforward or routinely done; indeed, only a few empirical studies in software engineering assess practical significance in a principled and systematic way. In this paper, we argue that Bayesian data analysis provides suitable tools to assess practical significance rigorously. We demonstrate our claims in a case study comparing different test techniques. The case study's data was previously analyzed (Afzal et al., 2015) using standard techniques focusing on statistical significance. Here, we build a multilevel model of the same data, which we fit and validate using Bayesian techniques. Our method is to apply cumulative prospect theory on top of the statistical model to quantitatively connect our statistical analysis output to a practically meaningful context. This is then the basis both for assessing and arguing for practical significance. Our study demonstrates that Bayesian analysis provides a technically rigorous yet practical framework for empirical software engineering. A substantial side effect is that any uncertainty in the underlying data will be propagated through the statistical model, and its effects on practical significance are made clear. Thus, in combination with cumulative prospect theory, Bayesian analysis supports seamlessly assessing practical significance in an empirical software engineering context, thus potentially clarifying and extending the relevance of research for practitioners.",0
A Method to Assess and Argue for Practical Significance in Software Engineering,"A key goal of empirical research in software engineering is to assess practical significance, which answers the question whether the observed effects of some compared treatments show a relevant difference in practice in realistic scenarios. Even though plenty of standard techniques exist to assess statistical significance, connecting it to practical significance is not straightforward or routinely done; indeed, only a few empirical studies in software engineering assess practical significance in a principled and systematic way. In this paper, we argue that Bayesian data analysis provides suitable tools to assess practical significance rigorously. We demonstrate our claims in a case study comparing different test techniques. The case study's data was previously analyzed (Afzal et al., 2015) using standard techniques focusing on statistical significance. Here, we build a multilevel model of the same data, which we fit and validate using Bayesian techniques. Our method is to apply cumulative prospect theory on top of the statistical model to quantitatively connect our statistical analysis output to a practically meaningful context. This is then the basis both for assessing and arguing for practical significance. Our study demonstrates that Bayesian analysis provides a technically rigorous yet practical framework for empirical software engineering. A substantial side effect is that any uncertainty in the underlying data will be propagated through the statistical model, and its effects on practical significance are made clear. Thus, in combination with cumulative prospect theory, Bayesian analysis supports seamlessly assessing practical significance in an empirical software engineering context, thus potentially clarifying and extending the relevance of research for practitioners.",0
On the search for industry-relevant regression testing research,"Regression testing is a means to assure that a change in the software, or its execution environment, does not introduce new defects. It involves the expensive undertaking of rerunning test cases. Several techniques have been proposed to reduce the number of test cases to execute in regression testing, however, there is no research on how to assess industrial relevance and applicability of such techniques. We conducted a systematic literature review with the following two goals: firstly, to enable researchers to design and present regression testing research with a focus on industrial relevance and applicability and secondly, to facilitate the industrial adoption of such research by addressing the attributes of concern from the practitioners’ perspective. Using a reference-based search approach, we identified 1068 papers on regression testing. We then reduced the scope to only include papers with explicit discussions about relevance and applicability (i.e. mainly studies involving industrial stakeholders). Uniquely in this literature review, practitioners were consulted at several steps to increase the likelihood of achieving our aim of identifying factors important for relevance and applicability. We have summarised the results of these consultations and an analysis of the literature in three taxonomies, which capture aspects of industrial-relevance regarding the regression testing techniques. Based on these taxonomies, we mapped 38 papers reporting the evaluation of 26 regression testing techniques in industrial settings.",0
{SERP}-test: a taxonomy for supporting industry{\textendash}academia communication,"This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry–academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.",1
How software engineering research aligns with design science: a review,"Background
Assessing and communicating software engineering research can be challenging. Design science is recognized as an appropriate research paradigm for applied research, but is rarely explicitly used as a way to present planned or achieved research contributions in software engineering. Applying the design science lens to software engineering research may improve the assessment and communication of research contributions.AimThe aim of this study is 1) to understand whether the design science lens helps summarize and assess software engineering research contributions, and 2) to characterize different types of design science contributions in the software engineering literature.Method
In previous research, we developed a visual abstract template, summarizing the core constructs of the design science paradigm. In this study, we use this template in a review of a set of 38 award winning software engineering publications to extract, analyze and characterize their design science contributions.ResultsWe identified five clusters of papers, classifying them according to their different types of design science contributions.Conclusions
The design science lens helps emphasize the theoretical contribution of research output—in terms of technological rules—and reflect on the practical relevance, novelty and rigor of the rules proposed by the research.",0
How software engineering research aligns with design science: a review,"Background
Assessing and communicating software engineering research can be challenging. Design science is recognized as an appropriate research paradigm for applied research, but is rarely explicitly used as a way to present planned or achieved research contributions in software engineering. Applying the design science lens to software engineering research may improve the assessment and communication of research contributions.AimThe aim of this study is 1) to understand whether the design science lens helps summarize and assess software engineering research contributions, and 2) to characterize different types of design science contributions in the software engineering literature.Method
In previous research, we developed a visual abstract template, summarizing the core constructs of the design science paradigm. In this study, we use this template in a review of a set of 38 award winning software engineering publications to extract, analyze and characterize their design science contributions.ResultsWe identified five clusters of papers, classifying them according to their different types of design science contributions.Conclusions
The design science lens helps emphasize the theoretical contribution of research output—in terms of technological rules—and reflect on the practical relevance, novelty and rigor of the rules proposed by the research.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
An alumni-based collaborative model to strengthen academia and industry partnership: The current challenges and strengths,"Industry-academia collaboration (IAC) has long been a source of discussion in various ways. A vital first step toward closing the gap is fostering alumni engagement in industry and academia. Industry-academia collaborations are like earth and water, and they live in harmony. They cannot exist apart from one another. The collaborative effort between industry and academia promotes improvement and innovation in technology and innovative research and enables the university to be more relevant to the industry. This article proposes a collaborative approach based on alumni influences and uses secondary data on the influences of alumni in engineering to enrich the collaboration between industry and academia. The industry and academia utilize the alumni’s potential to facilitate communication and offer their students and staff facilities. The research findings can be used by policymakers to innovate in the field of engineering and to strengthen the partnership between industry and academia in society. The model enables academia and industry to utilize the alumni strengths in enriching the collaboration; it also enhances academic research output, recruitment, fundraising, marketing, product promotion, and internship opportunities for students via alumni active participation. We propose some significant agendas for future work.",0
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
From Blackboard to the Office: A Look Into How Practitioners Perceive Software Testing Education,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Context checklist for industrial software engineering research and practice,"The relevance of context is particularly stressed in case studies, where it is said that “case study is an empirical method aimed at investigating contemporary phenomena in their context”. In this research, we classify context information and provide a context checklist for industrial software engineering. The checklist serves the purpose of (a) supporting researchers and practitioners in characterizing the context in which they are working; (b) supporting researchers with a checklist to identify relevant contextual information to elicit and report during primary and secondary studies. We utilized a systematic approach for constructing the classification of context information and provided a detailed definition for each item. We collected feedback from researchers as well as practitioners. The usefulness of the checklist was perceived more positively by researchers than practitioners, though they highlighted benefits (raising awareness of the importance of context and usefulness for management). The understandability was perceived positively by both practitioners and researchers. The checklist may serve as a “meta-model”, forming the basis for specific adaptations for different research areas, and as input for researchers deciding which context information to extract in systematic reviews. The checklist may also help researchers in reporting context in research papers.",1
"A Taxonomy of Information Attributes for Test Case Prioritisation: Applicability, Machine Learning","Most software companies have extensive test suites and re-run parts of them continuously to ensure recent changes have no adverse effects. Since test suites are costly to execute, industry needs methods for test case prioritisation (TCP). Recently, TCP methods use machine learning (ML) to exploit the information known about the system under test (SUT) and its test cases. However, the value added by ML-based TCP methods should be critically assessed with respect to the cost of collecting the information. This paper analyses two decades of TCP research, and presents a taxonomy of 91 information attributes that have been used. The attributes are classified with respect to their information sources and the characteristics of their extraction process. Based on this taxonomy, TCP methods validated with industrial data and those applying ML are analysed in terms of information availability, attribute combination and definition of data features suitable for ML. Relying on a high number of information attributes, assuming easy access to SUT code and simplified testing environments are identified as factors that might hamper industrial applicability of ML-based TCP. The TePIA taxonomy provides a reference framework to unify terminology and evaluate alternatives considering the cost-benefit of the information attributes.",0
The Design Science Paradigm as a Frame for Empirical Software Engineering,"Software engineering research aims to help improve real-world practice. With the adoption of empirical software engineering research methods, the understanding of real-world needs and validation of solution proposals have evolved. However, the philosophical perspective on what constitutes theoretical knowledge and research contributions in software engineering is less discussed in the community. In this chapter, we use the design science paradigm as a frame for articulating and communicating prescriptive software engineering research contributions. Design science embraces problem conceptualization, solution (or artifact) design, and validation of solution proposals, with recommendations for practice phrased as technological rules. Design science is used in related research areas, particularly information systems and management theory. We elaborate the constructs of design science for software engineering, relate them to different conceptualizations of design science, and provide examples of possible research methods. We outline how the assessment of research contributions, industry–academia communication, and theoretical knowledge building may be supported by the design science paradigm. Finally, we provide examples of software engineering research presented through a design science lens.",1
Exploring {ML} testing in practice,,0
Successful combination of database search and snowballing for identification of primary studies in systematic literature studies,,0
{QReal} {DSM} platform - An Environment for Creation of Specific Visual {IDEs},,0
Engineering Model Recommender Foundations - From Class Completion to Model Recommendations,,0
Towards customer-based requirements engineering practices,"Factors related to the requirements engineering process and customers have been repeatedly reported among those that most strongly influence the success of a software project. However, requirements engineering research has so far barely studied practice from a customer-based perspective. Furthermore, rigorous evidence about customers' perspectives regarding requirements engineering approaches is scarce, and links between customer-based requirements engineering research and the industrial practices are necessary. This paper argues that new research is necessary to tackle the above weaknesses. Our position is that: requirements specification approaches must be validated from a customer-based perspective; the influence of customers' characteristics on the requirements engineering process must be studied in more depth; and potential customer-based improvements in practice must be assessed. We also present situations in which the results from these activities would help practitioners, propose a research agenda to execute these activities, and discuss challenges that might hinder their execution.",0
Dealing with Software Model Quality in Practice: Experience in a Research Project,"Although past research has resulted in different means to deal with software model quality, creation of adequate software models remains challenging. Any modelling effort must be carefully analysed and planned before it starts, and definition or adoption of modelling guidelines is usually necessary. In addition, the amount of publications addressing model quality in practice is low, and the knowledge about others' experience regarding model quality is limited. This paper reports on our experience in dealing with software model quality in the context of a project between industry and academia. Such a project corresponds to a large-scale research project in which modelling has been used both as part of the necessary work for executing the project and for creating project results. We present how we have dealt with model quality in requirements modelling and in conceptual model specification, as well as a set of lessons learned. The insights provided can help both researchers and practitioners when having to deal with software model quality.",0
Specifying a framework for evaluating requirements Engineering Technology: Challenges and lessons learned,"Evaluating requirements engineering technology is a challenging activity. It becomes even more difficult when having to evaluate the technology and thus to show its suitability in real settings, as access to industrial resources might be limited and the target domain might be complex or very sensitive. This paper reports on our experience in specifying an evaluation framework for requirements engineering technology. The technology aims to improve safety assurance and certification practices, and is being developed in the scope of a large-scale European research project. We focus on presenting the challenges encountered and the lessons learned while specifying the framework. These lessons summarise how we addressed, plan to address, or propose to address the challenges. This information can be useful for other researchers and practitioners that have to evaluate requirements engineering technology in general, and with industry and for safety assurance and certification in particular.",0
Zen-CC: An Automated and Incremental Conformance Checking Solution to Support Interactive Product Configuration,"In the context of product line engineering (PLE), providing immediate feedback on the correctness of a manual configuration step to users has a practical impact on whether a configuration process with tool support can be successfully adopted in practice. Model-based PLE has brought opportunities to enable automated product configuration and derivation for large-scale systems/software, in which models are used as the abstract specification of commonalities and variabilities of products of a product line. In our previous work, we have proposed a UML-based variability modeling methodology and an interactive configuration process. Based on these work, in this paper, we propose an automated and incremental conformance checking approach to ensure that the manual configuration to each variation point conforms to a set of pre-defined conformance rules specified in OCL. The proposed approach, called Zen-CC is implemented as a component of our product configuration and derivation tool, named as Zen-Configurator. The proposed approach is evaluated with two real-world case studies and results showed that the performance of Zen-CC is significantly better than a baseline algorithm checking all the conformance rules at each configuration step. Moreover, the performance of Zen-CC rarely varies during the configuration process, suggesting that our approach is scalable for configuring products with a large number of configuration points.",0
Nonconformity Resolving Recommendations for Product Line Configuration,"In the context of large-scale system product line engineering, manual configuration is often mandatory and therefore inevitably introduces nonconformities: violating pre-defined constraints for conformance checking. Resolving nonconformities without proper tool support is more or less random, as there are usually hundreds and thousands of configurable parameters and conformance constraints, in the context of configuring a large-scale and directly deployable system. Moreover, inter-connections among constraints and configurable parameters worsen the feasibility of manual resolving nonconformities without proper tool support. In this paper, we present an automatic approach (named as Zen-FIX) to optimally recommend solutions to resolve nonconformities using multi-objective search. Solutions recommended by Zen-FIX conform to all pre-defined constraints and are optimized in terms of maximizing the overall efficiency of an interactive product configuration process. We evaluated Zen-FIX with a real-world case study containing 52454 optimization problems, with which we evaluated seven multi-objective search algorithms. Results show that MoCell outperformed all others: CellDE, IBEA, NSGA-II, PESA2, Random, SPEA2, for most of the problems, in terms of Efficiency (a combined metric of finding optimized solutions and time performance).",0
Revisiting Criteria for Description of MDE Artifacts,"Large-scale collaboration in Model Driven Engineering (MDE) demands the use of one or more repositories such as GEMOC, ReMoDD and SEMAT, which share artifacts (e.g., models, meta-models, transformations, etc.) for global reuse scenarios. In order to benefit the MDE community from an important quality attribute (i.e., understandability of MDE artifacts), this work analyzed the information available in ReMoDD. We conducted a study of the representation of reusable assets conformance to the criteria found through the execution of a multivocal research protocol. We found that these assets are not in conformity with these criteria, thus hampering the establishment of future Software Ecosystems (SECOs) for MDE.",0
Automated Refactoring of OCL Constraints with Search,"Object Constraint Language (OCL) constraints are typically used to provide precise semantics to models developed with the Unified Modeling Language (UML). When OCL constraints evolve regularly, it is essential that they are easy to understand and maintain. For instance, in cancer registries, to ensure the quality of cancer data, more than one thousand medical rules are defined and evolve regularly. Such rules can be specified with OCL. It is, therefore, important to ensure the understandability and maintainability of medical rules specified with OCL. To tackle such a challenge, we propose an automated search-based OCL constraint refactoring approach (SBORA) by defining and applying four semantics-preserving refactoring operators (i.e., Context Change, Swap, Split and Merge) and three OCL quality metrics (Complexity, Coupling, and Cohesion) to measure the understandability and maintainability of OCL constraints. We evaluate SBORA along with six commonly used multi-objective search algorithms (e.g., Indicator-Based Evolutionary Algorithm (IBEA)) by employing four case studies from different domains: healthcare (i.e., cancer registry system from Cancer Registry of Norway (CRN)), Oil&Gas (i.e., subsea production systems), warehouse (i.e., handling systems), and an open source case study named SEPA. Results show: 1) IBEA achieves the best performance among all the search algorithms and 2) the refactoring approach along with IBEA can manage to reduce on average 29.25 percent Complexity and 39 percent Coupling and improve 47.75 percent Cohesion, as compared to the original OCL constraint set from CRN. To further test the performance of SBORA, we also applied it to refactor an OCL constraint set specified on the UML 2.3 metamodel and we obtained positive results. Furthermore, we conducted a controlled experiment with 96 subjects and results show that the understandability and maintainability of the original constraint set can be improved significantly from the perspectives of the 96 participants of the controlled experiment.",0
Empowering Testing Activities with Modeling - Achievements and Insights from Nine Years of Collaboration with Cisco,,0
Quality Indicators in Search-based Software Engineering,"Search-Based Software Engineering (SBSE) researchers who apply multi-objective search algorithms (MOSAs) often assess the quality of solutions produced by MOSAs with one or more quality indicators (QIs). However, SBSE lacks evidence providing insights on commonly used QIs, especially about agreements among them and their relations with SBSE problems and applied MOSAs. Such evidence about QIs agreements is essential to understand relationships among QIs, identify redundant QIs, and consequently devise guidelines for SBSE researchers to select appropriate QIs for their specific contexts. To this end, we conducted an extensive empirical evaluation to provide insights on commonly used QIs in the context of SBSE, by studying agreements among QIs with and without considering differences of SBSE problems and MOSAs. In addition, by defining a systematic process based on three common ways of comparing MOSAs in SBSE, we present additional observations that were automatically produced based on the results of our empirical evaluation. These observations can be used by SBSE researchers to gain a better understanding of the commonly used QIs in SBSE, in particular, regarding their agreements. Finally, based on the results, we also provide a set of guidelines for SBSE researchers to select appropriate QIs for their particular context.",0
Quality Indicators in Search-based Software Engineering,"Search-Based Software Engineering (SBSE) researchers who apply multi-objective search algorithms (MOSAs) often assess the quality of solutions produced by MOSAs with one or more quality indicators (QIs). However, SBSE lacks evidence providing insights on commonly used QIs, especially about agreements among them and their relations with SBSE problems and applied MOSAs. Such evidence about QIs agreements is essential to understand relationships among QIs, identify redundant QIs, and consequently devise guidelines for SBSE researchers to select appropriate QIs for their specific contexts. To this end, we conducted an extensive empirical evaluation to provide insights on commonly used QIs in the context of SBSE, by studying agreements among QIs with and without considering differences of SBSE problems and MOSAs. In addition, by defining a systematic process based on three common ways of comparing MOSAs in SBSE, we present additional observations that were automatically produced based on the results of our empirical evaluation. These observations can be used by SBSE researchers to gain a better understanding of the commonly used QIs in SBSE, in particular, regarding their agreements. Finally, based on the results, we also provide a set of guidelines for SBSE researchers to select appropriate QIs for their particular context.",0
Using megamodeling to improve industrial adoption of complex {MDE} solutions,"Companies formalize their software processes as a way of organizing their development projects. As each project has its own requirements and objectives, a family of processes is required in practice, in order to ensure that each project is handled appropriately. This family may be a collection of predefined processes, but can also be automatically generated by tailoring a general process to a project’s context which requires formalization and tool support to be successful. Model-driven engineering provides a formal framework for defining the models and transformations required for automated process tailoring, but various types of models must be specified and evolved, limiting the industrial adoption of this approach. To address this problem, in this paper we propose a megamodel for automated process tailoring. Megamodeling provides an integrating framework for modeling in the large, including the definition and evolution of all models and transformations required for tailoring while hiding complexity. We report the application of our approach to the software development process of Rhiscom, a small Chilean company.",0
Applying model-driven engineering in small software enterprises,"Model-Driven Engineering (MDE) is increasingly gaining acceptance in the software engineering community, however its adoption by the industry is far from successful. The number of companies applying MDE is still very limited. Although several case studies and reports have been published on MDE adoption in large companies, experience reports on small enterprises are still rare, despite the fact that they represent a large part of the software companies ecosystem.
In this paper we report on our practical experience in two transfer of technology projects on two small companies. In order to determine the degree of success of these projects we present some factors that have to be taken into account in transfer of technology projects. Then, we assess both projects analyzing these factors and applying some metrics to give hints about the potential productivity gains that MDE could bring. We also comment on some lessons learned. These experiences suggest that MDE has the potential to make small companies more competitive, because it enables them to build powerful automation tools at modest cost. We will also present the approach followed to train these companies in MDE, and we contribute the teaching material so that it can be used or adapted by others projects of this nature.",0
Software process,"This paper is a travelogue of Software Process research and practice in the past 15 years. It is based on the paper written by one of the authors for the FOSE Track at ICSE 2000. Since then, the landscape of Software Process research has significantly evolved: technological breakthroughs and market disruptions have defined new and complex challenges for Software Engineering researchers and practitioners.
In this paper we provide an overview of the current status of research and practice, highlight new challenges, and provide a non-exhaustive list of research issues that, in our view, need to be tackled by future research work.",0
Experiences of Applying {UML}/{MARTE} on Three Industrial Projects,"MARTE (Modeling and Analysis of Real-Time and Embedded Systems) is a UML profile, which has been developed to model concepts specific to Real-Time and Embedded Systems (RTES). In previous years, we have applied UML/MARTE to three distinct industrial problems in various industry sectors: architecture modeling and configuration of large-scale and highly configurable integrated control systems, model-based robustness testing of communication-intensive systems, and model-based environment simulator generation of large-scale RTES for testing. In this paper, we report on our experiences of solving these problems by applying UML/MARTE on four industrial case studies. Based on our common experiences, we derive a framework to help practitioners for future applications of UML/MARTE. The framework provides a set of detailed guidelines on how to apply MARTE in industrial contexts and will help reduce the gap between the modeling standards and industrial needs.",0
"Applying {UML}/{MARTE} on industrial projects: challenges, experiences, and guidelines","Modeling and Analysis of Real-Time and Embedded Systems (MARTE) is a Unified Modeling Language (UML) profile, which has been developed to model concepts specific to Real-Time and Embedded Systems (RTES). In the last 5 years, we have applied UML/MARTE to three distinct industrial problems in three industry sectors: architecture modeling and configuration of large-scale and highly configurable integrated control systems, model-based robustness testing of communication-intensive systems, and model-based environment simulator generation of large-scale RTES for testing. In this paper, we report on our experience of solving these problems by applying UML/MARTE on four industrial case studies. We highlight the challenges we faced with respect to the industrial adoption of MARTE. Based on our combined experience, we derive a framework to guide practitioners for future applications of UML/MARTE in an industrial context. The framework provides a set of detailed guidelines that help reduce the gap between the modeling notations and real-world industrial application needs.",0
Design Science method and theory in a construction and engineering context: {\textquotedblleft}a phronetic tale of research{\textquotedblright},,0
Model-based incremental conformance checking to enable interactive product configuration,,0
A practical guide to select quality indicators for assessing pareto-based search algorithms in search-based software engineering,"Many software engineering problems are multi-objective in nature, which has been largely recognized by the Search-based Software Engineering (SBSE) community. In this regard, Pareto-based search algorithms, e.g., Non-dominated Sorting Genetic Algorithm II, have already shown good performance for solving multi-objective optimization problems. These algorithms produce Pareto fronts, where each Pareto front consists of a set of non-dominated solutions. Eventually, a user selects one or more of the solutions from a Pareto front for their specific problems. A key challenge of applying Pareto-based search algorithms is to select appropriate quality indicators, e.g., hypervolume, to assess the quality of Pareto fronts. Based on the results of an extended literature review, we found that the current literature and practice in SBSE lacks a practical guide for selecting quality indicators despite a large number of published SBSE works. In this direction, the paper presents a practical guide for the SBSE community to select quality indicators for assessing Pareto-based search algorithms in different software engineering contexts. The practical guide is derived from the following complementary theoretical and empirical methods: 1) key theoretical foundations of quality indicators; 2) evidence from an extended literature review; and 3) evidence collected from an extensive experiment that was conducted to evaluate eight quality indicators from four different categories with six Pareto-based search algorithms using three real industrial problems from two diverse domains.",0
Guiding the selection of research methodology in industry{\textendash}academia collaboration in software engineering,,1
Search-based Decision Ordering to Facilitate Product Line Engineering of Cyber-Physical System,"Industrial Cyber Physical Systems (CPSs) are naturally complex. Manual configuration of CPS product lines is error-prone and inefficient, which warrants the need for automated support of product configuration activities such as decision inference and decision ordering. A fully automated solution is often impossible for CPSs since some decisions must be made manually by configuration engineers and thus requiring an interactive and step-by-step configuration solution. Having an interactive solution with tool support in mind, we propose a search-based solution (named as Zen-DO) to support optimal ordering of configuration steps. The optimization objective has three parts: 1) minimizing overall manual configuration steps, 2) configuring most constraining decisions first, and 3) satisfying ordering dependencies among variabilities. We formulated our optimization objective as a fitness function and investigated it along with four search algorithms: Alternating Variable Method (AVM), (1+1) Evolutionary Algorithm (EA), Genetic Algorithm, and Random Search (a comparison baseline). Their performance is evaluated in terms of finding an optimal solution for two real-world case studies of varying complexity and results show that AVM and (1+1) EA significantly outperformed the others.",0
Advanced Model-Based Engineering of Embedded Systems,"This book provides a comprehensive introduction into the SPES XT modeling framework. Moreover, it shows the applicability of the framework for the development of embedded systems in different industry domains and reports on the lessons learned. It also describes how the SPES XT modeling framework can be tailored to meet domain and project-specific needs. The book is structured into four parts: Part I “Starting Situation” discusses the status quo of the development of embedded systems with specific focus on model-based engineering and summarizes key challenges emerging from industrial practice. Part II “Modeling Theory” introduces the SPES XT modeling framework and explains the core underlying principles. Part III “Application of the SPES XT Framework” describes the application of the SPES XT modeling framework and how it addresses major industrial challenges. Part IV “Evaluation and Technology Transfer” assess the impact of the SPES XT modeling framework and includes various exemplary applications from automation, automotive, and avionics. Overall, the SPES XT modeling framework offers a seamless model-based engineering approach. It addresses core challenges faced during the engineering of embedded systems. Among others, it offers aligned and integrated techniques for the early validation of engineering artefacts (including requirements and functional and technical designs), the management of product variants and their variability, modular safety assurance and deployment of embedded software.",0
An Exploratory Study on Technology Transfer in Software Engineering,"Background: Technology transfer is one key to the success of research projects, especially in Software Engineering, where the (practical) impact of the outcome may depend not only on the reliability and feasibility of technologies, but also on their applicability to industrial settings. However, there is limited knowledge on the current state of practice and how to assess the success of technology transfer. Objective: We aim at elaborating a set of hypotheses on how technology transfer takes place in Software Engineering research projects. Method: We designed an exploratory survey with the participants of two large research projects in Germany, which involve both industrial and academic partners in the area of model driven development for embedded systems. Results: Base on the extracted respondents answers of this survey, we defined a resulting theory which is based on the following set of main hypothesis: Most of the technologies developed in research projects are not mature enough for a direct application, but need post-project customisation to fit the industrial contexts (H1). Common models that represent technology transfer as a transaction of an object from a transferor to a transferee does not fit industrial reality (H2). Additionally, technology transfer takes place without an explicit process (H3). Regarding transfer mediums, most used mediums are human-intensive (H5) and industry organisations gain new knowledge mainly within their own confines (H4). Finally the motivations that drive the transfer in industry and academia are heterogenous (H6). Conclusions: From the theoretical perspective, this theory and set of hypotheses extracted from the survey results will be further explored and tested in different follow-up activities. This initial set, however, already may serve as a basis for independent assessments from other researchers to collaboratively shed light on a how technology transfer takes place in Software Engineering research projects, which are the barriers, and how to improve the transfer into practice. From the practical perspective, our results may be used as a basis for an evaluation framework for the transfer of the developed technologies in our projects. This would also help companies in getting new developed technologies transfer easier to their specific context.",1
In Quest for Proper Mediums for Technology Transfer in Software Engineering,"Background: Successful transfer of the results of research projects into practice is of great interest to all project participants. It can be assumed that different transfer mediums fulfill technology transfer (TT) with different levels of success and that they are impaired by different kinds of barriers. Objective: The goal of this study is to gain a better understanding about the different mediums used for TT in software engineering, and to identify barriers weakening the success of the application of such mediums. Method: We conducted an exploratory study implemented by a survey in the context of a German research project with a broad range of used mediums. Results: The main reported barriers were low expectations of usefulness, no awareness of existence, lack of resources, or inadequateness in terms of outdated material or being in an immature state. Conclusions: We interpreted our results as symptoms of a lack of a dissemination plan in the project. Further work will be needed to explore the implications for the transfer of research results (knowledge and techniques) to practice.",0
Technology Transfer Concepts,"In software engineering, transferring innovative concepts, techniques and methods into the practice of existing organizations is an expensive and complex task. This chapter gives an overview on the transfer of the SPES XT modeling framework to different organization.",0
Challenges of Structured Reuse Adoption {\textemdash} Lessons Learned,"Adoption of structured reuse approaches in practice often poses multiple challenges. Research-industry collaborations are considered as suitable vehicle to mitigate adoption difficulties as well as to validate the applicability of scientific results. However, research cooperations with industry do not always live up to the expectations of either of the partners. Unfortunately for researchers and practitioners alike, insights behind the scenes of failed adoption and cooperation are often difficult to obtain. This hinders discussions on lessons learned by organizations during the adoption process and delays improvements. This paper aims to mitigate this issue by presenting lessons learned from interviews we conducted with practitioners in the context of a study on software reuse in industry. The study covered a wide range of aspects, including the process of reuse adoption. One of the participating companies had undertaken two attempts to adopt a form of structured reuse. However, both attempts did not succeed as expected. In our study, we identified tacit assumptions that were related to the encountered difficulties and present the lessons learned from the adoption approach. Furthermore , we report strategies that helped us to overcome the skepticism caused by a previous unsuccessful guided collaboration.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Investigating probabilistic sampling approaches for large-scale surveys in software engineering,,0
"Publish or perish, but do not forget your software artifacts",,0
The challenges of staying together while moving fast,"We report on the results of an empirical study conducted with 35 experienced software developers from 22 high-tech companies, including Google, Facebook, Microsoft, Intel, and others. The goal of the study was to elicit challenges that these developers face, potential solutions that they envision to these challenges, and research initiatives that they think would deliver useful results.
Challenges identified by the majority of the study participants relate to the collaborative nature of the work: the availability and discoverability of information, communication, collaborative planning and integration with work of others. Almost all participants also addressed the advantages and disadvantages of the current ""fast to the market"" trend, and the toll it takes on the quality of the software that they are able to deliver and on their professional and personal satisfaction as software engineers.
We describe in depth the identified challenges, supporting our findings with explicit quotes from the study participants. We also put these findings in context of work done by the software engineering community and outline a roadmap for possible future research initiatives.",0
Towards improving industrial adoption,"While promising software engineering approaches are proposed every day, only few are adapted by professional developers. There are many potential reasons for this, such as, problems in identifying helpful approaches, missing tools, or lacking practical relevance. With our current research, we are concerned to improve the knowledge transfer from research to practice. In this paper, we discuss the impact of development environments and programming languages on knowledge transfer - considering that many scientific approaches and tools are interesting for professional developers, but rarely adopted by them. We base our discussion mainly on our personal experiences with industry-academia collaborations. To determine whether these experiences also apply to other developers, we additionally conducted a survey with 89 participants from academia and industry. The first results of our on-going work indicate a gap between the development environments and programming languages that are supported or used by researchers and those that are applied in industry. Based on our results, we describe initial discussions that can help to improve collaborations between industry and research.",0
Towards improving industrial adoption,"While promising software engineering approaches are proposed every day, only few are adapted by professional developers. There are many potential reasons for this, such as, problems in identifying helpful approaches, missing tools, or lacking practical relevance. With our current research, we are concerned to improve the knowledge transfer from research to practice. In this paper, we discuss the impact of development environments and programming languages on knowledge transfer - considering that many scientific approaches and tools are interesting for professional developers, but rarely adopted by them. We base our discussion mainly on our personal experiences with industry-academia collaborations. To determine whether these experiences also apply to other developers, we additionally conducted a survey with 89 participants from academia and industry. The first results of our on-going work indicate a gap between the development environments and programming languages that are supported or used by researchers and those that are applied in industry. Based on our results, we describe initial discussions that can help to improve collaborations between industry and research.",0
A retrospective analysis of {SAC} requirements,"Context: The activities related to Requirements engineering (RE) are some of the most important steps in software development, since the requirements describe what will be provided in a software system in order to fulfill the stakeholders' needs. In this context, the ACM Symposium on Applied Computing (SAC) has been a primary gathering forum for many RE activities. When studying a research area, it is important to identify the most active groups, topics, the research trends and so forth. Objective: In a previous paper, we investigated how the SAC RE-Track is evolving, by analyzing the papers published in its 8 previous editions. In this paper, we extended the analysis including the papers of the last edition (2016) and a brief resume of all papers published in the nine editions of SAC-RE track. Method: We adopted a research strategy that combines scoping study and systematic review good practices. Results: We investigated the most active countries, institutions and authors, the main topics discussed, the types of the contributions, the conferences and journals that have most referenced SAC RE-Track papers, the phases of the RE process supported by the contributions, the publications with the greatest impact, and the trends in RE. Conclusions: We found 86 papers over the 9 previous SAC RETrack editions, which were analyzed and discussed.",0
"Knowledge Transfer, Sharing, and Management System Based on Causality for Requirements Change Management","In software development, requirements changes cannot be avoided. Despite the importance of requirements change management, few studies in the literature concern requirements change knowledge management(RCKM). This study explored knowledge transfer and sharing of RCKM based on change cause analysis and the design of a knowledge management system(KMS) for change management. In this paper, previous research is discussed in three aspects: factors affecting knowledge transfer and sharing, methods to implement knowledge transfer and sharing, and the design of a KMS. After that, the results of a recent questionnaire are analyzed. Finally, this paper discusses the sources of tacit knowledge in the personnel management aspects of software development; the knowledge and the methods of knowledge transfer and sharing in the requirements change management process based on change cause analysis; the design of a data flowchart of repositories, and a prototype structure, logical model, and functional modules of RCKM systems. In conclusion, further study is suggested.",0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,"Continuous and long-term collaboration between industry and academia is crucial to develop front-line research in context-dependent areas like software development where both practitioners and researchers are searched for data collection, analysis and results. Despite many mutual benefits, this collaboration is often challenging, not only due to different goals, but also because of different pace in providing the results. The software development industry has during the last decade aligned around and organized their development adopting agile methodologies. For the researchers, the agile methodologies are a topic for a research, rather than a means of performing the research itself. We can state a question, whether the agile methodologies can be a good common ground for enabling successful research collaboration between industry and academia? This paper reports on a longitudinal industry - academia research collaboration case, which has stepwise adapted SCRUM over a six-year period. The implementation of SCRUM and the collaboration successes and challenges are presented, and findings are discussed.",1
Analyzing the Impact of Beliefs in Software Project Practices,"Folklore and beliefs are strong in the software practitioners' community. Software engineering is a communication intensive activity. Software engineers are innovation driven and regularly use automated resources to share ideas, new paradigms and approaches to support and improve their practices. This information flow generates technical folklore and beliefs (that do not have a formal trial basis). Software engineers applying practices are influenced by these and they are inevitably taken on board in the adoption of a particular technology or practice. This paper presents an industrial case study, using a qualitative approach, to investigate the origins and impacts of beliefs on software development team practices. Its main contribution is on the understanding of creation and evolution of technical beliefs, and in studying its use for team practices improvement in the software engineering industry.",0
Un Atelier de G{\'{e}}nie Logiciel pour d{\'{e}}centraliser et r{\'{e}}utiliser des applications,,0
A Method to Support the Adoption of Reuse Technology in Large Software Organizations,"The process of adopting a software technology in a large organization is significantly influenced by organizational culture and behavioral aspects of the practitioners involved in the process. The adoption of software reuse technology in particular significantly alters the software process of the organization as well as the modus operandi of the practitioners involved. The identification of factors that will facilitate or hinder this process is strongly correlated with the existing system of beliefs and represents a key element to the planning of this process. Our aim is to propose an action model based on classes of beliefs that will support the process of adoption of software reuse technology. An industrial case study was conducted in a large organization to validate and refine the proposed method. As a result, we propose a method based on the identification of classes of beliefs and re-signification of those that hinders the adoption of software reuse technologies.",0
A quantitative model for software engineering trends,"Many decision-makers in industry, government and academia routinely make decisions whose outcome depends on the evolution of software technology trends. Even though the stakes of these decisions are usually very high, decision makers routinely depend on expert opinions and qualitative assessments to model the evolution of software technology; both of these sources of decision-making information are subjective, are based on opinions rather than facts, and are prone to error. In this paper, we report on our ongoing work to build quantitative models of the evolution of software technology trends. In particular, we discuss how we took specific evolutionary models and merged them into a single (general-purpose) model. The original specific models are derived empirically using statistical methods on trend data we had collected over several years, and have been validated individually; in this paper we further validate the generic (general-purpose) model.",0
A Comprehensive Software Project Management Framework,"Project management is vital for software project success. Project Management Body of Knowledge (PMBOK), CMMI for Development (CMMI-DEV), and other software project management models and practices established to assist software organizations, each of these models offers diverse focal points. Combined effective software project management practices remain a challenge to software organizations. In striving to raise the likelihood of software project success, this paper introduces a framework for software project management effectiveness which integrated a set of software project management practices based on the PMBOK guide processes, CMMI-DEV processes, and management areas that influence a software project. The proposed framework called 4PTRB which includes people, process, product, project, technology, risk, and business management areas. The 4PTRB software project management framework provides a whole comprehensive view to help software project managers to improve their project management effectiveness. The framework is validated by conducting a web-based survey of software professional practitioners around the world. A statistical analysis of twenty software projects has been conducted as a case study thereafter, spanning small to large development projects. The consistency of the case study and survey results shows the power of the 4PTRB framework as an inclusive software project management framework.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Towards innovation measurement in the software industry,"In today's highly competitive business environments with shortened product and technology life cycle, it is critical for software industry to continuously innovate. This goal can be achieved by developing a better understanding and control of the activities and determinants of innovation. Innovation measurement initiatives assess innovation capability, output and performance to help develop such an understanding. This study explores various aspects relevant to innovation measurement ranging from definitions, measurement frameworks and metrics that have been proposed in literature and used in practice. A systematic literature review followed by an online questionnaire and interviews with practitioners and academics were employed to identify a comprehensive definition of innovation that can be used in software industry. The metrics for the evaluation of determinants, inputs, outputs and performance were also aggregated and categorised. Based on these findings, a conceptual model of the key measurable elements of innovation was constructed from the findings of the systematic review. The model was further refined after feedback from academia and industry through interviews.",0
Adaboost-multilayer perceptron to predict the student's performance in software engineering,"Software Engineering (SE) course is one of the backbones of today's computer technology sophistication. Effective theoretical and practical learning of this course is essential to computer students. However, there are many students fail in this course. There are many aspects that influence a student's performance. Currently, student performance analysis methods just focus on historical achievement and assessment methods given in the class. Need more research to predict student's performance to overcome the problem of student failing. The objective of this research is to perform a prediction for student's performance in the SE using enhanced Multilayer Perceptron (MLP) machine learning classification with Adaboost. This research also investigates the requirements of each student before registering in this course. This research achieved 87.76 percent accuracy in classifying the performance of SE students.",0
Sustainability in software engineering: a systematic literature review,"Background: Supporting sustainability in software engineering is becoming an active area of research. We want to contribute the first Systematic Literature Review(SLR) in this field to aid researchers who are motivated to contribute to that topic by providing a body of knowledge as starting point, because we know from own experience, this search can be tedious and time consuming. Aim: We aim to provide an overview of different aspects of sustainability in software engineering research with regard to research activity, investigated topics, identified limitations, proposed approaches, used methods, available studies, and considered domains. Method: The applied method is a SLR in five reliable and commonly-used databases according to the (quasi-standard) protocol by Kitchenham et al. [1]. We assessed the 100 first results of each database ordered by relevance with respect to the search query. Results: Of 500 classified publications, we regard 96 as relevant for our research questions. We sketch a taxonomy of their topics and domains, and provide lists of used methods and proposed approaches. Most of the excluded publications were ruled out because of an unfitting usage of terms within the search query. Conclusions: Currently, there is little research coverage on the different aspects of sustainability in software engineering while other disciplines are already more active. Future work includes extending the study by reviewing a higher number of publications, including dedicated journal and workshop searches, and snowballing.",0
7.3.2 Assessment of Readiness for Internal Technology Transfer - A Case Study,"Premature introduction of new technologies in product development is likely to lead to both budget and schedule overruns. The assessment of when a technology is ready to be transferred from technology development to product development and production is critical for striking the right balance of short time-to-market and low risk. Previous research on internal technology transfer has mainly focused on the development of methods and tools for assessing technology readiness for major development programs in governmental agencies, revealing few cases of such implementations in technology driven industrial companies. This paper aims to provide description of experiences from using such tools at a case company and prescription on how to manage the identified challenges. The study is based on 22 semi-structured interviews, primarily with personnel from the technology and product development departments. The results indicate that the readiness assessments suggested in literature can support decisions also in industrial companies. However, adapting the tools to the internal differences between technologies is important for minimizing administrative workload and ensuring implementation readiness as opposed to just technology readiness. The strategy for their adaptation could benefit from more research on the practices of companies dealing with internal technology transfer and from the development of a framework for how to adapt the assessment process to different contexts.",0
Accelerating microbiota product development: The Societal Impact Value Cycle as a conceptual model to shape and improve public-private valorization processes,"Despite their potential for preventing and reducing diseases, the availability of marketed probiotics with a relevant health or risk reduction claim is lagging behind. Food and pharmaceutical companies, as well as universities, are challenged to collaborate across the innovation value chain to deliver on the promises of microbiota research and development. A shared understanding of the knowledge valorization process is essential for the success of such public-private partnerships. Conceptual models enable stakeholders to discuss and understand complex processes and their corresponding activities but current models are lacking granularity in terms of activities taking place. Building upon the microbiota valorization and technology transfer cycle, this review synthesizes 32 conceptual models on knowledge valorization into a Societal Impact Value Cycle that describes relevant activities. The cycle is contextualized to the microbiota industry and 8 key points for successful innovation are highlighted. The model elucidates the importance of including unmet needs in wider society for generating socioeconomic benefits. While market and society domains contained the highest number of barriers in the probiotics industry, they were scarcely covered by the reviewed literature, highlighting their underexposure. The resulting generally applicable model aids stakeholders in outlining a thorough strategy to deliver really new and radical innovations.",0
An empirical investigation of transferring research to software technology innovation,"Context: Governments are providing more and more support for academia-industry collaborations for industry led research and innovation via Cooperative Research Centers (CRC). It is important to understand the processes and practices of such programs for transferring scientific R&D to innovation. Goal: We aimed at empirically investigating the processes and practices implemented in the context of one of the Australian CRCs, aimed at transferring big data research to innovative software solutions for national security. Method: We applied case study method and collected and analyzed data from 17 interviews and observations of the participants of the studied CRC program. Findings: We present the innovation process implemented in the studied CRC. We particularly highlight the practices used to involve end-users in the innovation process. We further elaborate on the challenges of running this collaborative model for software technology innovation.",0
Modeling and Statistical Testing of Real Time Embedded Automotive Systems by Combination of Test Models and Reference Models in MATLAB/Simulink,"Embedded systems become increasingly complex and distributed. Although there is necessity for thourough testing, exhaustive validiation and verification is hardly possible in industry due to time and resource restrictions. In the past the reason for this has often been that it was to time-consuming to specify, to execute, and to evaluate test cases for the first design models and the integrated embedded system. In the meantime methods have become popular in industry that allow the automated generation, execution, and evaluation of test cases. In order to be able to automate these steps all necessary information must be integrated into the models that are the basis for the following steps. The complexity of the system, however, makes the evaluation and assessment of the behavior of the system even more complex. The growth of information needed for this comes along with it. The integration of this information into the model which is used for the generation of test cases is hardly feasible. In this paper we describe how this issue can be addressed by the combination of reference models in MATLAB/Simulink® with test models. Time Usage Models (TUM) are employed as test models and provide the basis to generate all possible test scenarios. Model based statistical testing with consideration of time and durations is supported by TUMs. The reference models are used like an executable specification, providing information for the evaluation of the system to be tested. The test model can therefore be kept generic in order to be able to derive virtually any test case from the model, taking account of the potentially infinite sequence of inputs reactive systems might process. We applied the presented approach with a german automotive OEM for the validation and verification of the energy management system.",0
A Systematic Mapping Study on DSL Evolution,"Domain-specific languages (DSLs) are frequently used in software engineering. In contrast to general-purpose languages, DSLs are designed for a special purpose in a particular domain. Due to volatile user requirements and new technologies DSLs, similar to the software systems they describe or produce, are subject to continuous evolution. This work explores existing research on DSL evolution to summarize, structure and analyze this area of research, and to identify trends and open issues. We conducted a systematic mapping study and identified 98 papers as potentially relevant for our study. By applying inclusion and exclusion criteria we selected a set of 34 papers relevant for DSL evolution. We classified and analyzed these papers to create a map of the research field. We conclude that DSL evolution is a topic of increasing relevancy. However, research on language evolution so far did not focus much on the characteristics DSLs exhibit. Also, there are not many cross-references between our primary studies meaning researchers are often not aware of potentially useful work. Our study results help researchers and practitioners working on DSL-based approaches to get an overview of existing research on DSL evolution and open challenges.",0
Guidance for domain specific modeling in small and medium enterprises,"We observe that small and medium enterprises who wish to adopt domain specific modeling techniques do so under different preconditions and with different expectations. In our report, we categorize our observations made in 7 different industrial branches. Further, we present the current state of our solution to provide guidance to both ends of stakeholders involved in a DSM development lifecycle, domain experts and DSL designers. By supporting a DSL development process with semantic knowledge bases and metrics, our goal is to make a DSL development feasible and beneficial through the guidance provided by EXAMINE and within the DIESEL-Framework.",0
A study of applying a research prototype tool in industrial practice,"Our research tool, Umple, has the objective of raising the abstraction level of programming languages by adding modeling abstractions such as UML associations, attributes and state machines. My research focuses on the syntax and semantics of state machines in Umple plus the empirical validation of Umple. The latter consists of a grounded theory study of Umple users, and action research involving the use of Umple in an industrial sitting. The grounded theory study is guiding our research and development of Umple. The action research is enlarging the pool of Umple users and contributing to the validation of Umple's approach.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Open meta-modelling frameworks via meta-object protocols,"Meta-modelling is central to Model-Driven Engineering. Many meta-modelling notations, approaches and tools have been proposed along the years, which widely vary regarding their supported modelling features. However, current approaches tend to be closed and rigid with respect to the supported concepts and semantics. Moreover, extending the environment with features beyond those natively supported requires highly technical knowledge. This situation hampers flexibility and interoperability of meta-modelling environments. In order to alleviate this situation, we propose open meta-modelling frameworks, which can be extended and configured via meta-object protocols (MOPs). Such environments offer extension points on events like element instantiation, model loading or property access, and enable selecting particular model elements over which the extensions are to be executed. We show how MOP-based mechanisms permit extending meta-modelling frameworks in a flexible way, and allow describing a wide range of meta-modelling concepts. As a proof of concept, we show and compare an implementation in the METADEPTH tool and an aspect-based implementation atop the Eclipse Modelling Framework (EMF). We have evaluated our approach by extending EMF and METADEPTH with modelling services not foreseen initially when they were created. The evaluation shows that MOP-based mechanisms permit extending meta-modelling frameworks in a flexible way, and are powerful enough to support the specification of a broad variety of meta-modelling features.",0
On the Complex Nature of {MDE} Evolution,"In Model-Driven Engineering (MDE) the employed setting of languages as well as automated and manual activities has major impact on productivity. Furthermore, such settings for MDE evolve over time. However, currently only the evolution of (modeling) languages, tools, and transformations is studied in research. It is not clear whether these are the only relevant changes that characterize MDE evolution in practice. In this paper we address this lack of knowledge. We first discuss possible changes and then report on a first study that demonstrates that these forms of evolution can be commonly observed in practice. To investigate the complex nature of MDE evolution in more depth, we captured the evolution of three MDE settings from practice and derive eight observations concerning reasons for MDE evolution. Based on the observations we then identify open research challenge concerning MDE evolution.",0
On the complex nature of {MDE} evolution and its impact on changeability,"In model-driven engineering (MDE), a particular MDE setting of employed languages and automated and manual activities has major impact on productivity. Furthermore, it has been observed that such MDE settings evolve over time. However, currently not much is known about this evolution and its impact on the MDE setting’s maturity, i.e., on changeability and other productivity dimensions. Research so far focuses on evolution of separate building blocks, such as (modeling-) languages, tools, or transformation, only. In this article, we address the lack of knowledge about evolution of MDE settings by investigating case studies from different companies. The first results reveal (1) that there is evolution that affects the composition of an MDE setting (structural evolution) and has the potential to strongly impact aspects, such as changeability and (2) that this structural evolution actually occurs in practice. Based on these first results, we investigated (3) whether there are cases in practice, where structural evolution already altered the risks of changeability given by the respective MDE setting. Therefore, we search and identify examples for such evolution steps on MDE settings from practice and collected six case studies on evolution histories in detail. As a result, we show in this paper that structural evolution (a) is not seldom in practice and (b) sometimes leads to the introduction of changeability risks.",0
Evaluating the benefits of using domain-specific modeling languages,"There are many tools available for the creation of domain specific languages (DSLs) but the question remains how to identify appropriate use cases for the application of domain specific modeling and language design, and how to measure success. We report on our observations after three years of accompanying several real-life industrial DSL design projects and on our experiments with applying qualitative and quantitative evaluation criteria. We suggest an evaluation methodology spanning the entire DSL life cycle. It consists of an assessment of motivation, qualitative interviews, a validation of DSL design, quantifying benefits and a comparison of impacted workflows before and after adoption. We conclude with a discussion of inherent limitations.",0
A Three-Phased Technology Transfer Model: Lessons from Software Technology Transfer from Japan to Korea,"Software development is quickly becoming globally distributed. Cross-country-border software development that spans across country borders is a mandatory part of software production today. In order to facilitate global coordination, the transfer of technology is a key. We analyze a successful technology transfer from one time dimension and three factor dimensions. From the lessons learned, we propose a three-phase model of technology transfer and a three factor model of technology transfer achievement.",0
An Exploratory Study on Technology Transfer in Software Engineering,"Background: Technology transfer is one key to the success of research projects, especially in Software Engineering, where the (practical) impact of the outcome may depend not only on the reliability and feasibility of technologies, but also on their applicability to industrial settings. However, there is limited knowledge on the current state of practice and how to assess the success of technology transfer. Objective: We aim at elaborating a set of hypotheses on how technology transfer takes place in Software Engineering research projects. Method: We designed an exploratory survey with the participants of two large research projects in Germany, which involve both industrial and academic partners in the area of model driven development for embedded systems. Results: Base on the extracted respondents answers of this survey, we defined a resulting theory which is based on the following set of main hypothesis: Most of the technologies developed in research projects are not mature enough for a direct application, but need post-project customisation to fit the industrial contexts (H1). Common models that represent technology transfer as a transaction of an object from a transferor to a transferee does not fit industrial reality (H2). Additionally, technology transfer takes place without an explicit process (H3). Regarding transfer mediums, most used mediums are human-intensive (H5) and industry organisations gain new knowledge mainly within their own confines (H4). Finally the motivations that drive the transfer in industry and academia are heterogenous (H6). Conclusions: From the theoretical perspective, this theory and set of hypotheses extracted from the survey results will be further explored and tested in different follow-up activities. This initial set, however, already may serve as a basis for independent assessments from other researchers to collaboratively shed light on a how technology transfer takes place in Software Engineering research projects, which are the barriers, and how to improve the transfer into practice. From the practical perspective, our results may be used as a basis for an evaluation framework for the transfer of the developed technologies in our projects. This would also help companies in getting new developed technologies transfer easier to their specific context.",1
Difficulty Factors of Obtaining Access for Empirical Studies in Industry,"Context: The difficulty (not just effort) of obtaining access for software engineering empirical studies in industry varies greatly. Supposedly, some of this variance in difficulty is particular, stemming from properties of individual contexts (the industrial partners and their work), while the rest is repeatable, related to properties of the research question and research design. Question: What are these recurring difficulty factors that arise from research question and research design? What mechanisms produce their influence? Method: We use ideation and knowledge extraction from research experience to identify potential difficulty factors, use expert discussion to understand their mechanisms, and use concept analysis to arrange them into a taxonomy. We evaluate the result by comparatively applying it to two research efforts pursued by the same research group. Results: We find six scope factors, five problematic intervention effects factors, and seven helpful intervention (side-)effects factors. Conclusion: Considering these factors systematically during the formulation of a research question and the design of a research method can help with balancing data collection difficulty with results validity and relevance.",0
Ethical Interviews in Software Engineering,"Background: Despite a long history, numerous laws and regulations, ethics remains an unnatural topic for many software engineering researchers. Poor research ethics may lead to mistrust of research results, lost funding and retraction of publications. A core principle for research ethics is confidentiality, and anonymization is a standard approach to guarantee it. Many guidelines for qualitative software engineering research, and for qualitative research in general, exist, but these do not penetrate how and why to anonymize interview data. Aims: In this paper we aim to identify ethical guidelines for software engineering interview studies involving industrial practitioners. Method: By learning from previous experiences and listening to the authority of existing guidelines in the more mature field of medicine as well as in software engineering, a comprehensive set of checklists for interview studies was distilled. Results: The elements of an interview study were identified and ethical considerations and recommendations for each step were produced, in particular with respect to anonymization. Important ethical principles are: consent, beneficence, confidentiality, scientific value, researcher skill, justice, respect for law, and ethical reviews. Conclusions: The most important contribution of this study is the set of checklists for ethical interview studies. Future work is needed to refine these guidelines with respect to legal aspects and ethical boards.",0
Assisted requirements selection by clustering,"Requirements selection is a decision-making process that enables project managers to focus on the deliverables that add most value to the project outcome. This task is performed to define which features or requirements will be developed in the next release. It is a complex multi-criteria decision process that has been focused by many research works, because a balance between business profits and investment is needed. The spectrum of prioritization techniques spans from simple and qualitative to elaborated analytic prioritization approaches that fall into the category of optimization algorithms. This work studies the combination of the qualitative MoSCoW method and cluster analysis for requirements selection. The feasibility of our methodology has been tested on three case studies (with 20, 50 and 100 requirements). In each of them, the requirements have been clustered, and then the clustering configurations found have been evaluated using internal validation measures for the compactness, connectivity and separability of the clusters. The experimental results show the validity of clustering strategies for the identification of the core set of requirements for the software product, being the number of categories proposed by MoSCoW a good starting point in requirements prioritization and negotiation.",0
Assisted requirements selection by clustering,"Requirements selection is a decision-making process that enables project managers to focus on the deliverables that add most value to the project outcome. This task is performed to define which features or requirements will be developed in the next release. It is a complex multi-criteria decision process that has been focused by many research works, because a balance between business profits and investment is needed. The spectrum of prioritization techniques spans from simple and qualitative to elaborated analytic prioritization approaches that fall into the category of optimization algorithms. This work studies the combination of the qualitative MoSCoW method and cluster analysis for requirements selection. The feasibility of our methodology has been tested on three case studies (with 20, 50 and 100 requirements). In each of them, the requirements have been clustered, and then the clustering configurations found have been evaluated using internal validation measures for the compactness, connectivity and separability of the clusters. The experimental results show the validity of clustering strategies for the identification of the core set of requirements for the software product, being the number of categories proposed by MoSCoW a good starting point in requirements prioritization and negotiation.",0
Towards a Lightweight Approach for the Evaluation of Requirements Engineering Impact on Other {IT} Project Areas,"Requirements Engineering (RE) is recognized as one of the most important, but difficult areas of software engineering, with a significant impact on other areas of the IT project and its final outcome. The empirical studies investigating this impact are hard to conduct, mainly due to large effort required. It is thus difficult for researchers and even more for industry practitioners to make evidence-based evaluations, how decisions about RE (e.g. RE process improvements, RE techniques selection) translate into requirements quality and influence other project areas. We propose an idea of a lightweight approach, utilizing the popular tools adopted by numerous software companies, to enable such evaluation without an excessive effort. The proposal is illustrated with a pilot study, where the data from 6 industrial projects from a single organization was analyzed and 3 metrics regarding requirements quality, rework effort and testing were used to demonstrate the impact of different RE techniques applied among considered projects.We also discuss the factors important to enabling adoption of the proposed approach.",0
Exploring Impact of Requirements Engineering on Other {IT} Project Areas {\textendash} Case Study,"Requirements Engineering (RE) is recognized as one of the most important (yet difficult) areas of software engineering that has a significant impact on other areas of IT projects and their final outcomes. Empirical studies investigating this impact are hard to conduct, mainly due to the great effort required. It is thus difficult for both researchers and industry practitioners to make evidence-based evaluations about how decisions about RE practices translate into requirement quality and influence other project areas. We propose an idea of a lightweight approach utilizing widely-used tools to enable such an evaluation without extensive effort. This is illustrated with a pilot study where the data from six industrial projects from a single organization were analyzed and three metrics regarding the requirement quality, rework effort, and testing were used to demonstrate the impact of different RE techniques. We also discuss the factors that are important for enabling the broader adoption of the proposed approach.",0
"{variED}: an editor for collaborative, real-time feature modeling",,0
Approaches to strategic alignment of software process improvement: A systematic literature review,"Context: Software process improvement (SPI) aims to increase the effectiveness of a software organization. Many studies indicate that the strategic alignment is a critical factor for the SPI success. However, little is known about practical approaches to achieving and maintaining such alignment. Objective: The goal of this study is to evaluate the validation evidence of the existing approaches to the strategic alignment of SPI. Method: We develop a search protocol that combines database search and snowballing to perform the systematic literature review and evaluate empirical studies by applying rigor and relevance criteria. To evaluate the efficiency of our protocol, we use a “quasi-gold standard” to compute the sensitivity and precision of the search. Result: We identified 30 studies (18 empirical) and 19 approaches to strategic alignment of SPI from 495 retrieved studies. Only three out of the 18 empirical studies were rated as high in the categories rigor and relevance, suggesting the need for a stronger validation of the approaches. Conclusion: We conclude that the lack of empirical validation indicates that the results of the existing approaches have not been adequately transferred to practitioners yet, calling for more rigorous studies on the subject.",0
About the Master,,0
A Systematic Review of Theory Use in Software Engineering Experiments,"Empirically based theories are generally perceived as foundational to science. However, in many disciplines, the nature, role and even the necessity of theories remain matters for debate, particularly in young or practical disciplines such as software engineering. This article reports a systematic review of the explicit use of theory in a comprehensive set of 103 articles reporting experiments, from of a total of 5,453 articles published in major software engineering journals and conferences in the decade 1993-2002. Of the 103 articles, 24 use a total of 40 theories in various ways to explain the cause-effect relationship(s) under investigation. The majority of these use theory in the experimental design to justify research questions and hypotheses, some use theory to provide post hoc explanations of their results, and a few test or modify theory. A third of the theories are proposed by authors of the reviewed articles. The interdisciplinary nature of the theories used is greater than that of research in software engineering in general. We found that theory use and awareness of theoretical issues are present, but that theory-driven research is, as yet, not a major issue in empirical software engineering. Several articles comment explicitly on the lack of relevant theory. We call for an increased awareness of the potential benefits of involving theory, when feasible. To support software engineering researchers who wish to use theory, we show which of the reviewed articles on which topics use which theories for what purposes, as well as details of the theories' characteristics",0
The Role of Deliberate Artificial Design Elements in Software Engineering Experiments,"Increased realism in software engineering experiments is often promoted as an important means to increase generalizability and industrial relevance. In this context, artificiality, e.g., the use of constructed tasks in place of realistic tasks, is seen as a threat. In this article, we examine the opposite view, that deliberately introduced artificial design elements may increase knowledge gain and enhance both generalizability and relevance. In the first part of the article, we identify and evaluate arguments and examples in favor of, and against, deliberately introducing artificiality into software engineering experiments. In the second part of the article, we summarize a content analysis of articles reporting software engineering experiments published over the ten-year period 1993-2002. The analysis reveals a striving for realism and external validity, but little awareness of for what and when, various degrees of artificiality and realism are appropriate. We conclude that an increased awareness and deliberation in these respects is essential. However, arguments in favor of artificial design elements should not be used to justify studies that are badly designed or that have research questions of low relevance.",0
Review improvement by requirements classification at Mercedes-Benz: Limits of empirical studies in educational environments,"Reviews are the most common way to ensure quality in natural language (NL) requirements specifications. But with increasing size (up to 3,000 pages in the automotive domain) and complexity of the specification documents, the review task tends to be less effective. To improve the review task for large documents, one possible solution is the `topic landscape'. The idea of this approach is to introduce a pre-classification and clustering of requirements according to topics. In a first empirical study with eight students, we analyzed the effectiveness of the topic landscape approach. During this study, we encountered a general limitation of experiments with large requirements specifications, especially in external environments like universities. Industries have a strong demand on new approaches and methods to deal with large specifications. However, there is a growing gap between the number of requirements that can be examined during an empirical study and the number of requirements required to ensure results that are valid for real requirements specifications. This paper describes the conducted empirical study in detail and shows recognized problems concerning the limits of educational environments.",0
Applying empirical software engineering to software architecture: challenges and lessons learned,"In the last 15years, software architecture has emerged as an important software engineering field for managing the development
and maintenance of large, software-intensive systems. Software architecture community has developed numerous methods, techniques,
and tools to support the architecture process (analysis, design, and review). Historically, most advances in software architecture
have been driven by talented people and industrial experience, but there is now a growing need to systematically gather empirical
evidence about the advantages or otherwise of tools and methods rather than just rely on promotional anecdotes or rhetoric.
The aim of this paper is to promote and facilitate the application of the empirical paradigm to software architecture. To
this end, we describe the challenges and lessons learned when assessing software architecture research that used controlled
experiments, replications, expert opinion, systematic literature reviews, observational studies, and surveys. Our research
will support the emergence of a body of knowledge consisting of the more widely-accepted and well-formed software architecture
theories.

KeywordsSoftware architecture-Empirical software engineering",0
Perceived productivity threats in large agile development projects,,0
Defining Useful Technology Evaluations,,0
Empirical Validation of a Requirements Engineering Process Guide,"Current requirements engineering (RE) practice in industry lacks the availability of an integrated guide that defines and supports the requirements engineering part of embedded system development. Therefore, the RE part of a development project is not as structured and defined as desired. This paper presents results of an experiment validating a RE guide developed by a joint research project between industry and academia. In the experiment carried out for 14 weeks, embedded development projects using the guide were compared to projects following a state-of-the-practice process. The results suggest the guide to be suitable for mastering the RE part of an embedded system development.",0
The practise of technology transfer,"Technology transfer can take place within an organisation or between organisations. For both the source of the technology as well as the adopter of the technology it is of importance that the transfer is successful. This paper reports on research that consisted of a case study of technology transfer between a public institution and a private company in the defence sector of South Africa. The paper addresses the practice of technology transfer, its application in the defence-related industry, the maturity of the role players involved in a typical technology transfer process, and recommendations for improving the practice of technology transfer.",0
The evolution of emerging technologies in market-driven software product development,"This paper investigates the lifecycle of emerging technologies from the perspective of market-driven software product development. Typically, the underlying concepts of the emerging technology are first elaborated at universities; after some time of intensive research effort, the first prototype is developed. The next stage brings to the scene companies aiming to develop software products using the technology. Then, the first commercial product is developed and introduced to the market. It gains market share, reaches maturity and finally decline. In this paper, we explore the different challenges, opportunities and actors involved in each stage of technology lifecycle. We believe that a better understanding on the dynamics of innovation in market-driven software product development is a key factor to advance the diffusion of research results into commercial software development.",0
A Systematic Approach to Requirements Engineering Process Improvement in Small and Medium Enterprises: An Exploratory Study,"Requirements Engineering (RE) studies have demonstrated that requirements errors affect the quality of software developed,
making software requirements critical determinants of software quality. Requirements Engineering Process Improvement (REPI)
models have been provided by different authors to improve the RE process. However, little success has been achieved in Small
and Medium Enterprises (SMEs) software companies especially in transitional countries such as Uganda. This study reports on
an exploratory study which provides insights into current RE practices in four Ugandan SME software companies, critical success
factors and challenges that impede REPI. As a result a Systematic Approach to REPI has been designed following the design
science approach. It provides guidelines and steps for SMEs in improving their RE processes.",0
Modelo para a transfer{\^{e}}ncia tecnologia-produto sob o recorte anal{\'{\i}}tico de redes colaborativas,,0
Requirement engineering elicitation methods,,0
Requirement engineering elicitation methods,,0
Avalia{\c{c}}{\~{a}}o Experimental de um M{\'{e}}todo para Avalia{\c{c}}{\~{a}}o de Equipes de Requisitos,"Esse artigo relata um processo de avaliação experimental de um método de avaliação de equipes de requisitos. Avaliar equipes é uma área explorada no âmbito de gerência de software. No entanto, verificamos que em termos específicos de engenharia de requisitos havia uma lacuna significativa na literatura de avaliação de equipes, o que nos levou a construir um método de avaliação. Nesse artigo mostramos como esse método foi avaliado utilizando-se conceitos de experimentação. A experimentação envolveu quatro equipes, um total de 20 pessoas e foi conduzida ao longo de três meses. Com base na experimentação fizemos uma análise qualitativa do método, que foi utilizada para a própria melhoria do método. O artigo detalha o desenho do experimento, enfatizando as avaliações qualitativas que contribuíram para a melhoria do método de avaliação de equipes de requisitos.",0
A Three-Phased Technology Transfer Model: Lessons from Software Technology Transfer from Japan to Korea,"Software development is quickly becoming globally distributed. Cross-country-border software development that spans across country borders is a mandatory part of software production today. In order to facilitate global coordination, the transfer of technology is a key. We analyze a successful technology transfer from one time dimension and three factor dimensions. From the lessons learned, we propose a three-phase model of technology transfer and a three factor model of technology transfer achievement.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
"The role of government, universities, and businesses in advancing technology for {SMEs}' innovativeness","Knowledge and technologies play an essential part in this rapid-response capability, by maintaining opportunities for continuous improvement and innovation needed in the development of sustainable competitive advantage. However, the low capability of SMEs to provide the required resources is a barrier to the in-house technology development. Consequently, external resources such as government, businesses, and universities, to support their performance in developing technological capabilities utilize so-called ‘knowledge and technology transfer’ programs, which are needed as a shortcut to improve technological process innovation. This study provides theoretical and empirical support for the role of government, businesses, and universities in transferring knowledge and technology for SMEs’ innovativeness in emerging economies and the impact of process innovation on SMEs’ competitiveness. The results suggest policy directions for governments to support SMEs in emerging economies.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
Programa de transferencia de conocimiento de la empresa a la universidad: una estrategia de comunicaci{\'{o}}n para dar a conocer una marca industrial,"El presente trabajo de investigación fue desarrollado con el fin de analizar los efectos que tiene la implementación de un programa de trasferencia de conocimiento sobre la estrategia de comunicación para dar a conocer la marca industrial ABB. Este trabajo abordó a los empleados de la empresa como agentes transmisores y a los estudiantes universitarios de ingeniería eléctrica como receptores de esta información. Para la construcción, implementación y análisis del programa de transferencia, se revisó la percepción de los empleados de ABB, el papel del área de Comunicaciones Corporativas y el nivel de conocimiento de la marca ABB por parte de los estudiantes de ingeniería. Los resultados obtenidos evidenciaron que un programa de transferencia de conocimiento puede convertirse en una estrategia de comunicación efectiva para dar a conocer la marca de empresas industriales, dando valor a los procesos comunicativos y aportando a la educación de los universitarios.",0
Using Role-Play Diagrams to Improve Scenario Role-Play,"CRC-cards are a common lightweight approach to collaborative object-oriented analysis and design. They have been adopted by
many educators and trainers to teach object-oriented modelling. In our experience, we have noticed many subtle problems and
issues that have largely gone unnoticed in the literature. Two of the major issues are related to the CRC-card role-play as
described in the literature. Although CRC-cards are representing classes, they are also utilized as substitutes for the actual
objects during the scenario role-play. Furthermore, it is quite difficult to document or trace the scenario role-play. We
propose using Role-Play Diagrams (RPDs) to overcome these problems. Our experience so far is quite positive. Novices have
fewer problems with role-play activities when using these diagrams. Teaching and learning the new type of diagram adds only
little overhead to the overall CRC-approach. Although our improvements specifically target the teaching and learning of object-oriented
modelling, we believe that RPDs can be successfully applied in professional software development.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
{ORGANIZATIONAL} {LEARNING} {APPLIED} {TO} {SOFTWARE} {ENGINEERING}: A {SYSTEMATIC} {REVIEW},"Organizational learning assists the companies to improve significantly their processes by means of experiences reuse, making knowledge accessible to the whole organization. In software engineering it is important that the acquired knowledge is stored and systematically reused. This paper aims to present a systematic review, by identifying in which software engineering areas are the organizational learning studies concentrated, and how the organizational learning concepts are being applied in software engineering. This systematic review identified 2496 papers. After eliminating the duplicate titles and those not related to the review, 1184 papers remained. Applying the exclusion criteria, the number of papers was reduced to 68. These papers were analyzed and classified according to the software engineering areas defined in the SWEBOK, and the main organizational learning theories and techniques. It was observed that many software engineering researches apply organizational learning concepts without being aware of it.",0
A Scrum-Centric Framework for Organizing Software Engineering Academic Courses,"Teaching Scrum and other complex Software Engineering (SE) practices, methods, and tools within a regular academic course is often a challenging task because the examples shown to students and their working environment are not realistic enough. This problem is frequently tackled by organizing courses in the form of capstone projects. Unfortunately, this approach requires additional resources (e.g., more tutors, external customers, etc.) what limits the potential number of participants. As a response to this problem, we propose a Scrum-centric framework that allows combining lectures and laboratory classes with a minimalistic capstone project, all within a regular SE course. The course is organized similarly to a project run according to the Scrum guidelines. The focal point of the framework is the synchronization between the content presented during lectures and laboratory classes with the capstone project iterations (sprints). We also share our experience from 2 years of conducting Software Engineering course organized according to the framework together with the results of a cross-sectional survey assessing student perceptions of the effectiveness of the approach.",0
A Three-Phased Technology Transfer Model: Lessons from Software Technology Transfer from Japan to Korea,"Software development is quickly becoming globally distributed. Cross-country-border software development that spans across country borders is a mandatory part of software production today. In order to facilitate global coordination, the transfer of technology is a key. We analyze a successful technology transfer from one time dimension and three factor dimensions. From the lessons learned, we propose a three-phase model of technology transfer and a three factor model of technology transfer achievement.",0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,"Continuous and long-term collaboration between industry and academia is crucial to develop front-line research in context-dependent areas like software development where both practitioners and researchers are searched for data collection, analysis and results. Despite many mutual benefits, this collaboration is often challenging, not only due to different goals, but also because of different pace in providing the results. The software development industry has during the last decade aligned around and organized their development adopting agile methodologies. For the researchers, the agile methodologies are a topic for a research, rather than a means of performing the research itself. We can state a question, whether the agile methodologies can be a good common ground for enabling successful research collaboration between industry and academia? This paper reports on a longitudinal industry - academia research collaboration case, which has stepwise adapted SCRUM over a six-year period. The implementation of SCRUM and the collaboration successes and challenges are presented, and findings are discussed.",1
Transfer and Commercialization of Technologies from Universities to Small Companies in South Africa,"World-wide many universities have a significant role in the socio-economic development of their countries and regions. One avenue for universities to achieve this role is through the transfer and commercialization of their technologies to resource-constrained small, medium enterprises (SMEs). A survey-based study was conducted to establish the factors that enable and restrain the transfer and commercialization of technology from South African publicly-funded universities (transferor) to SMEs (transferee), as well as to recommend how the restraining factors could be addressed. The sample consisted of researchers and technology managers drawn from entrepreneurs and six Gauteng universities. Respondents rated each of the ten literature-derived enabling factors and ten literature- derived restraining factors to technology transfer and commercialization from universities to SMEs. Results show the top two enabling factors to be absorptive capacity of the transferee; and transferor's attitude towards TT and commercialization. The top two restraining factors are university bureaucracy and the university performance evaluation system. Measures to deal with the top four restraining factors are suggested and useful insights are provided by the research findings.",0
Design rationale: Researching under uncertainty,,0
Design rationale: Researching under uncertainty,,0
From User-Centered to Adoption-Centered Design,"As we increasingly strive for scientific rigor and generalizability in HCI research, should we entertain any hope that by doing good science, our discoveries will eventually be more transferrable to industry? We present an in-depth case study of how an HCI research innovation goes through the process of transitioning from a university project to a revenue-generating startup financed by venture capital. The innovation is a novel contextual help system for the Web, and we reflect on the different methods used to evaluate it and how research insights endure attempted dissemination as a commercial product. Although the extent to which any innovation succeeds commercially depends on a number of factors like market forces, we found that our HCI innovation with user-centered origins was in a unique position to gain traction with customers and garner buy-in from investors. However, since end users were not the buyers of our product, a strong user-centered focus obfuscated other critical needs of the startup and pushed out perspectives of non-user-centered stakeholders. To make the research-to-product transition, we had to focus on adoption-centered design, the process of understanding and designing for adopters and stakeholders of the product. Our case study raises questions about how we evaluate the novelty and research contributions of HCI innovations with respect to their potential for commercial impact.",0
Bridging the `Valley of Death': Can Agile Principles Be Applied in Industry-Academia Research and Innovation Projects?,,0
An Assessment of the Impact of Information Technology on Marketing and Advertising,"The present study aimed to evaluate the impact of Technology on Marketing and Advertising by using structural equations modeling. To do this, 200 marketing and information technology (IT) experts participated in the study. They answered questionnaires regarding IT, marketing mix and advertising. For data analysis, structural equations modeling using SMARTPLS were used. The results showed that the effect of IT on marketing mix and advertising was positive and significant. The effect of marketing mix on advertising was positive and significant. The indirect effect of IT on advertising via marketing mix was therefore positive and significant. Totally, the results emphasized the effect of technology on marketing mix and advertising.",0
International technology transfer as an effective tool of export-oriented import substitution in Russia,"The aim of this study is to determine the prospects of the international transfer technologies in the Russian market. The sanctions imposed on Russia by the EU countries and the United States have led to a clear understanding of the danger of dependence on imports. In 2014, an import substitution program was launched by the Russian government, and it has already shown the positive results. Some industries showed the increasing the share of domestic products by 15-25% Nevertheless, simple import substitution can also have a negative impact on the enterprise. For example, it can decrease the productivity and the product quality. Not all enterprises can offer competitive products without imported components, technologies, and trained personnel, even for the domestic market. No doubt, the interests of domestic producers must be considered in the first place, but it is necessary to make sure that Russian products are also interesting for the foreign markets. That is why the government set the task of moving from the policy of simple import substitution to the policy of export-oriented import substitution. Russia should improve its performance in the export of non-resource goods. Unfortunately, simple localization can be quite risky for the economy. Russia should be more actively involved in international technology transfer. The article examines the weaknesses and strengths of the Russian innovation system, as well as the opportunities that open for Russian business and Swiss companies, that transforms innovative and patented technologies developed by Swiss universities and international research centers into global successful businesses.",0
{DRR} technology sharing and transfer through web-based platforms,,0
Exploring capabilities of international technology transfer intermediaries between emerging and developed countries,"We report which capabilities are essential to a successful demand-driven inter-organizational international technology transfer (ITT) when a business deal involves an emerging country recipient and a developed country source. Using a mixed-methods approach, the study collected opinions from 74 experts from 12 countries on technology transfer and diffusion, innovation systems and networks, and knowledge-intensive business services. In a preliminary attempt to identify which skills are critical, we present the perspective of emerging countries’ stakeholders. The suggested 28 critical capabilities can be used as an input for further empirical analysis. The conceptual framework can be applied to assess an intermediary’s performance for a given ITT project in which the demand arises from an emerging-country stakeholder.",0
Exploring capabilities of international technology transfer intermediaries between emerging and developed countries,,0
Bridging the Gap in Technology Transfer for Advanced Process Control with Industrial Applications,"In the present paper, a software framework comprising the implementation of Model Predictive Control—a popular industrial control method—is presented. The framework is versatile and can be run on a variety of target systems including programmable logic controllers and distributed control system implementations. However, the main attractive property of the framework stems from the goal of achieving smooth technology transfer from the academic setting to real industrial applications. Technology transfer is, in general, difficult to achieve, because of the apparent disconnect between academic studies and actual industry. The proposed software framework aims at bridging this gap for model predictive control—a powerful control technique which can result in substantial performance improvement of industrial control loops, thus adhering to modern trends for reducing energy waste and fulfilling sustainable development goals. In the paper, the proposed solution is motivated and described, and experimental evidence of its successful deployment is provided using a real industrial plant.",0
Using academic courses for empirical validation of software development processes,"Software process improvement needs sound empirical data gathered from a range of empirical studies such as controlled experiments or case studies. However, conducting empirical studies is often cost-intensive; in particular in industrial environments. Therefore, we need to find a way to balance cost and value of empirical findings. In This work, we discuss a way of gathering required empirical data in software engineering education programs. Although an academic setting is not representative of industrial organizations, the information gathered there can help organizations to decide upon alternatives to improve current software engineering processes. We describe how a practical software engineering course for graduate students at the University of Kaiserslautern was used as a platform for validating software development approaches. As there are specific restrictions and constraints defined by this context, we discuss how they influence the design of empirical studies. In addition, we present a concrete example of comparing product line approaches.",0
A survey on software reuse processes,"Software reuse processes have been under continuous attention in the software engineering and software reuse research communities during past years. Although several processes have been investigated to develop reusable software, there are not available studies that compare them. In this way, this paper presents a detailed survey on software reuse processes.",0
A systematic review of Web engineering research,"This paper uses a systematic literature review as means of investigating the rigor of claims arising from Web engineering research. Rigor is measured using criteria combined from software engineering research. We reviewed 173 papers and results have shown that only 5% would be considered rigorous methodologically. In addition to presenting our results, we also provide suggestions for improvement of Web engineering research based on lessons learnt by the software engineering community.",0
Architecture Compliance Checking - Experiences from Successful Technology Transfer to Industry,"New ideas and concepts emerging from research have to be accepted by industrial stakeholders before they are used in product development. In this paper, we present our lessons learned and experiences gained from transferring a reverse engineering technology - architecture compliance checking - to Testo AG, one of the world's leading suppliers of portable measurement devices for industry and emission business. Testo develops a product line of climate and flue gas measurement devices and uses architecture compliance checking as the means to ensure consistency between the specified reference architecture and the implemented products. After delivery of more than a dozen products to the market, we present how architecture compliance checking has been transferred and how it became one instrument for ensuring the high quality of Testo products.",0
A Comparative Review of Processes for Research Development on Applied Computing,"The increasing volume of research projects on applied computing is a motivation for analyzing processes which are used to develop such projects. There are significative differences between research projects on applied computing and industrial software projects, for example, in research domain there is the interest in prototype development instead of product development. As a consequence,definition of specific processes to attend this context is required. Additionally, these processes are relevant because, with the wide spread of the Internet, many researchers are working on collaborative projects from geographically distant areas and an adjusted process can help management overtime of artifacts like models, prototypes, and scientific documents. In this paper, the goal is to provide a comparative review of processes for research development on applied computing, based on requirements described in the literature. He hope that results of this review be useful to help researchers to select one approach or defining their own process.",0
The Maturation of Empirical Studies,"Conducting empirical studies and transferring their results into industry in a design discipline such as software engineering is ambitious. This is due to contextual restrictions, representativeness as well as problems in aggregating results from individual studies towards guidelines for practitioners. Nevertheless, they are necessary, as scientific contributions need to be challengeable. Significant progress in areas such as measurement, controlled experiments, industrial case studies, empirical based modeling, and packaging knowledge have been made over the past 30 to 40 years. External visibility has been increased significantly by means of books, conferences & journals! Future challenges include attracting more industrial contributions to the existing body of knowledge, using quantitative & qualitative studies to create more trustful evidences, and aggregation of empirical results. These challenges require community efforts.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Research on Foreign Quality Infrastructure Services Supporting {SMEs},,0
Empirical Practice in Software Engineering,"Experimental software engineering has been defined as the scientific approach to systematically evaluating software technologies by referring to predefined hypotheses using sound empirical methods.

The purpose of this chapter is to give an overview of the history, current practice, and future of empirical practice in Software Engineering. In particular, based on what we have learned from 20 years of research in empirical software engineering, we describe the empirical approach we are currently using in terms of a scientific approach to applied research and as a means for systematic evaluation.",0
Process Support for Product Line Application Engineering,"The derivation of products from a software product line is a time-consuming and expensive activity. Despite recognition that
an effective process could alleviate many of the difficulties associated with product derivation, existing approaches have
different scope, emphasize different aspects of the derivation process and are frequently too specialized to serve as a general
solution. In response to a need for methodological support, we developed Pro-PD (Process model for Product Derivation). Pro-PD
was iteratively developed and evaluated through four research stages involving academic and industrial sources. This paper
illustrates how Pro-PD provides systematic support by using product derivation preparation as an example.

KeywordsSoftware product lines–product derivation–process model",0
The Pro-{PD} Process Model for Product Derivation within software product lines,"Background
The derivation of products from a software product line is a time consuming and expensive activity. Despite recognition that an effective process could alleviate many of the difficulties associated with product derivation, existing approaches have different scope, emphasise different aspects of the derivation process and are frequently too specialised to serve as a general solution.Objective
To define a systematic process that will provide a structured approach to the derivation of products from a software product line, based on a set of tasks, roles and artefacts.Method
Through a series of research stages using sources in industry and academia, this research has developed a Process Model for Product Derivation (Pro-PD). We document the evidence for the construction of Pro-PD and the design decisions taken. We evaluate Pro-PD through comparison with prominent existing approaches and standards.ResultsThis research presents a Process Model for Product Derivation (Pro-PD). Pro-PD describes the tasks, roles and work artefacts used to derive products from a software product line.Conclusion
In response to a need for methodological support, we developed Pro-PD (Process Model for Product Derivation). Pro-PD was iteratively developed and evaluated through four research stages. Our research is a first step toward an evidence-based methodology for product derivation and a starting point for the definition of a product derivation approach.",0
The Pro-{PD} Process Model for Product Derivation within software product lines,"Background
The derivation of products from a software product line is a time consuming and expensive activity. Despite recognition that an effective process could alleviate many of the difficulties associated with product derivation, existing approaches have different scope, emphasise different aspects of the derivation process and are frequently too specialised to serve as a general solution.Objective
To define a systematic process that will provide a structured approach to the derivation of products from a software product line, based on a set of tasks, roles and artefacts.Method
Through a series of research stages using sources in industry and academia, this research has developed a Process Model for Product Derivation (Pro-PD). We document the evidence for the construction of Pro-PD and the design decisions taken. We evaluate Pro-PD through comparison with prominent existing approaches and standards.ResultsThis research presents a Process Model for Product Derivation (Pro-PD). Pro-PD describes the tasks, roles and work artefacts used to derive products from a software product line.Conclusion
In response to a need for methodological support, we developed Pro-PD (Process Model for Product Derivation). Pro-PD was iteratively developed and evaluated through four research stages. Our research is a first step toward an evidence-based methodology for product derivation and a starting point for the definition of a product derivation approach.",0
A Structured Approach to Academic Technology Transfer: Lessons Learned from imec's 101 Programme,,0
An empirical methodology for introducing software processes,,0
Successful combination of database search and snowballing for identification of primary studies in systematic literature studies,,0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Applying data analytics towards optimized issue management,"This document describes our experience of applying data analytics at Plexina, a leading IT company working in the healthcare domain. The main goal of the project was to identify factors currently affecting issue management and to make analytics based suggestions for optimizing the process. Various statistical and machine learning techniques were applied on a data set extracted from six releases of Plexina, containing more than 666 issues. Statistical techniques successfully identified the various factors that leads to estimation inaccuracy related to issues as well as identified the hidden relationships existing among various variables. The employed predictive analytic models was also successful to some extent, in predicting effort estimation related inaccuracy associated with the issues. The insights provided by the entire data analytics study can be of great help to product managers or the developers to make more informed decisions. In addition, the guidelines presented in this paper based on the lessons learnt can be applied to other data analytics and academia-industry collaboration project.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Successful combination of database search and snowballing for identification of primary studies in systematic literature studies,,0
Industry academia collaboration model: The design challenges,"The Information Technology industry is growing at a healthy rate with businesses heavily dependent on IT applications for their operations. India has become a global hub for IT services export and has witnessed exponential growth of employment opportunities. While the IT industry has felt a pressing need for acquiring and retaining competent talent, academia on the other side has also felt a strong need in terms of producing the necessary quality talent. Hence, a need for industry-academia partnership has been strongly felt to enhance the employability of engineering graduate workforce and make them industry ready. This article discusses the critical design challenges significant for any industry-academia collaboration model in the higher education space [4]. Here, we discuss the design options for such a model, its evaluation strategy and performance parameters, and how it addresses the primary challenges faced by both the stakeholders i.e. industry and academia, in a measurable, scalable and sustainable manner.",0
A New Model on the School-Enterprise Cooperation Curriculum Construction,"Universities are actively exploring and implementing the cooperation courses with enterprises. In software engineering, the key construction is to build a win-win course to meet the needs of student development and enterprise requirements. This paper introduces a co-teaching curriculum model aimed at narrowing the theory-practice gap. The course construction system and diversified teaching methods are given based on actual experience of school-enterprise cooperation. The feed-back institution is necessary to check the effects of cooperation course. The establishment of integrated cooperation curriculum is helpful to develop innovative, practical and versatile international software engineers.",0
SEE_ME: Software Engineering Education Methodology Exploration,"Software Engineering is a primary subject in many computer science departments of universities worldwide. Its purpose is to help students understand and apply both disciplined and systematic methods to software development. Due to the ubiquity and visibility of software in the modern world, the study, education and research into software engineering and its practice have retained a high level of interest. Distinct in nature from other computer science courses, this discipline borrows from and is influenced by other fields such as, systems analysis, design, management, quality control, and communication. In this paper, the practices and methodologies used, developed, and evaluated in the Software Engineering Education (SEE) will be outlined. Further improvements have been planned through the Software Engineering Education Methodology Exploration (SEE_ME) project.",0
Teaching of Telecommunication-Specific University Course in Cooperation with Partners from Industry,"Modern information and telecommunication technology (ICT) is rapidly evolving in time and there is a constant need for specialists, who have good knowledge to meet the industry needs. One way to perform industry specific knowledge transfer form industry to academia is to involve partner's specialist in teaching the courses. The aim of this paper is to introduce an example of course setup in teaching VoIP and IMS technologies for ICT students. We analyze the opportunities and limitations seen in organizing and teaching this course based on our 3-year experience. We also give some suggestions for developing the course when industry interest and support, due to the situation in economy and market, may change in time.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Towards understanding the relation between citations and research quality in software engineering studies,"The importance of achieving high quality in research practice has been highlighted in different disciplines. At the same time, citations are utilized to measure the impact of academic researchers and institutions. One open question is whether the quality in the reporting of research is related to scientific impact, which would be desired. In this exploratory study we aim to: (1) Investigate how consistently a scoring rubric for rigor and relevance has been used to assess research quality of software engineering studies; (2) Explore the relationship between rigor, relevance and citation count. Through backward snowball sampling we identified 718 primary studies assessed through the scoring rubric. We utilized cluster analysis and conditional inference tree to explore the relationship between quality in the reporting of research (represented by rigor and relevance) and scientiometrics (represented by normalized citations). The results show that only rigor is related to studies’ normalized citations. Besides that, confounding factors are likely to influence the number of citations. The results also suggest that the scoring rubric is not applied the same way by all studies, and one of the likely reasons is because it was found to be too abstract and in need to be further refined. Our findings could be used as a basis to further understand the relation between the quality in the reporting of research and scientific impact, and foster new discussions on how to fairly acknowledge studies for performing well with respect to the emphasized research quality. Furthermore, we highlighted the need to further improve the scoring rubric.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Contemporary Empirical Methods in Software Engineering,"Several decades ago, inspired by other knowledge areas, simulation 4 was introduced as a research method to Software Engineering. Motivated by 5 potential benefits achieved in other areas, the software engineering community has 6 used simulation-based studies for planning, controlling, and improving software 7 development. However, unclear expectations from simulation-based studies, a lack 8 of methodological support, as well as dispersed knowledge to support model 9 building and calibration have hindered widespread adoption of simulation-based 10 investigations. In this chapter, we delineate the role of simulation in software 11 engineering research and compile processes and guidelines into a comprehensive 12 life cycle. This chapter aims to guide software engineering researchers to conduct 13 effective simulation-based studies in real-world settings.",0
A Method for Early Requirements Triage and Selection Utilizing Product Strategies,"In market-driven product development large numbers of requirements threaten to overload the development organization. It is critical for product management to select the requirements aligned with the overall business goals and discard others as early as possible. This paper presents a method that utilizes strategies for early requirements triage. The method presented is based on good practices from management literature customized for technical product strategy formulation. The creation of the method was also inspired by industry needs through exploratory interviews covering requirements triage and selection processes as well as strategy formulation. After creation, the method was subsequently validated in industry where the aspects of usability and usefulness were investigated, yielding promising initial results.",0
Needs Oriented Framework for Producing Requirements Decision Material - NORM,"The need of understanding and supporting requirements engineering decisions in market-driven product development is motivated by the complexity and economical impact of these decisions. While being a key for success, correct and timely decisions are dependent on the availability and the quality of decision material (requirements, business cases, cost- value estimations etc). This paper presents a needs-oriented framework (NORM) for identifying and assuring the creation of appropriate decision material for RE decisions. NORM is based on analysis of the applied RE process and characteristics of separate RE decisions, focusing mainly on pre-project activities. The framework is developed in close cooperation with industry with the intention to ensure that resources are spent on producing just-the-necessary information at the right time and to be able to monitor and control this production effort.",0
A Lightweight Innovation Process for Software-Intensive Product Development,"The product development environment facing most companies today requires a long-term perspective featuring the conception and development of long-term innovations. This can be hard when close quarter bottom-line results dominate. Without innovation, competitive advantages decrease over time. This is especially true for companies producing software-intensive systems. Software is becoming a large part of the competitive advantage of traditionally hardware-focused systems such as cars, robots, or power systems, where feature sets traditionally offered and controlled by hardware are transferred to software. As software's impact and influence grows, so do the possibilities for innovation and increasing the competitive advantage through software. Star Search is a lightweight innovation model based on best practices from innovation management literature as well as two industry cases. It employs face-to-face screening and idea refinement using heterogeneous audition teams. Star Search was developed in collaboration with, and subsequently piloted at, two companies. It has helped increase the long-term perspective of product development by increasing the level of new ideas that make it to product planning and development.",0
Agile Collaborative Research: Action Principles for Industry-Academia Collaboration,"Both the software industry and academia promote collaboration to solve challenges together that neither can solve alone. Collaboration brings opportunities to understand and improve in ways not possible when working apart, but it succeeds only if both parties are contributing. A collaboration model developed from eight years' experience setting up and managing a research center explicitly focused on industry needs is based on five success factors enabling research results (need orientation, industry goal alignment, deployment impact, industry benefit, and innovativeness), five success factors enabling research activities (management engagement, network access, collaborator match, communication ability, and continuity), and 10 action principles for industry-academia collaboration management.",0
The Success Factors Powering Industry-Academia Collaboration,Collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. This article presents an exploratory study of the factors for successful collaboration between industry and academia in software research.,0
A prototype tool for QUPER to support release planning of quality requirements,"Release planning plays an important role for the success of a software product vendor that develops software-intensive incremental products. It is important that the software product is released to the market at the right time, and offers higher quality than the competitors. However, an especially challenging problem for a software product vendor is to set the right quality target in relation to future market demands and competitor products. In this paper, we present a prototype for QUPER, a special-purpose tool for supporting release planning of quality requirements. The applicability of the QUPER prototype tool is demonstrated through academic and industrial evaluations. The study showed that the tool provides a clear overview of the current market situation by the generated roadmaps, and to reach an alignment between practitioners, e.g., product managers and developers, of what level of quality is actually needed.",0
Prioritization of quality requirements: State of practice in eleven companies,"Requirements prioritization is recognized as an important but challenging activity in software product development. For a product to be successful, it is crucial to find the right balance among competing quality requirements. Although literature offers many methods for requirements prioritization, the research on prioritization of quality requirements is limited. This study identifies how quality requirements are prioritized in practice at 11 successful companies developing software intensive systems. We found that ad-hoc prioritization and priority grouping of requirements are the dominant methods for prioritizing quality requirements. The results also show that it is common to use customer input as criteria for prioritization but absence of any criteria was also common. The results suggests that quality requirements by default have a lower priority than functional requirements, and that they only get attention in the prioritizing process if decision-makers are dedicated to invest specific time and resources on QR prioritization. The results of this study may help future research on quality requirements to focus investigations on industry-relevant issues.",0
Automated Unit Testing of a SCADA Control Software: An Industrial Case Study Based on Action Research,We report in this case-study paper our experience and success story with a practical approach and tool for unit regression testing of a SCADA (Supervisory Control and Data Acquisition) software. The tool uses a black-box specification of the units under test to automatically generate NUnit test code. We then improved the test suite by white-box and mutation testing. The approach and tool were developed in an action-research project to test a commercial large-scale SCADA system called Rocket.,0
It Takes Two to Tango -- An Experience Report on Industry -- Academia Collaboration,"Industry - academia collaboration is critical for empirical research to exist. However, there are many obstacles in the collaboration process. This paper reports on the experiences gained by the author, in a 2-year collaboration project on software testing which involved on-site work by the researcher in the industry premises. Based on notes, minutes of meetings, and progress reports, the project history is outlined. The project is analyzed, using collaboration models as a frame of reference. We conclude that there must be a balance between company 'pull' and academia 'push' in the collaboration Management support is inevitably a key factor to success, while other factors like cross-cultural skills and interfaces towards key resources also contribute.",0
Towards customer-based requirements engineering practices,"Factors related to the requirements engineering process and customers have been repeatedly reported among those that most strongly influence the success of a software project. However, requirements engineering research has so far barely studied practice from a customer-based perspective. Furthermore, rigorous evidence about customers' perspectives regarding requirements engineering approaches is scarce, and links between customer-based requirements engineering research and the industrial practices are necessary. This paper argues that new research is necessary to tackle the above weaknesses. Our position is that: requirements specification approaches must be validated from a customer-based perspective; the influence of customers' characteristics on the requirements engineering process must be studied in more depth; and potential customer-based improvements in practice must be assessed. We also present situations in which the results from these activities would help practitioners, propose a research agenda to execute these activities, and discuss challenges that might hinder their execution.",0
Software Analytics in Practice,"With software analytics, software practitioners explore and analyze data to obtain insightful, actionable information for tasks regarding software development, systems, and users. The StackMine project produced a software analytics system for Microsoft product teams. The project provided lessons on applying software analytics technologies to positively impact software development practice. The lessons include focusing on problems that practitioners care about, using domain knowledge for correct data understanding and problem modeling, building prototypes early to get practitioners' feedback, taking into account scalability and customizability, and evaluating analysis results using criteria related to real tasks.",0
Dealing with Software Model Quality in Practice: Experience in a Research Project,"Although past research has resulted in different means to deal with software model quality, creation of adequate software models remains challenging. Any modelling effort must be carefully analysed and planned before it starts, and definition or adoption of modelling guidelines is usually necessary. In addition, the amount of publications addressing model quality in practice is low, and the knowledge about others' experience regarding model quality is limited. This paper reports on our experience in dealing with software model quality in the context of a project between industry and academia. Such a project corresponds to a large-scale research project in which modelling has been used both as part of the necessary work for executing the project and for creating project results. We present how we have dealt with model quality in requirements modelling and in conceptual model specification, as well as a set of lessons learned. The insights provided can help both researchers and practitioners when having to deal with software model quality.",0
Empirical software engineering research with industry: Top 10 challenges,"Software engineering research can be done in many ways, in particular it can be done in different ways when it comes to working with industry. This paper presents a list of top 10 challenges to work with industry based on our experience from working with industry in a very close collaboration with continuous exchange of knowledge and information. The top 10 list is based on a large number of research projects and empirical studies conducted with industrial research partners since 1983. It is concluded that close collaboration is a long-term undertaking and a large investment. The importance of addressing the top 10 challenges is stressed, since they form the basis for a long-term sustainable and successful collaboration between industry and academia.",0
A review of traceability research at the requirements engineering conferencere@21,"Traceability between development artefacts and mainly from and to requirements plays a major role in system lifecycle, supporting activities such as system validation, change impact analysis, and regulation compliance. Many researchers have been working on this topic and have published their work throughout the editions of the Requirements Engineering Conference. This paper aims to analyse the research on traceability published in the past 20 years of this conference and to provide insights into its contribution to the traceability area. We have selected and reviewed 70 papers in the proceedings of the conference and summarised several aspects of traceability that have been addressed and by whom. The paper also discusses the evolution of the topic at the conference, compares the results with those reported in other publications, and proposes aspects on which further research should be conducted.",0
A little rebellion now and then is a good thing: Views on the requirements engineering conference,"A little rebellion now and then is a good thing. This short position statement describes my views on some of the challenges associated with many conferences, the Requirements Engineering Conference being among them. The main concepts are; the goals, as well as criteria for paper selection for the conference should be defined explicitly, and shared with the community. Industry involvement in the conference should be increased, but the focus of all tracks should be quality - what constitutes quality however needs to be defined and agreed on. Industrial validation of research results have to be more than an intention. Last but not least, how papers are presented and discussed needs to change, focusing on quality over quantity.",0
A model to anticipate and analyse requirements of heritage organisations wishing to actively participate in Europeana,"Heritage organisations wishing to participate in open and public aggregators such as Europeana, need to review and revise their own digital curation workflow processes in order to tackle both the technical integration as well as the organizational and operational issues. This framework of challenges is addressed by Europeana Inside, a new project co-funded by the European Union under the CIP-ICT-PSP Programme. In this paper, the major results that were produced during the functional specification activities are summarised and the MSP-VSE model that was deployed for the harmonisation of requirements is presented. MSP-VSE is currently being used to drive the cascading ECK Prototype Iterations and the related software evaluations performed by participating content providers.",0
A Search-Based Approach for Cost-Effective Software Test Automation Decision Support and an Industrial Case Study,"Test automation is a widely-used approach to reduce the cost of manual software testing. However, if it is not planned or conducted properly, automated testing would not necessarily be more cost effective than manual testing. Deciding what parts of a given System Under Test (SUT) should be tested in an automated fashion and what parts should remain manual is a frequently-asked and challenging question for practitioner testers. In this study, we propose a search-based approach for deciding what parts of a given SUT should be tested automatically to gain the highest Return On Investment (ROI). This work is the first systematic approach for this problem, and significance of our approach is that it considers automation in the entire testing process (i.e., from test-case design, to test scripting, to test execution, and test-result evaluation). The proposed approach has been applied in an industrial setting in the context of a software product used in the oil and gas industry in Canada. Among the results of the case study is that, when planned and conducted properly using our decision-support approach, test automation provides the highest ROI. In this study, we show that if automation decision is taken effectively, test-case design, test execution, and test evaluation can result in about 307%, 675%, and 41% ROI in 10 rounds of using automated test suites.",0
Context-sensitive Information security Risk identification and evaluation techniques,"The objective of my research is to improve and support the process of Information security Risk Assessment by designing a scalable Risk argumentation framework for socio-digital-technical Risk. Due to the various types of IT systems, diversity of architectures and dynamic nature of Risk, there is no one-size-fits all RA method. As such, the research hopes to identify guidelines for conducting Risk Assessments in contexts that raise special challenges such as Telecom and virtualized infrastructures. Finally, it will suggest ways of qualitatively and quantitatively evaluating Information Security Risks in such scenarios by using argumentation and/or modelling attacker business cases.",0
Industry-academia collaboration in software testing: An overview of TAIC PART 2015,"Collaboration between industry and academia in software testing leads to improvement and innovation in industry and it is the basis for achieving sustainable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. This paper presents an overview of the 10th Testing: Academic and Industrial Conference - Practice and Research Techniques (TAIC PART 2015) and its contributions.",0
How to Increase the Likelihood of Successful Transfer to Industry -- Going Beyond the Empirical,"The field of Empirical Software Engineering has undergone a much-needed expansion the last decade, and papers of all shapes and sizes are more or less mandated to have an ""empirical"" part to be published in premiere venues. The positive trend has researchers realizing the benefits, but also the investments needed, inherent to industry collaboration. That is, real practitioners, involved in the development of software intensive product, system, and service development. This paper shortly summarizes lessons learned from over ten years experience of industrial collaboration, and knowledge and technology exchange between applied researchers and industry.",0
On the Alignment of Source Code Quality Perspectives through Experimentation: An Industrial Case,"CONTEXT. Alignment is a key factor for success in many software development projects. Aligned teams are capable of bringing collaboration and positive results to companies; whereas misalignment among developers can make a conflicted environment and even lead the project to failure. OBJECTIVE. To assist developers in an embedded software development company in their conceptual alignment regarding source code quality. METHOD. In the organizational context, plan and perform a series of studies such as surveys, systematic literature review (SLR), qualitative data analysis and focus group to support the identification of conceptual misalignments among developers and establish common terminology and guidance concerning source code quality. RESULTS. The results from a survey conducted in one company showed a conceptual misalignment among developers regarding the source code quality that was triggering continuous rework during software evolution activities. Through an SLR and a qualitative analysis of code snippets, a set of evidence-based coding guidelines for readability and understandability of source code were formulated. These guidelines were evaluated and used as an instrument for aligning source code perspectives during a focus group, showing their feasibility and adequacy to the company's context. CONCLUSIONS. The use of all contextual information observed - e.g. teams' locations, software development context, and time constraints - along with the information gathered during the industry-academia collaboration was particularly important to help us appropriately chose research methods to be used, and formulate evidence-based coding guidelines that matched the company's needs and expectations. Further evaluations have to be carried out to ensure the quality impact of some guidelines proposed before using them all over the company.",0
Fast Feedback Cycles in Empirical Software Engineering Research,"Background/Context: Gathering empirical knowledge is a time consuming task and the results from empirical studies often are soon outdated by new technological solutions. As a result, the impact of empirical results on software engineering practice is often not guaranteed.Objective/Aim: In this paper, we summarise the ongoing discussion on ""Empirical Software Engineering 2.0"" as a way to improve the impact of empirical results on industrial practices. We propose a way to combine data mining and analysis with domain knowledge to enable fast feedback cycles in empirical software engineering research.Method: We identify the key concepts on gathering fast feedback in empirical software engineering by following an experience-based line of reasoning by argument. Based on the identified key concepts, we design and execute a small proof of concept with a company to demonstrate potential benefits of the approach.Results: In our example, we observed that a simple double feedback mechanism notably increased the precision of the data analysis and improved the quality of the knowledge gathered.Conclusion: Our results serve as a basis to foster discussion and collaboration within the research community for a development of the idea.",1
Technology transfer - Requirements Engineering research to industrial practice an open (ended) debate,"Technology and knowledge have been recognized as main sources of competitive advantage of corporations, industries and nations, particularly in the software domain. They have led to the creation of local ecosystems devoted to development and transfer activities, which ensure not only personal and institutional motivation/recognition, but also social and economic gains. An open (ended) debate panel is proposed in order to develop greater awareness and seek deeper understanding of such activities from Requirements Engineering research to industrial practice. The panel involves researchers and practitioners with the perspective of eliciting: (i) experiences in knowledge and technology development and transfer; (ii) awareness and effectiveness of models and patterns; and (iii) factors for having successful collaboration between research institutions and industry. The organizers also plan to run a survey during and after the conference, summarizing their conclusions in specific post-conference reports.",0
An Exploratory Study on Technology Transfer in Software Engineering,"Background: Technology transfer is one key to the success of research projects, especially in Software Engineering, where the (practical) impact of the outcome may depend not only on the reliability and feasibility of technologies, but also on their applicability to industrial settings. However, there is limited knowledge on the current state of practice and how to assess the success of technology transfer. Objective: We aim at elaborating a set of hypotheses on how technology transfer takes place in Software Engineering research projects. Method: We designed an exploratory survey with the participants of two large research projects in Germany, which involve both industrial and academic partners in the area of model driven development for embedded systems. Results: Base on the extracted respondents answers of this survey, we defined a resulting theory which is based on the following set of main hypothesis: Most of the technologies developed in research projects are not mature enough for a direct application, but need post-project customisation to fit the industrial contexts (H1). Common models that represent technology transfer as a transaction of an object from a transferor to a transferee does not fit industrial reality (H2). Additionally, technology transfer takes place without an explicit process (H3). Regarding transfer mediums, most used mediums are human-intensive (H5) and industry organisations gain new knowledge mainly within their own confines (H4). Finally the motivations that drive the transfer in industry and academia are heterogenous (H6). Conclusions: From the theoretical perspective, this theory and set of hypotheses extracted from the survey results will be further explored and tested in different follow-up activities. This initial set, however, already may serve as a basis for independent assessments from other researchers to collaboratively shed light on a how technology transfer takes place in Software Engineering research projects, which are the barriers, and how to improve the transfer into practice. From the practical perspective, our results may be used as a basis for an evaluation framework for the transfer of the developed technologies in our projects. This would also help companies in getting new developed technologies transfer easier to their specific context.",1
Software Development in Startup Companies: The Greenfield Startup Model,"Software startups are newly created companies with no operating history and oriented towards producing cutting-edge products. However, despite the increasing importance of startups in the economy, few scientific studies attempt to address software engineering issues, especially for early-stage startups. If anything, startups need engineering practices of the same level or better than those of larger companies, as their time and resources are more scarce, and one failed project can put them out of business. In this study we aim to improve understanding of the software development strategies employed by startups. We performed this state-of-practice investigation using a grounded theory approach. We packaged the results in the Greenfield Startup Model (GSM), which explains the priority of startups to release the product as quickly as possible. This strategy allows startups to verify product and market fit, and to adjust the product trajectory according to early collected user feedback. The need to shorten time-to-market, by speeding up the development through low-precision engineering activities, is counterbalanced by the need to restructure the product before targeting further growth. The resulting implications of the GSM outline challenges and gaps, pointing out opportunities for future research to develop and validate engineering practices in the startup context.",0
Industry-Academia Collaboration in Software Testing: An Overview of TAIC PART 2016,"Collaboration between industry and academia in software testing leads to improvement and innovation in industry, and it is the basis for achieving transferable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. We present an overview of the 11th Workshop on Testing: Academia-Industry Collaboration, Practice and Research Techniques (TAIC PART 2016) and its contributions.",0
Harnessing Automated Test Case Generators for GUI Testing in Industry,"Modern graphical user interfaces (GUIs) are highly dynamic and support multi-touch interactions and screen gestures besides conventional inputs via mouse and keyboard. Hence, the flexibility of modern GUIs enables countless usage scenarios and combinations including all kind of interactions. From the viewpoint of testing, this flexibility results in a combinatorial explosion of possible interaction sequences. It dramatically raises the required time and effort involved in GUI testing, which brings manual exploration as well as conventional regression testing approaches to its limits. Automated test generation (ATG) has been proposed as a solution to reduce the effort for manually designing test cases and to speed-up test execution cycles. In this paper we describe how we successfully harnessed a state-of-the-art ATG tool (Randoop) developed for code-based API testing to generate GUI test cases. The key is an adapter that transforms API calls to GUI events. The approach is the result of a research transfer project with the goal to apply ATG for testing of human machine interfaces used to control industrial machinery. In this project the ATG tool was used to generate unit test cases for custom GUI controls and system tests for exploring navigation scenarios. It helped to increase the test coverage and was able reveal new defects in the implementation of the GUI controls as well as in the GUI application.",0
Key management processes to technology transfer success,"The success rate of technology transfer from government laboratories is quite low. This paper combines findings from academic research to provide valuable managerial insights. We conclude that technology transfer factors identified so far actually relate to four management processes: project management, strategy management, innovation management, and relationship management.",0
Supporting Change Impact Analysis Using a Recommendation System: An Industrial Case Study in a Safety-Critical Context,"Change Impact Analysis (CIA) during software evolution of safety-critical systems is a labor-intensive task. Several authors have proposed tool support for CIA, but very few tools were evaluated in industry. We present a case study on ImpRec, a recommendation System for Software Engineering (RSSE), tailored for CIA at a process automation company. ImpRec builds on assisted tracing, using information retrieval solutions and mining software repositories to recommend development artifacts, potentially impacted when resolving incoming issue reports. In contrast to the majority of tools for automated CIA, ImpRec explicitly targets development artifacts that are not source code. We evaluate ImpRec in a two-phase study. First, we measure the correctness of ImpRec's recommendations by a simulation based on 12 years' worth of issue reports in the company. Second, we assess the utility of working with ImpRec by deploying the RSSE in two development teams on different continents. The results suggest that ImpRec presents about 40 percent of the true impact among the top-10 recommendations. Furthermore, user log analysis indicates that ImpRec can support CIA in industry, and developers acknowledge the value of ImpRec in interviews. In conclusion, our findings show the potential of reusing traceability associated with developers' past activities in an RSSE.",0
Requirements Engineering as Innovation Journalism: A Research Preview,"The successful launch of an innovation project depends on an attractive vision and how well the vision is supported by the complementary capabilities of the consortium partners that want to cooperate to realize the vision. Alas, for an innovator the search for the right partners and visions can be lengthy and difficult. Even though the analysis of context and problem, the identification of stakeholders, the analysis of stakeholder goals and techno-logical capabilities, and the definition of requirements belong to the cornerstones of requirements engineering, this requirements engineering problem has hardly been explored so far. In an attempt to avoid re-invention of well-tried solutions, we discovered journalism as a discipline that, as a rich body of methodical knowledge, may act as a source for the guidance of how a requirements engineer may support the launch of innovation projects. In the role of a journalist, the requirements engineer makes partners and their capabilities visible and thereby allows the parties to identify each other and meet. The transparency that develops between the parties becomes an instrument for consortia to emerge and to eventually answer calls for innovation with appropriate visions for innovation projects. This paper introduces the problem of initiating innovation projects and describes the potential role of journalism as a metaphor for addressing the problem. The paper also describes our plans in designing an innovation journalism approach that we hope will enable requirements engineers to increase innovation potential and ease the launch of projects that bring about these innovations.",0
Requirements Traceability Technologies Selection for Industry,"The ultimate goal for researchers to develop a requirements traceability (RT) technology is transferring it from academy to industry. Academic researchers and industrial practitioners both expect that more and more technologies can be transferred. However, there is always a wide gap between RT research and practice. In this thesis, I'll propose a novel model that focuses on evaluating the RT technologies transfer maturity. A reasonable maturity evaluation model is proposed to measure to what extent an academic RT technology must achieve before it is able to be transferred to industry. Based on the model, an initial progress is made in selecting a suitable RT technology for industrial practitioners.",0
Systematic Mapping of Technology-Enabled Product Innovations,"Many new products, or services offered as a product, are expected to solve customer problems in new ways or exploit available technology in new or better ways. To innovate, a company needs to have a reliable understanding of the state-of-the-art. That need concerns both, an understanding of the problems that may be addressed and the solutions that have been explored and tried so far. This paper proposes systematic mappings as a method for reviewing the state-of-the-art in a technological or application domain. The method complements bespoke and experience-based approaches by guiding the identification of repositories with information about innovation projects and the analysis and interpretation of the data provided by these repositories. The paper describes the method, demonstrates its application with an example initiated by real-world innovation need, and discusses the potential benefits and limitations of the method.",0
Industry-Academia Collaboration in Software Testing: An Overview of TAIC PART 2017,"Collaboration between industry and academia in software testing leads to improvement and innovation in industry, and it is the basis for achieving transferable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. We present an overview of the 12th Workshop on Testing: Academia-Industry Collaboration, Practice and Research Techniques (TAIC PART 2017) and its contributions.",0
Continuous Management of Design- and Run-Time Artifacts for Self-Adaptive Systems,"With the rise of smart and autonomous systems, self-adaptation plays a significant role in the capabilities of software-intensive systems. When developing and operating self-adaptive systems, a growing amount of information is required. This information forms the basis to systems' evolution and adaptation at run time, but is also used at design time to evolve and maintain the systems. To support development organizations in the future, efficient ways to manage information throughout the systems' lifecycle are needed. However, there is currently a lack of methods to continuously manage artifacts for self-adaptive systems. In our research, we aim to close this gap by developing methods and techniques to manage both design-time and run-time artifacts. We conduct empirical studies to identify practitioners' needs and challenges. Then we develop innovative solutions and technologies and evaluate them in practical scenarios.",0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,"Continuous and long-term collaboration between industry and academia is crucial to develop front-line research in context-dependent areas like software development where both practitioners and researchers are searched for data collection, analysis and results. Despite many mutual benefits, this collaboration is often challenging, not only due to different goals, but also because of different pace in providing the results. The software development industry has during the last decade aligned around and organized their development adopting agile methodologies. For the researchers, the agile methodologies are a topic for a research, rather than a means of performing the research itself. We can state a question, whether the agile methodologies can be a good common ground for enabling successful research collaboration between industry and academia? This paper reports on a longitudinal industry - academia research collaboration case, which has stepwise adapted SCRUM over a six-year period. The implementation of SCRUM and the collaboration successes and challenges are presented, and findings are discussed.",1
Supporting defect causal analysis in practice with cross-company data on causes of requirements engineering problems,"[Context] Defect Causal Analysis (DCA) represents an efficient practice to improve software processes. While knowledge on cause-effect relations is helpful to support DCA, collecting cause-effect data may require significant effort and time. [Goal] We propose and evaluate a new DCA approach that uses cross-company data to support the practical application of DCA. [Method] We collected cross-company data on causes of requirements engineering problems from 74 Brazilian organizations and built a Bayesian network. Our DCA approach uses the diagnostic inference of the Bayesian network to support DCA sessions. We evaluated our approach by applying a model for technology transfer to industry and conducted three consecutive evaluations: (i) in academia, (ii) with industry representatives of the Fraunhofer Project Center at UFBA, and (iii) in an industrial case study at the Brazilian National Development Bank (BNDES). [Results] We received positive feedback in all three evaluations and the cross-company data was considered helpful for determining main causes. [Conclusions] Our results strengthen our confidence in that supporting DCA with cross-company data is promising and should be further investigated.",0
An approach to align business and IT perspectives during the SOA services identification,"Service-oriented architectures are a widely used business practice to develop enterprise information systems. However, the current analysis and design methods consider the software engineering perspective only, what is not sufficient for a proper alignment between business and IT, resulting in demand for new approaches offering the business perspective as well. Such new approaches are required crucial to identify software services that are aligned to the business values, hence contributing to customer satisfaction. This paper describes an approach that focuses on business value modeling and uses model-driven techniques to generate the input required by current software service identification methods, thus aligning business and software perspectives. This approach was evaluated in two parts. First, a quasi-experiment evaluates the perceived efficacy of the business perspective, and a proof-of-concept tool was built to check the feasibility of generating typical inputs needed by software service identification methods. The results show a promising approach for the alignment of business and IT perspectives.",0
Piggybacking on an Autonomous Hauler: Business Models Enabling a System-of-Systems Approach to Mapping an Underground Mine,"With ever-increasing productivity targets in mining operations, there is a growing interest in mining automation. In future mines, remote controlled and autonomous haulers will operate underground guided by LiDAR (Light Detection And Ranging) sensors. We envision reusing LiDAR measurements to maintain accurate mine maps that would contribute to both safety and productivity. Extrapolating from a pilot project on reliable wireless communication in Boliden's Kankberg mine, we propose establishing a System-of-Systems (SoS) with LiDAR-equipped haulers and existing mapping solutions as constituent systems. SoS requirements engineering inevitably adds a political layer, as independent actors are stakeholders both on the system and SoS levels. We present four SoS scenarios representing different business models, discussing how development and operations could be distributed among Boliden and external stakeholders, e.g., the vehicle suppliers, the hauling company, and the developers of the mapping software. Based on eight key variation points, we compare the four scenarios from both technical and business perspectives. Finally, we validate our findings in a seminar with participants from the relevant stakeholders. We conclude that to determine which scenario is the most promising for Boliden, trade-offs regarding control, costs, risks, and innovation must be carefully evaluated.",0
Estimating Energy Impact of Software Releases and Deployment Strategies: The KPMG Case Study,"Background. Often motivated by optimization objectives, software products are characterized by different subsequent releases and deployed through different strategies. The impact of these two aspects of software on energy consumption has still to be completely understood and can be improved by carrying out ad-hoc analyses for specific software products. Aims. In this research we report on an industrial collaboration aiming at assessing the different impact that releases and deployment strategies of a software product can have on the energy consumption of its underlying hardware infrastructure. Method. We designed and performed an empirical experiment in a controlled environment. Deployment strategies, releases and use case scenarios of an industrial third-party software product were adopted as experimental factors. The use case scenarios were used as a blocking factor and adopted to dynamically load-test the software product. Power consumption and execution time were selected as response variables to measure the energy consumption. Results. We observed that both deployment strategies and software releases significantly influence the energy consumption of the hardware infrastructure. A strong interaction between the two factors was identified. The impact of such interaction highly varied depending on which use case scenario was considered, making the identification of the most frequently adopted use case scenario critical for energy optimisation. The collaboration between industry and academia has been productive for both parties, even if some practitioners manifested low interest/awareness on software energy efficiency. Conclusions. For the software product considered there is no absolute preferable release or deployment strategy with respect to energy efficiency, as the interaction of these factors has to be considered. The number of machines involved in a software deployment strategy does not simply constitute an additive effect of the energy consumption of the underlying hardware infrastructure.",0
Safety Practices in Requirements Engineering: The Uni-REPM Safety Module,"Context: Software is an important part in safety-critical system (SCS) development since it is becoming a major source of hazards. Requirements-related hazards have been associated with many accidents and safety incidents. Requirements issues tend to be mitigated in companies with high processes maturity levels since they do their business in a systematic, consistent and proactive approach. However, requirements engineers need systematic guidance to consider safety concerns early in the development process. Goal: the paper investigates which safety practices are suitable to be used in the Requirements Engineering (RE) process for SCS and how to design a safety maturity model for this area. Method: we followed the design science methodology to propose Uni-REPM SCS, a safety module for Unified Requirements Engineering Process Maturity Model (Uni-REPM). We also conducted a static validation with two practitioners and nine academic experts to evaluate its coverage, correctness, usefulness, and applicability. Results: The module has seven main processes, fourteen sub-processes and 148 practices that form the basis of safety processes maturity. Moreover, we describe its usage through a tool. Conclusions: The validation indicates a good coverage of practices and well receptivity by the experts. Finally, the module can help companies in evaluating their current practices.",0
Software-Intensive Product Engineering in Start-Ups: A Taxonomy,"Software start-ups are new companies aiming to launch an innovative product to mass markets fast with minimal resources. However, most start-ups fail before realizing their potential. Poor software engineering, among other factors, could be a significant contributor to the challenges that start-ups experience. Little is known about the engineering context in start-up companies. On the surface, start-ups are characterized by uncertainty, high risk, and minimal resources. However, such a characterization isn’t granular enough to support identification of specific engineering challenges and to devise start-up–specific engineering practices. The first step toward an understanding of software engineering in start-ups is the definition of a Start-Up Context Map—a taxonomy of engineering practices, environment factors, and goals influencing the engineering process. This map aims to support further research on the field and serve as an engineering decision support tool for start-ups. This article is part of a theme issue on Process Improvement.",0
Requirements Engineering for Safety-Critical Systems: An Interview Study with Industry Practitioners,"We have conducted in-depth interviews with experienced practitioners in the Safety-Critical Systems (SCS) domain in order to investigate several aspects related to requirements specification and safety analysis for SCS. We interviewed 19 practitioners from eleven SCS companies in different domains with the intention of verifying which approaches they use day-to-day, and what their perceptions are in relation to the approaches used to elicit, analyze, specify and validate safety requirements. The aim of this study is to obtain an in-depth understanding of how requirements engineering is carried out in companies that develop SCS.",0
Applying Automated Test Case Generation in Industry: A Retrospective,"Automated test case generation promises to reduce the high effort of manually developing and maintaining test cases, to improve the effectiveness of testing, and to speed-up testing cycles. Research on generating test cases has advanced over the past decades and today a wide range of techniques and tools are available, including studies showing their successful evaluation in real-world scenarios. We conducted a multi-firm research project on automated software testing that involved the application of automated test case generation approaches in industry projects. This paper provides a retrospective on the related activities. It reports on our observations and insights from applying automated test case generation in practice, identifies pitfalls and gaps in current research, and summarizes lessons learned from transferring software testing research results to industry.",0
On the Impact of Semantic Transparency on Understanding and Reviewing Social Goal Models,"Context: i* is one of the most influential languages in the Requirements Engineering research community. Perhaps due to its complexity and low adoption in industry, it became a natural candidate for studies aiming at improving its concrete syntax and the stakeholders' ability to correctly interpret i* models. Objectives: We evaluate the impact of semantic transparency on understanding and reviewing i* models, in the presence of a language key. Methods: We performed a quasi-experiment comparing the standard i* concrete syntax with an alternative that has an increased semantic transparency. We asked 57 novice participants to perform understanding and reviewing tasks on i* models, and measured their accuracy, speed and ease, using metrics of task success, time and effort, collected with eye-tracking and participants' feedback. Results: We found no evidence of improved accuracy or speed attributable to the alternative concrete syntax. Although participants' perceived ease was similar, they devoted significantly less visual effort to the model and the provided language key, when using the alternative concrete syntax. Conclusions: The context provided by the model and language key may mitigate the i* symbol recognition deficit reported in previous works. However, the alternative concrete syntax required a significantly lower visual effort.",0
Supporting Diagnosis of Requirements Violations in Systems of Systems,"Industrial software systems are often systems of systems (SoS) whose full behavior only emerges during operation. They therefore require monitoring techniques to observe systems and detect deviations from their requirements. The focus of existing monitoring approaches, however, is mainly on detecting violations of expected behavior, while support for diagnosing violations is typically limited or even neglected. Diagnosis is particularly challenging in SoS due to their technological heterogeneity and the diversity of development tools in use. Uncovering the root cause of a violation typically requires developers to trace violations to artifacts such as source code or requirements documents, which is difficult without detailed domain knowledge. In this paper we describe our experiences of developing a tool-supported approach facilitating the diagnosis of requirements violations in SoS. We describe how we complemented a requirements monitoring model with a system artifact model relating SoS artifacts needed for diagnosis with monitored events. We customized our approach to an industrial SoS and conducted a scenario-based walkthrough with engineers developing the SoS and engineers and researchers unfamiliar with it. The results of our evaluation have shown that our approach can significantly ease diagnosing violations in a real-world SoS.",0
Assessment of Safety Processes in Requirements Engineering,"Context: Requirements issues tend to be mitigated in organizations with high process maturity levels since they do their business in a systematic, consistent and proactive approach. In a Safety-Critical System (SCS), requirements problems have been associated with accidents and safety incidents. Objective: This work investigates which safety practices/actions are suitable to be used in the Requirements Engineering (RE) process of SCS and how to design a safety maturity model for this area. Method: we adopted different empirical techniques to propose Uni-REPM SCS, which consists of a safety module to be included in the Unified Requirements Engineering Process Maturity Model (Uni-REPM). Results: The safety module has seven main processes, 14 sub-processes and 148 safety actions describing principles and practices that form the basis of safety processes maturity. Conclusions: Preliminary validation with two practitioners and nine academic experts indicates that the safety module can help organizations to evaluate their current safety practices with respect to their RE process. Moreover, it also offers a step-wise improvement strategy to raise their safety maturity level.",0
The Automotive Virtual Verification Ecosystem: Impediments and Enablers,"We describe the benefits of, critical impediments to, and crucial enablers for virtual verification. This will provide help for overcoming difficulties and starting a constructive dialogue among ecosystem actors in the automotive industry.",0
How to Effectively Reduce Tens of Millions of Tests: An Industrial Case Study on Adaptive Random Testing,"Running and analyzing a large number of tests in an industrial scenario is labor intensive and time consuming. Hence, it is necessary to select a smaller number of tests for cost reduction as well as fault detection. For a type of nonnumeric systems, the linear-order algorithm for adaptive random testing (ART) (LART) technique is proposed by making tests evenly spread in nonnumeric input domains. To further enhance LART in the industrial scenarios where the number of input categories is too large, a new technique called category selection-based ART (CSBART), in which partial categories are selected to calculate tests' distances to guide LART, is proposed in this article. The fault-coverage effectiveness of CSBART is evaluated via an empirical study on two large scale billing systems with tens of millions of test cases, and the results demonstrate the promising performance of the proposed CSBART. We also find that, after category selection, CSBART can outperform a more complex and widespread n-per cluster sampling technique that uses K-means clustering to certain extents.",0
Practical experiences and value of applying software analytics to manage quality,"Background: Despite the growth in the use of software analytics platforms in industry, little empirical evidence is available about the challenges that practitioners face and the value that these platforms provide. Aim: The goal of this research is to explore the benefits of using a software analytics platform for practitioners managing quality. Method: In a technology transfer project, a software analytics platform was incrementally developed between academic and industrial partners to address their software quality problems. This paper focuses on exploring the value provided by this software analytics platform in two pilot projects. Results: Practitioners emphasized major benefits including the improvement of product quality and process performance and an increased awareness of product readiness. They especially perceived the semi-automated functionality of generating quality requirements by the software analytics platform as the benefit with the highest impact and most novel value for them. Conclusions: Practitioners can benefit from modern software analytics platforms, especially if they have time to adopt such a platform carefully and integrate it into their quality assurance activities.",0
A Method to Evaluate Knowledge Resources in Agile Software Development,"Background: Organizations adopting Agile Software Development (ASD) use different Knowledge Management (KM) practices to retain and share knowledge. However, it is often the case that knowledge retention is carried out in an ad-hoc way. Aims: In this study, we report our experience from proposing the Knowledge Critically Evaluation Method (KCEM) to evaluate knowledge items (KIT). Our main goal with KCEMs is to support companies to systematically retain knowledge in ASD contexts. Method: We conducted an improvement case study to develop and evaluate KCEM. This research follows the guidelines for technology transfer between industry and academia. The case and unit of analysis is Ericsson, a Swedish company that develops telecommunication solutions. Results: In this paper, we provide initial results of both lab and static validation, enriched by the lessons learned. Conclusions: The preliminary results show that KCEM is easy to understand and use, provides a different perspective on the KIT by visualizing in the criticality chart, and reduces the level of abstraction associated to a knowledge subject area.",0
Framework for Analysis of Multi-party Collaboration,"In recent years, platforms have become important for allowing ecosystems to emerge that allow users to collaborate and create unprecedented forms of innovation. For the platform provider, the ecosystem represents a massive business opportunity if the platform succeeds to make the collaborations among the users value-creating and to facilitate trust. While the requirements flow for evolving existing ecosystems is understood, it is unclear how to analyse an ecosystem that is to be. In this paper, we draw on recent work on collaboration modelling in requirements engineering and propose an integrated framework for the analysis of multi-party collaboration that is to be supported by a platform. Drawing on a real-world case, we describe how the framework is applied and the results that have been obtained with it. The results indicate that the framework was useful to understand the ecosystem context for a planned platform in the domain of artificial intelligence, allowed identification of platform requirements and offered a basis to plan validation.",0
On the Industrial Applicability of Augmented Testing: An Empirical Study,"Testing applications with graphical user Interfaces (GUI) is an important but also a time-consuming task in practice. Tools and frameworks for GUI test automation can make the test execution more efficient and lower the manual labor required for regression testing. However, the test scripts used for automated GUI-based testing still require a substantial development effort and are often reported as sensitive to change, leading to frequent and costly maintenance. The efficiency of development, maintenance, and evolution of such tests are thereby dependent on the readability of scripts and the ease-of-use of test tools/frameworks in which the test scripts are defined. To address these shortcomings in existing state-of-practice techniques, a novel technique referred to as Augmented Testing (AT) has been proposed. AT is defined as testing the System Under Test (SUT) through an Augmented GUI that superimposes information on top of the SUT GUI. The Augmented GUI can provide the user with hints, test data, or other support while also observing and recording the tester's interactions. For this study, a prototype tool, called Scout, has been used that adheres to the AT concept that is evaluated in an industrial empirical study. In the evaluation, quasi-experiments and questionnaire surveys are performed in two workshops, with 12 practitioners from two Swedish companies (Ericsson and Inceptive). Results show that Scout can be used to create equivalent test cases faster, with statistical significance, than creating automated scripts in two popular state-of-practice tools. The study concludes that AT has cost-value benefits, applies to industrial-grade software, and overcomes several deficiencies of state-of-practice GUI testing technologies in terms of ease-of-use.",0
From AMALTHEA to RCM and Back: a Practical Architectural Mapping Scheme,"This paper focuses on the mapping between two industrial architectural languages: AMALTHEA and Rubus Component Model. Both languages are heavily used within the automotive domain for the design and timing analysis of automotive software, respectively. The main contribution of this paper is a mapping scheme between the two architectural languages enabling i) the translation of an AMALTHEA architecture into a Rubus Component Model architecture where high-precision timing analysis can be performed ii) and the back-propagation of the analysis results on the AMALTHEA architecture. We validate the applicability of the proposed mapping scheme using an industrial use case from the automotive domain: the brake-by-wire system. We discuss the industrial relevance and lessons learnt of this work using expert interviews.",0
Lessons Learned on Research Co-Creation: Making Industry-Academia Collaboration Work,"How to increase the impact of software engineering research in the software industry and the society at large is a critical yet perplexing question to answer. Constrained by curtailed communication between researchers and practitioners, research conducted in a vacuum, or the ""publish or perish"" mindset, research collaborations between industry and academia often fail to deliver on the promise of creating a meaningful impact for practitioners. In an attempt to address these circumstances, this paper gives insights on applying research value co-creation to industry-academia collaboration in software engineering. We observe that the core of co-creation includes commitment, continuous engagement and alignment, aiming to produce value for both sides. Further we contend that co-creation has the potential to bridge the acknowledged research-practice collaboration gap through participative knowledge generation. Our experience stems from an eight-year long large collaborative project between a research organization and Norwegian software industry and public sector services. We suggest that for achieving research impact one needs to rethink the way industry and academia engage in and run collaborative projects. Traditional technology-transfer workflows where research is created in a lab and then pushed to industry practice do not stand the best chance of success. Instead, co-creating research with all stakeholders is likely to bring about the best research impact.",1
Using Machine Intelligence to Prioritise Code Review Requests,"Modern Code Review (MCR) is the process of reviewing new code changes that need to be merged with an existing codebase. As a developer, one may receive many code review requests every day, i.e., the review requests need to be prioritised. Manually prioritising review requests is a challenging and time-consuming process. To address the above problem, we conducted an industrial case study at Ericsson aiming at developing a tool called Pineapple, which uses a Bayesian Network to prioritise code review requests. To validate our approach/tool, we deployed it in a live software development project at Ericsson, wherein more than 150 developers develop a telecommunication product. We focused on evaluating the predictive performance, feasibility, and usefulness of our approach. The results indicate that Pineapple has competent predictive performance (RMSE = 0.21 and MAE = 0.15). Furthermore, around 82.6% of Pineapple's users believe the tool can support code review request prioritisation by providing reliable results, and around 56.5% of the users believeit helps reducing code review lead time. As future work, we planto evaluate Pineapple's predictive performance, usefulness, and feasibility through a longitudinal investigation.",0
Transferring a model-based development methodology to the automotive industry,"This paper reports on our experience in transferring an academic model-based methodology for the development of automotive software systems into an industrial integrated development environment. The transferred methodology makes use of two industrial modelling languages and provides for the development and architectural exploration of automotive system and software designs with temporal awareness. We demonstrate the usage of the transferred methodology using the brake-by-wire automotive functionality. Eventually, we describe the challenges we have faced and the lessons we have learned in performing this technology transfer.",0
Model-based Automation of Test Script Generation Across Product Variants: a Railway Perspective,"In this work, we report on our experience in defining and applying a model-based approach for the automatic generation of test scripts for product variants in software product lines. The proposed approach is the result of an effort leveraging the experiences and results from the technology transfer activities with our industrial partner Bombardier Transportation. The proposed approach employs metamodelling and model transformations for representing different testing artefacts and making their generation automatic. We demonstrate the industrial applicability and efficiency of the proposed approach using the Bombardier Transportation Aventra software product line. We observe that the proposed approach mitigates the development effort, time consumption and consistency drawbacks typical of traditional strategies.",0
Robust Machine Learning in Critical Care — Software Engineering and Medical Perspectives,"Using machine learning in clinical practice poses hard requirements on explainability, reliability, replicability and robustness of these systems. Therefore, developing reliable software for monitoring critically ill patients requires close collaboration between physicians and software engineers. However, these two different disciplines need to find own research perspectives in order to contribute to both the medical and the software engineering domain. In this paper, we address the problem of how to establish a collaboration where software engineering and medicine meets to design robust machine learning systems to be used in patient care. We describe how we designed software systems for monitoring patients under carotid endarterectomy, in particular focusing on the process of knowledge building in the research team. Our results show what to consider when setting up such a collaboration, how it develops over time and what kind of systems can be constructed based on it. We conclude that the main challenge is to find a good research team, where different competences are committed to a common goal.",0
Classification of Issue Discussions in Open Source Projects Using Deep Language Models,"Open source projects are supported by contributors located in different locations and time zones. Issues facilitate asynchronous communication among them, including bug reports, solution suggestions, questions, answers or personal communication. The discussion threads contain rich information about the requirements and the system problems, yet they may be lengthy and lack of structure; making it challenging to identify and link the relevant parts to requirements. Previous work addresses this problem by applying shallow machine learning techniques to automatically classify sentences in a discussion. We propose using the state-of-the-art transformer-based deep language models for this task. The contribution of this paper is three-fold. First, we create a benchmark for the community to ensure standardized inputs for training and testing for this problem. Second, we replicate the state-of-the-art and report the results on this benchmark. Third, we significantly outperform the state-of-the-art with our transformed-based classification approach.",0
Software test process improvement approaches: A systematic literature review and an industrial case study,"Software Test Process Improvement (STPI) approaches are frameworks that guide software development organizations to improve their software testing process. We have identified existing STPI approaches and their characteristics (such as completeness of development, availability of information and assessment instruments, and domain limitations of the approaches) using a systematic literature review (SLR). Furthermore, two selected approaches (TPI Next and TMMi) are evaluated with respect to their content and assessment results in industry. As a result of this study, we have identified 18 STPI approaches and their characteristics. A detailed comparison of the content of TPI Next and TMMi is done. We found that many of the STPI approaches do not provide sufficient information or the approaches do not include assessment instruments. This makes it difficult to apply many approaches in industry. Greater similarities were found between TPI Next and TMMi and fewer differences. We conclude that numerous STPI approaches are available but not all are generally applicable for industry. One major difference between available approaches is their model representation. Even though the applied approaches generally show strong similarities, differences in the assessment results arise due to their different model representations.",0
{TRANSFERENCIA} {TECNOL}{\'{O}}{GICA} {EN} {PROGRAMAS} P{\'{U}}{BLICOS} {DE} {COOPERACI}{\'{O}}N {UNIVERSIDAD}-{EMPRESA}. {PROPUESTA} {DE} {UN} {MODELO} {BASADO} {EN} {EVIDENCIA} {EMP}{\'{I}}{RICA},"Los retos de las políticas públicas de innovación están relacionados con la mejora de la transferencia del conocimiento y la tecnología desde la universidad y los centros de investigación a la industria, de ahí la nueva orientación de las políticas tecnológicas nacionales y de la Unión Europea. El objetivo de este trabajo es contribuir a la comprensión de los factores subyacentes al proceso de transferencia de tecnología de la universidad a la industria. En el mismo se intenta proporcionar respuestas a un número de preguntas relacionadas con los factores de éxito y las barreras que obstaculizan la transferencia de tecnología y su impacto final en la industria.",0
A systematic literature review on the industrial use of software process simulation,"Context
Software process simulation modelling (SPSM) captures the dynamic behavior and uncertainty in the software process. Existing literature has conflicting claims about its practical usefulness: SPSM is useful and has an industrial impact; SPSM is useful and has no industrial impact yet; SPSM is not useful and has little potential for industry.

Objective
To assess the conflicting standpoints on the usefulness of SPSM.

Method
A systematic literature review was performed to identify, assess and aggregate empirical evidence on the usefulness of SPSM.

Results
In the primary studies, to date, the persistent trend is that of proof-of-concept applications of software process simulation for various purposes (e.g. estimation, training, process improvement, etc.). They score poorly on the stated quality criteria. Also only a few studies report some initial evaluation of the simulation models for the intended purposes.

Conclusion
There is a lack of conclusive evidence to substantiate the claimed usefulness of SPSM for any of the intended purposes. A few studies that report the cost of applying simulation do not support the claim that it is an inexpensive method. Furthermore, there is a paramount need for improvement in conducting and reporting simulation studies with an emphasis on evaluation against the intended purpose.",0
Is effectiveness sufficient to choose an intervention?,"Context: Software Engineering (SE) research with a scientific foundation aims to influence SE practice to enable and sustain efficient delivery of high quality software. Goal: To improve the impact of SE research, one objective is to facilitate practitioners in choosing empirically vetted interventions. Method: Literature from evidence-based medicine, economic evaluations in SE and software economics is reviewed. Results: In empirical SE research, the emphasis has been on substantiating the claims about the benefits of proposed interventions. However, to support informed decision making by practitioners regarding technology adoption , we must present a business case for these interventions , which should comprise not just effectiveness, but also the evidence of cost-effectiveness. Conclusions: This paper highlights the need to investigate and report the resources required to adopt an intervention. It also provides some guidelines and examples to improve support for practitioners in decisions regarding technology adoption.",0
Requirements engineering process improvement,"In the last decade, research in requirements engineering has achieved great advances. Several methods, techniques and processes have been proposed in the literature. However, the pace of requirements engineering technology transfer has been slow. This paper presents a technology transfer project to improve the requirements engineering process in four software companies. We discuss this experience from the perspective of researchers and practitioners from one participating company.",0
Metodolog{\'{\i}}a {\'{A}}gil para la Gesti{\'{o}}n de Riesgos Inform{\'{a}}ticos,"El presente artículo presenta una metodología integral para la gestión de riesgos informáticos basándose en los estándares mundialmente aceptados como son ISO 31000 e ISO/IEC 27005, los mismos que indican los requerimientos para una gestión adecuada de riesgos; sin embargo no indican, al menos de manera clara, como se puede realizar dicha gestión. Por ello se incluyen recomendaciones y buenas prácticas de otros estándares y guías internacionales para el manejo de riesgos. Con la aplicación de la metodología planteada en una empresa industrial de alimentos, se comprueba su validez; además, el equipo de trabajo que aplicó la metodología tuvo a su disposición herramientas sugeridas que ayudaron a valorar técnicamente los riesgos según su probabilidad de ocurrencia, sus consecuencias y dimensiones de seguridad afectadas.",0
{TestDCat} 3.0: catalog of test debt subtypes and management activities,"When deadlines and resources of software projects become scarce, testing is usually in the first row to have its activities aborted or reduced; however, if defects cannot be found, product quality can be affected. In the software development process, aborted or reduced activities that can bring short-term benefits, but can be harmful to the project in the long run, are considered Technical Debt (TD) and, when the TDs impact testing activities, they are called Test Debt. Although there are several studies dealing with Test Debt, current solutions often deal with specific types of tests (e.g., exploratory and automated tests) and do not address the whole software testing process. Aiming to fill these gaps, this work then proposes a Test Debt Catalog, called TestDCat, with subtypes of Test Debts and Technical Debt management activities. This catalog is built based on the results of an empirical study, a literature review and semi-structured interviews conducted with practitioners who perform testing activities on five projects from industry. For the TestDCat evaluation, a case study is conducted in real projects in order to identify if the catalog is user-friendly and if its use helps the Test Debt management during the execution of test activities in these software development projects.",0
{TestDCat} 3.0: catalog of test debt subtypes and management activities,"When deadlines and resources of software projects become scarce, testing is usually in the first row to have its activities aborted or reduced; however, if defects cannot be found, product quality can be affected. In the software development process, aborted or reduced activities that can bring short-term benefits, but can be harmful to the project in the long run, are considered Technical Debt (TD) and, when the TDs impact testing activities, they are called Test Debt. Although there are several studies dealing with Test Debt, current solutions often deal with specific types of tests (e.g., exploratory and automated tests) and do not address the whole software testing process. Aiming to fill these gaps, this work then proposes a Test Debt Catalog, called TestDCat, with subtypes of Test Debts and Technical Debt management activities. This catalog is built based on the results of an empirical study, a literature review and semi-structured interviews conducted with practitioners who perform testing activities on five projects from industry. For the TestDCat evaluation, a case study is conducted in real projects in order to identify if the catalog is user-friendly and if its use helps the Test Debt management during the execution of test activities in these software development projects.",0
Technology Transfer Models and Elements in the University-Industry Collaboration,"Over the years, universities have been considered as research centers that seek to collaborate with industries to create innovative products. This link has generated many concepts, among them being the concept of technology transfer. The objective of this work is to present a systematic review on the technology transfer generated in university-industry collaboration (UIC). Based on a review of 66 papers, the results presented in this article include the technology transfer (TT) models presented in the literature, a description of the common elements in a transfer process, and a description of the interaction between the elements involved, through the presentation of a conceptual model of technology transfer in the context of collaboration between the university and the industry.",0
A Chatbot for Goal-Oriented Requirements Modeling,"Goal-Oriented Requirements Engineering approaches, in which the KAOS framework plays a key role, have been widely used for eliciting software requirements because they provide an easier way of communicating among stakeholders. However, the goal-oriented requirements modeling is not an easy way for novice requirements engineers. These professionals need more support in creating KAOS models. Recent studies have focused on the applicability of Artificial Intelligence techniques (e.g., Natural Language Processing – NLP) to support Requirements Engineering activities. In this sense, this paper aims to describe a way to support requirements elicitation for novice requirements engineers through the use of NLP within a chatbot. The chatbot (KAOSbot) acts as a KAOS modeling assistant. To evaluate our hypotheses about perceived efficacy from the novice requirements engineers perspective, we performed a quasi-experiment concerning KAOSbot’s perceived ease of use, perceived usefulness and intention to use. The results show that KAOSbot tool is a promising approach for specifying KAOS models because it was perceived as easy to use, useful, and the participants intend to use it in the future.",0
Contextualizing Research Evidence through Knowledge Translation in Software Engineering,"Usage of software engineering research in industrial practice is a well-known challenge. Synthesis of knowledge from multiple research studies is needed to provide evidence-based decision-support for industry. The objective of this paper is to present a vision of how a knowledge translation framework may look like in software engineering research, in particular how to translate research evidence into practice by combining contextualized expert opinions with research evidence. We adopted the framework of knowledge translation from health care research, adapted and combined it with a Bayesian synthesis method. The framework provided in this paper includes a description of each step of knowledge translation in software engineering. Knowledge translation using Bayesian synthesis intends to provide a systematic approach towards contextualized, collaborative and consensus-driven application of research results. In conclusion, this paper contributes towards the application of knowledge translation in software engineering through the presented framework. CCS CONCEPTS • Software and its engineering → Software design techniques;",1
Empirical studies for innovation dissemination,,0
Programming Language Adoption as an Epidemiological Phenomenon,"In Software Engineering, technology transfer has been faced as a peer to peer problem, concerning only the adoption and innovation agents. This approach works well when one is just seeking the adoption of a technology by a specific client, but it can not solve a common problem that is the adoption of new technologies by a large mass of potential new users. In wider context, it no longer makes sense to focus on peer to peer transfer. A new way of looking at the problem is necessary. The diffusion of innovations is more natural when it is treated as a spread of information in a community, similar to that observed in epidemics. This work proposes a paradigm shift to show that the adoption of programming languages can be formally treated as an epidemic. This shift of focus allows the dynamics of adoption of programming languages to be mathematically modeled as such, defining models that explain the communities' behavior when adopting programming languages, and allows some forecast to be made.",0
Challenges of Structured Reuse Adoption {\textemdash} Lessons Learned,"Adoption of structured reuse approaches in practice often poses multiple challenges. Research-industry collaborations are considered as suitable vehicle to mitigate adoption difficulties as well as to validate the applicability of scientific results. However, research cooperations with industry do not always live up to the expectations of either of the partners. Unfortunately for researchers and practitioners alike, insights behind the scenes of failed adoption and cooperation are often difficult to obtain. This hinders discussions on lessons learned by organizations during the adoption process and delays improvements. This paper aims to mitigate this issue by presenting lessons learned from interviews we conducted with practitioners in the context of a study on software reuse in industry. The study covered a wide range of aspects, including the process of reuse adoption. One of the participating companies had undertaken two attempts to adopt a form of structured reuse. However, both attempts did not succeed as expected. In our study, we identified tacit assumptions that were related to the encountered difficulties and present the lessons learned from the adoption approach. Furthermore , we report strategies that helped us to overcome the skepticism caused by a previous unsuccessful guided collaboration.",0
Analyze this! 145 questions for data scientists in software engineering,"In this paper, we present the results from two surveys related to data science applied to software engineering. The first survey solicited questions that software engineers would like data scientists to investigate about software, about software processes and practices, and about software engineers. Our analyses resulted in a list of 145 questions grouped into 12 categories. The second survey asked a different pool of software engineers to rate these 145 questions and identify the most important ones to work on first. Respondents favored questions that focus on how customers typically use their applications. We also saw opposition to questions that assess the performance of individual employees or compare them with one another. Our categorization and catalog of 145 questions can help researchers, practitioners, and educators to more easily focus their efforts on topics that are important to the software industry.",0
Setting quality targets for coming releases with {QUPER}: an industrial case study,"Quality requirements play a critical role in driving architectural design and are an important issue in software development.
Therefore, quality requirements need to be considered, specified, and quantified early during system analysis and not later
in the development phase in an ad-hoc fashion. This paper presents the quality performance model that estimates quality targets
in relation to market expectations as a basis for the architecting of quality requirements. The purpose of the model is to
provide concepts for qualitative reasoning of quality levels in the decision-making of setting actual targets of quality requirements
for coming releases of the product. The quality performance model is evaluated at one case company, using a market-driven
development approach, in the electronic payment-processing domain. The results show that the model is useful for supporting
early decision-making in, e.g., release planning of quality requirements.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
Research Committee: Strengthening Research by Designing for Coherence and Connections to Practice {NCTM} Research Committee,"The National Council of Teachers of Mathematics (NCTM) is committed to strengthening relations between research and practice and to the development of a coherent knowledge base that is usable in practice. The fifth of NCTM's strategic priorities states, “Bring existing research into the classroom, and identify and encourage research that addresses the needs of classroom practice” (NCTM, 2008). The need to work toward connection and coherence is not unique to the field of mathematics education. Fields such as medicine (e.g., Clancy, 2007), software engineering (e.g., Gorschek, Garre, Larsson, & Wohlin, 2006), and social work (e.g., Hess & Mullen, 1995) routinely attend to these issues. Researchers in many fields strive to find new ways or to engage more effectively through existing means to enhance coherence and connection. In a sense, this is not a goal that can be achieved definitively, but one that requires persistent engagement. In education, the constant flux of variables in the system, such as curriculum, goals for student learning, and school contexts, requires that new connections between research and practice be investigated and that old connections be reexamined. Changes in educational contexts open new territory in need of study and also challenge the coherence of explanations grounded in previous research. In this way, attention of the field to connection and coherence is neither unique to mathematics education nor an effort due solely to inadequacies of research efforts in the past.",0
Two Decades of Empirical Research on Developers{\textquotesingle} Information Needs,,0
Research-Based Innovation: A Tale of Three Projects in Model-Driven Engineering,"In recent years, we have been exploring ways to foster a closer collaboration between software engineering research and industry both to align our research with practical needs, and to increase awareness about the importance of research for innovation. This paper outlines our expe-rience with three research projects conducted in collaboration with the industry. We examine the way we collaborated with our industry part-ners and describe the decisions that contributed to the effectiveness of the collaborations. We report on the lessons learned from our experience and illustrate the lessons using examples from the three projects. The lessons focus on the applications of Model-Driven Engineering (MDE), as all the three projects we draw on here were MDE projects. Our goal from structuring and sharing our experience is to contribute to a better understanding of how researchers and practitioners can collaborate more effectively and to gain more value from their collaborations.",0
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Evaluating and strategizing the onboarding of software developers in large-scale globally distributed projects,"The combination of scale and distribution in software projects makes the onboarding of new developers problematic. To the best of our knowledge, there is no research on the relationship between onboarding strategies and the performance evolution of newcomers in large-scale, globally distributed projects. Furthermore, there are no approaches to support the development of strategies to systematically onboard developers. In this paper, we address these gaps by means of an industrial case study. We identified that the following aspects seem to be related to the observed onboarding results: the distance to mentors, the formal training approach used, the allocation of large and distributed tasks in the early stages of the onboarding process, and team instability. We conclude that onboarding must be planned well ahead and should consider avoiding the aspects mentioned above. Based on the results of this investigation, we propose a process to strategize and evaluate onboarding. To develop the process, we used business process modeling. We conducted a static validation of the proposed process utilizing interviews with experts. The static validation of the process indicates that it can help companies to deal with the challenges associated with the onboarding of newcomers through more systematic, effective, and repeatable onboarding strategies.",0
Model-based generation of test scripts across product variants: An experience report from the railway industry,,0
Enabling automated integration of architectural languages: An experience report from the automotive domain,,0
A Platform for the Automated Provisioning of Architecture Information for Large-Scale Service-Oriented Software Systems,,0
Towards a model to transfer knowledge from software engineering research to practice,"Context: Many researchers argue that Software Engineering (SE) research lacks connection with practice. Objective: We propose a model aimed at supporting researchers to transfer knowledge to SE practice. Method: This model is built upon the foundation of Rapid Reviews and Evidence Briefings. These two key elements have been proven e↵ective in other domains, such as medicine, and initial results suggest that they can play a prominent role in SE as well. Results: We discuss how to apply the model as well as possible challenges that might hinder its adoption. Conclusion: We believe that both SE practitioners and researchers could benefit from the proposed model. We expect replications and instantiations of the model conducted in the future.",1
Technology transfer oriented to sustainable development: proposal of a theoretical model based on barriers and opportunities,"<https://rdcu.be/cilt2> Until the year 2030, the objectives and targets proposed in the Agenda for Sustainable Development Goals need to be achieved, aiming to minimize various global problems. Bearing in mind this urgency, it is necessary that studies to help achieve these objectives be carried out. Therefore, the purpose of this work was to carry out a Systematic Literature Review of the technology transfer models existing in the literature, since the process can assist in promoting sustainable development, as well as possible barriers and opportunities for sustainable technology transfer processes. The results show that, despite the diversity of models available in the literature, there is an absence of a model that considers the sphere of sustainable development, and the possible barriers and opportunities in the formulation of its stages. Based on this, a conceptual Barriers and Opportunities-based model focused on sustainable development was proposed, aiming to fill the scientific gap found, thus contributing to the Sustainable Development Goals. The model has four macro steps: Plan; Enable; Implement and Evaluate, which range from identifying the technological need to documentation, registration, and feedback on implementation. As a result, the model can anticipate and address possible barriers, making use of opportunities as facilitators. Also, this research contributes to the governmental sphere, since with the use of the model it is expected that it can assist in the fulfillment of the Sustainable Development Goals.",0
"Technology Transfer, Sustainability, and Development, Worldwide and in Romania",,0
Using Bayesian Networks to Support Managing Technological Risk on Software Projects,"Risk management is essential in software project management. It includes activities such as identifying, measuring and monitoring risks. The literature presents different approaches to support software risk management. In particular, the researchers popularly used Bayesian Networks because they can be learned from data or elicited from domain experts. Even though the literature presents many Bayesian networks (BN) for software risk management, none focus on technological risk factors. Given this, this paper presents a BN for managing risks of software projects and the results of a static validation performed through a focus group with eight practitioners. As a result, the practitioners agreed that our proposed to manage technological risks of software projects using BN is valuable and easy to use. Given the successful results, we concluded that the proposed solution is promising.",0
The Role of Simulation-Based Studies in Software Engineering Research,"Several decades ago, inspired by other knowledge areas, simulation was introduced as a research method to Software Engineering. Motivated by potential benefits achieved in other areas, the software engineering community has used simulation-based studies for planning, controlling, and improving software development. However, unclear expectations from simulation-based studies, a lack of methodological support, as well as dispersed knowledge to support model building and calibration have hindered widespread adoption of simulation-based investigations. In this chapter, we delineate the role of simulation in software engineering research and compile processes and guidelines into a comprehensive life cycle. This chapter aims to guide software engineering researchers to conduct effective simulation-based studies in real-world settings.",0
Government Strategies Towards {IP} Management,"Two Brazilian stories highlight why proper IP management is important for firms to develop a competitive advantage supported on a better use of the IP institutions. The first one involves the licensing of biodegradable chemical technology developed at the Chemistry Institute of Universidad de Campinas (Brazil) successfully licensed to Contech in 2007 by its tech transfer office, Agencia de Innovación Inova Unicamp. The patented technology contributed decisively to ensuring Contech’s leadership in the market by giving her time savings, as the production of paper could go on without the need to stop the machine for maintenance. The mechanical system applied biodegradable chemicals for pulp and paper machinery that did not hold up the production process. In return, the licensing agreement increased Inova’s budget, in a win-win situation.",0
Improving continuous integration with similarity-based test case selection,"Automated testing is an essential component of Continuous Integration (CI) and Delivery (CD), such as scheduling automated test sessions on overnight builds. That allows stakeholders to execute entire test suites and achieve exhaustive test coverage, since running all tests is often infeasible during work hours, i.e., in parallel to development activities. On the other hand, developers also need test feedback from CI servers when pushing changes, even if not all test cases are executed. In this paper we evaluate similarity-based test case selection (SBTCS) on integration-level tests executed on continuous integration pipelines of two companies. We select test cases that maximise diversity of test coverage and reduce feedback time to developers. Our results confirm existing evidence that SBTCS is a strong candidate for test optimisation, by reducing feedback time (up to 92% faster in our case studies) while achieving full test coverage using only information from test artefacts themselves.",0
Bridging the gap: {SE} technology transfer into practice,"Background: Particularly during and after research projects, technology transfer into practice plays an important role for academia to get technologies into use and for industry to improve their development. Objective: Our goal was to gain more and current knowledge about how technology transfer from software engineering (SE) research into industrial practice is accomplished best and how to measure the effectiveness of this transfer. Method: We conducted a study in the context of two German research projects, covering many different organizations from industry and academia. Results: This paper presents the design of the study and the survey performed. After introducing the concept of technology transfer we used and adapted, we present preliminary results. Conclusions: We observed that traditional means such as meetings or workshops are still the most widely used mediums for technology transfer in SE. We also discovered that, even though the duration of transfer depends on the object being transferred, the average duration is three years, which is far less than previously published (~18 years).",0
Extraction of test cases procedures from textual use cases to reduce test effort,"The optimization of processes in the software development life cycle has become mandatory, since companies need to reduce the costs of their projects and shorten the time to market without affecting the quality of the product. With regards to software products, activities related to the testing process play a major role in their quality, since they assure that the product complies with the elicited requirements. However, companies usually do not perform testing activities on software projects due to financial and time constraints. These costs may be even higher in testing processes that rely on manual execution of activities, which is error-prone and can take too much time. To mitigate this situation, test automation allows the reduction of the effort required. This paper presents an experience report in a Test Factory about the use of a tool that partially automates the specification of test procedures based on use cases. The tool aims to read the textual use cases from the requirement management system, extract the test case procedures and required inputs to manual editing, and then send the test cases to the test management system. This solution is then applied to software from the telecommunications industry. This paper also presents how the tool was used and the lessons learned during the whole process.",0
Towards innovation measurement in the software industry,"In today's highly competitive business environments with shortened product and technology life cycle, it is critical for software industry to continuously innovate. This goal can be achieved by developing a better understanding and control of the activities and determinants of innovation. Innovation measurement initiatives assess innovation capability, output and performance to help develop such an understanding. This study explores various aspects relevant to innovation measurement ranging from definitions, measurement frameworks and metrics that have been proposed in literature and used in practice. A systematic literature review followed by an online questionnaire and interviews with practitioners and academics were employed to identify a comprehensive definition of innovation that can be used in software industry. The metrics for the evaluation of determinants, inputs, outputs and performance were also aggregated and categorised. Based on these findings, a conceptual model of the key measurable elements of innovation was constructed from the findings of the systematic review. The model was further refined after feedback from academia and industry through interviews.",0
An Investigation into Inner Source Software Development,"Given the value and effectiveness of open source software development to date, practitioners are keen to replicate these practices inside their respective corporations. This application of open source practices inside the confines of a corporate entity has been coined inner source software development. However, while organisations have found ways to directly benefit from revenue streams as a result of leveraging open source practices internally, the current research on inner source is scattered among different areas. Thus gaining clarity on the state-of-the-art in inner source research is challenging. In particular, there is no systematic literature review of known research to date on inner source. We address this challenge by presenting a systematic literature review that identifies, critically evaluates and integrates the findings of 29 primary studies on inner source. Case study approach is the common research approach undertaken in the area. We also identified 8 frameworks/methods, models and tools proposed in the literature to support inner source, as well as a set of benefits and challenges associated with inner source. We envision future work to perform deeper analysis and synthesis on the empirical research on inner source software development.",0
Inner source software development: Current thinking and an agenda for future research,"Context
Inner source software development (ISSD) has been viewed as an alternative approach in which organisations adopt open source software development (OSSD) practices and exploit its benefits internally.

Objective
In this paper, we aim to provide an extensive review of current research on ISSD and to establish a research agenda on this domain.

Method
The review is primarily performed using a systematic literature review protocol.

Results
We identified, critically evaluated and integrated the findings of 37 primary studies, describing 25 empirical research papers, 10 frameworks/methods, models and tools to support the implementation of inner source, as well as a set of benefits and challenges associated with ISSD.

Conclusion
This study presents four main contributions. First, the study provides an in-depth review of ISSD to date, i.e. the evolution of research across inner source, contributions of existing research developments, and theories, models and frameworks used to study inner source. Second, our review applies the OSSD approach framework as the lens to analyse ISSD. Third, the review updates the key challenges associated with ISSD from a management perspective. The final contribution is the establishment of a research agenda to advance knowledge on ISSD.",0
What can program repair learn from code review?,,0
Metodolog{\'{\i}}a Basada en Modelos en Tiempo de Ejecuci{\'{o}}n para la Construcci{\'{o}}n y Operaci{\'{o}}n de Sistemas Autoconscientes de Internet de las Cosas,"Hoy en día, uno de los desafíos tecnológicos es el desarrollo de software para sistemas de IoT, ya que operan en escenarios altamente cambiantes, siendo complejo con las metodologías de Ingeniería de Software tradicionales identificar todos los requisitos del sistema en la etapa de desarrollo. Una alternativa es incrementar su autonomía, dotándoles de capacidades de autoconsciencia con el apoyo de los modelos en tiempo de ejecución, a fin de trasladar varias de las funcionalidades que se programan durante el desarrollo al tiempo de ejecución. Este trabajo doctoral propone desarrollar una metodología basada en modelos en tiempo de ejecución para la construcción y operación de sistemas autoconscientes de IoT.",0
Empirical software engineering experts on the use of students and professionals in experiments,,0
Empirical software engineering experts on the use of students and professionals in experiments,,0
Gap between academia and industry: a case of empirical evaluation of three software testing methods,"Doing the right kind of testing has always been one of main challenging and a decisive task for industry. To choose right software testing method(s), industry needs to have an exact objective knowledge of their effectiveness, efficiency, and applicability conditions. The most common way to evaluate testing methods, for such knowledge, is with empirical studies. Reliable and comprehensive evidence can be obtained by aggregating the results of different empirical studies (family of experiments) taking into account their findings and limitations. We conducted a study to investigate the current state of the art of empirical knowledge base of three testing methods. We found that although the empirical studies conducted so far to evaluate testing methods contain many important and interesting results; however, we still lack factual and generalizable knowledge about performance and applicability conditions of testing methods(s), making it unfeasible to be readily adopted by the industry. Moreover, we tried to identify the major factors responsible for limiting academia from producing significantly reliable results having an industrial impact. We believe that besides effective and long-term academia-industry collaboration, there is a need for more systematic, quantifiable and comprehensive empirical studies (which provides scope for aggregation using rigorous techniques), mainly replications so as to create an effective and applicable knowledge base about testing methods which potentially can fill the gap between academia and industry.",0
Together We Are Stronger: Evidence-Based Reflections on Industry-Academia Collaboration in Software Testing,"For a highly relevant and applied research area like software testing industry-academia collaboration is of uttermost importance. In this paper we reflect on how industry-academia collaboration can be improved based on evidence from four empirical studies. We therefore first present four studies providing evidence on the (1) perceived level of challenges in testing activities, (2) focus areas in industrial and academic software testing conferences, (3) synergies between industrial and academic software testing conferences, as well as (4) the need for consideration of grey literature. Then, we reflect on issues, which we think can improve the link and synergies between industry and academia in software testing, i.e., research topics, guidelines and evidence, value and risk, context and scalability, action research and education as well as grey literature and open science.",1
Detecting requirements defects with {NLP} patterns: an industrial experience in the railway domain,,0
Similarity-based prioritization of test case automation,,0
Similarity-based prioritization of test case automation,,0
Quality-Aware Rapid Software Development Project: The Q-Rapids Project,"Software quality poses continuously new challenges in software development, including aspects related to both software development and system usage, which significantly impact the success of software systems. The Q-Rapids H2020 project defines an evidence-based, data-driven quality-aware rapid software development methodology. Quality requirements (QRs) are incrementally elicited, refined and improved based on data gathered from software repositories, project management tools, system usage and quality of service. This data is analysed and aggregated into quality-related key strategic indicators (e.g., development effort required to include a given QR in the next development cycle) which are presented to decision makers using a highly informative dashboard. The Q-Rapids platform is being evaluated in-premises by the four companies participating in the consortium, reporting useful lessons learned and directions for new development.",0
Workshop videos for requirements communication,"Shared understanding of requirements between stakeholders and the development team is a critical success factor for requirements engineering. Workshops are an effective means for achieving such shared understanding. Stakeholders and team representatives can meet and discuss what a planned software system should be and how it should support achieving stakeholder goals. However, some important intended recipients of the requirements are often not present in such workshops: the developers. Thus, they cannot benefit from the in-depth understanding of the requirements and of the rationales for these requirements that develops during the workshops. The simple handover of a requirements specification hardly compensates the rich requirements understanding that is needed for the development of an acceptable system. To compensate the lack of presence in a requirements workshop, we propose to record that requirements workshop on video. If workshop participants agree to be recorded, a video is relatively simple to create and can capture much more aspects about requirements and rationales than a specification document. This paper presents the workshop video technique and a phenomenological evaluation of its use for requirements communication from the perspective of software developers. The results show how the technique was appreciated by observers of the video, present positive and negative feedbacks from the observers, and lead to recommendations for implementing the technique in practice.",0
Research on effectiveness of technology transfer in technology alliances: evidence from Turkish {SMEs},"Many SMEs homed in newly industrialised countries are successful international players despite limited technological infrastructure and R&D resources. This study bridges a gap in the extant literature by examining the relationships between characteristics of partnership relationships, knowledge sharing and the effectiveness of technology transfer in partnerships between SMEs in developing countries and firms from developed countries. By studying data from Turkish SMEs and using partial least squares structural equation modelling, we find that explicit knowledge sharing forms the basis of technology transfer. Moreover, our findings demonstrate that explicit knowledge sharing is strongly contingent upon formalised technical support while trust and technical support seemed to be important antecedents of tacit knowledge sharing.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Experience-based guidelines for effective and efficient data extraction in systematic reviews in software engineering,"To systematically collect evidence and to structure a given area in software engineering (SE), Systematic Literature Reviews (SLR) and Systematic Mapping (SM) studies have become common. Data extraction is one of the main phases (activities) when conducting an SM or an SLR, whose objective is to extract required data from the primary studies and to accurately record the information researchers need to answer the questions of the SM/SLR study. Based on experience in a large number of SM/SLR studies, we and many other researchers have found the data extraction in SLRs to be time consuming and error-prone, thus raising the real need for heuristics and guidelines for effective and efficient data extraction in these studies, especially to be learnt by junior and young researchers. As a 'guideline' paper, this paper contributes a synthesized list of challenges usually faced during SLRs' data extraction phase and the corresponding solutions (guidelines). For our synthesis, we consider two data sources: (1) the pool of 16 SLR studies in which the authors have been involved in, as well as (2) a review of challenges and guidelines in the existing literature. Our experience in utilizing the presented guidelines in the near past have helped our junior colleagues to conduct data extractions more effectively and efficiently.",0
Multi-objective regression test selection in practice: An empirical study in the defense software industry,,0
Characterizing industry-academia collaborations in software engineering: evidence from 101 projects,,1
Test Automation with the Gauge Framework: Experience and Best Practices,"While Behavior-driven development (BDD) tools such as Cucumber are powerful tools for automated testing, they have certain limitations. For example, they often enforce strict syntax for test cases, like the “Given-When-Then” format, which may not always be easy to write for a given test case. A new test automation framework named Gauge (gauge.org) addresses that limitation since it does not prescribe the BDD testing process with a strict syntax. In Gauge, writing a test case is as easy as writing down the flow of test cases in several itemized sentences in a natural language, like English. In the context of Testinium (testinium.com), a large software testing company which provides software testing services, tools and solutions to a large number of clients, we have actively used the Gauge framework since 2018 to develop large automated front-end test suites for several large web applications. In this paper/talk, the speakers will share several examples and best practices of developing automated tests in natural-language requirements using the Gauge framework. By learning from the ideas presented in the talk, readers (attendees) will be able to consider applying the Gauge framework in their own test automation projects.",0
Model-based testing in practice: An experience report from the web applications domain,"In the context of a software testing company, we have deployed the model-based testing (MBT) approach to take the company’s test automation practices to higher levels of maturity and capability. We have chosen, from a set of open-source/commercial MBT tools, an open-source tool named GraphWalker, and have pragmatically used MBT for end-to-end test automation of several large web and mobile applications under test. The MBT approach has provided, so far in our project, various tangible and intangible benefits in terms of improved test coverage (number of paths tested), improved test-design practices, and also improved real-fault detection effectiveness. The goal of this experience report (applied research report), done based on “action research”, is to share our experience of applying and evaluating MBT as a software technology (technique and tool) in a real industrial setting. We aim at contributing to the body of empirical evidence in industrial application of MBT by sharing our industry-academia project on applying MBT in practice, the insights that we have gained, and the challenges and questions that we have faced and tackled so far. We discuss an overview of the industrial setting, provide motivation, explain the events leading to the outcomes, discuss the challenges faced, summarize the outcomes, and conclude with lessons learned, take-away messages, and practical advices based on the described experience. By learning from the best practices in this paper, other test engineers could conduct more mature MBT in their test projects.",0
Outsourced innovation in {SMES}: a field study of R{\&}amp$\mathsemicolon$amp$\mathsemicolon$D units in Spain,"SME innovation strategy and motivation has become one of the most challenging subjects of innovation policy. New innovation models proposed recently have captured the attention of policy makers. However, these models seem for the most part to be applicable to medium-sized or large enterprises. The objective of this paper is to analyse the open innovation model in the case of outsourced cooperative R&D in SMEs. Although the driving forces for outsourcing innovation in SMEs are in some respects similar to those for large firms, others are linked to lack of resources, but both have in common the pursuit of efficiency in R&D and technology transfer. This paper is based on an empirical study of open innovation in SMEs and proposes a model for analysing the critical elements which influence performance and strategic alignment between R&D performers and their partners (in most cases, SMEs).",0
Industry evaluation of the Requirements Abstraction Model,"Software requirements are often formulated on different levels and hence they are difficult to compare to each other. To address
this issue, a model that allows for placing requirements on different levels has been developed. The model supports both abstraction
and refinement of requirements, and hence requirements can both be compared with each other and to product strategies. Comparison
between requirements will allow for prioritization of requirements, which in many cases is impossible if the requirements
are described on different abstraction levels. Comparison to product strategies will enable early and systematic acceptance
or dismissal of requirements, minimizing the risk for overloading. This paper presents an industrial evaluation of the model.
It has been evaluated in two different companies, and the experiences and findings are presented. It is concluded that the
requirements abstraction model provides helpful improvements to the industrial requirements engineering process.",0
A large-scale empirical study of practitioners{\textquotesingle} use of object-oriented concepts,"We present the first results from a survey carried out over
the second quarter of 2009 examining how theories in objectoriented design are 
understood and used by software developers.
We collected 3785 responses from software developers
world-wide, which we believe is the largest survey of its kind.
We targeted the use of encapsulation, class size as measured by number of 
methods, and depth of a class in the inheritance hierarchy. We found that, 
while overall practitioners followed advice on encapsulation, there was some 
variation of adherence to it. For class size and depth there was substantially 
less agreement with expert advice. In addition, inconsistencies were found 
within the use and perception of object-oriented concepts within the 
investigated group of developers. The results of this survey has deep reaching 
consequences for both practitioners and researchers as they highlight and 
confirm central issues.",0
Introduction of a process maturity model for market-driven product management and requirements engineering,"The area of software product development of software intensive products has received much attention, especially in the area of requirements engineering and product management. Many companies are faced with new challenges when operating in an environment where potential requirements number in thousands or even tens of thousands, and where a product does not have a customer, but any number of customers or markets. The development organization carries not only all the costs of development, but also takes all the risks. In this environment traditional bespoke requirements engineering, together with traditional process assessment and improvement models fall short as they do not address the unique challenges of a market-driven environment. This paper introduces the Market-driven Requirements Engineering Process Model, aimed at enabling process improvement and process assurance for organizations faced with these new challenges. The model is also validated in the industry through three case studies where the model is used for process assessment and improvement suggestion. Initial results show that the model is appropriate for process improvement for organizations operating in a market-driven environment. In addition, the model was designed to be light weight in terms of low cost and thus adapted not only for large organizations but suitable for small and medium enterprises as well. Copyright © 2011 John Wiley & Sons, Ltd.",0
On the use of software design models in software development practice: An empirical investigation,"Research into software design models in general, and into the UML in particular, focuses on answering the question how design models are used, completely ignoring the question if they are used. There is an assumption in the literature that the UML is the de facto standard, and that use of design models has had a profound and substantial effect on how software is designed by virtue of models giving the ability to do model-checking, code generation, or automated test generation. However for this assumption to be true, there has to be significant use of design models in practice by developers.
This paper presents the results of a survey summarizing the answers of 3785 developers answering the simple question on the extent to which design models are used before coding. We relate their use of models with (i) total years of programming experience, (ii) open or closed development, (iii) educational level, (iv) programming language used, and (v) development type.
The answer to our question was that design models are not used very extensively in industry, and where they are used, the use is informal and without tool support, and the notation is often not UML. The use of models decreased with an increase in experience and increased with higher level of qualification. Overall we found that models are used primarily as a communication and collaboration mechanism where there is a need to solve problems and/or get a joint understanding of the overall design in a group. We also conclude that models are seldom updated after initially created and are usually drawn on a whiteboard or on paper.",0
Third Generation Industrial Co-production in Software Engineering,"Industry-academia collaboration is one of the cornerstones of empirical software engineering. The role of researchers should be developing new practices and principles that enable industry in meeting the engineering challenges today and in the future. This chapter describes the third generation of industrial co-production in software engineering that includes seven steps. The co-production model and experiences associated with its use represent deep and long-term co-production with over thirty companies, many of which are still active partners in SERL",1
Solving Problems or Enabling Problem-Solving? from Purity in Empirical Software Engineering to Effective Co-production (Invited Keynote),"Studying and collaborating with any software-intensive organization demands for excellence in empirical software engineering research. The ever-growing complexity and context-dependency of software products, however, demands for more pragmatic and solution-focused research. This is a great opportunity but it also conflicts with the traditional quest for “purity” in research and a very narrow focus of the work. In this short positioning, we elaborate on challenges which emerge from academia-industry collaborations and discuss touch upon pragmatic ways of approaching them along the co-production model which emerged from SERL Sweden.",0
"Modeling and Simulation as a Service infrastructure capabilities for discovery, composition and execution of simulation services","Modeling and Simulation as a Service (MSaaS) embodies the idea that simulations should be composed quickly for the task at hand from loosely coupled shared components, simulation services, in a cloud-based environment. These simulations are then offered, as composed simulation services, to human and technical consumers. Instrumental to this, is functionality that lets a simulation operator discover and compose simulation services and execute the composition. We describe this functionality in terms of what we call MSaaS infrastructure capabilities. Following the idea of stepwise refinement, the discovery and composition of simulation services can be done at design time using implementation-independent information about simulation services and at implementation time using implementation-specific information about simulation services. The execution environment can also be set up at design time and at implementation time. We therefore describe the MSaaS infrastructure capabilities in terms of how they are used on both implementation-independent and implementation-specific service information. By doing these elaborations, we intend to gain greater insight into how to perform simulation service discovery, composition, and execution. We conclude that although much of the required functionality for a MSaaS infrastructure is available through existing platforms and frameworks, it is necessary to offer this functionality as services, alongside (composed) simulation services, to fulfill the MSaaS vision.",0
University-industry technology transfer models: an empirical analysis,"The challenge of public innovation policies are related with the transfer of technology from the university to the industry. The aim of this paper is to contribute to the understanding of the underlying factors in the process of transferring technology from university to industry. Findings point to strategic importance of critical factors as the definition of common objectives, cooperation, motivation, and the elimination of technical and legal barriers. These challenges must have implications in the incorporation of cooperative aspects of research projects in the design of public innovation policies.",0
The Role of User Guidance in the Industrial Adoption of MDE Approach,"Model-Driven Engineering (MDE) has emerged as an actively researched and established approach for next generation control application development. Technology transfer to the industry is a topical research problem. Since most professional factory process control engineers do not have computer science backgrounds, there is an urgent need for studies of the role of user guidance in the professional learning, and thus, of industrial adoption of MDE approaches. In this study professionals were invited to a hands-on assessment of the AUKOTON MDE approach for factory process control engineering. Qualitative empirical material was collected and analyzed to identify the role of user guidance in the context of other factors impacting industrial adoption. Challenges in adoption that could be solved by user guidance were identified with the theory of organizational knowledge creation (SECI) model.",0
Scalable Software Testing and Verification for Industrial-Scale Systems: The Challenges,,0
When Traceability Goes Awry: an Industrial Experience Report,,0
Software Startups - A Research Agenda,,0
Semantic Knowledge Management System to Support Software Engineers: Implementation and Static Evaluation through Interviews at Ericsson,"Background: In large-scale corporations in the software engineering context information overload problems occur as stakeholders continuously produce useful information on process life-cycle issues, matters related to specific products under development, etc. Information overload makes finding relevant information (e.g., how did the company apply the requirements process for product X?) challenging, which is in the primary focus of this paper. Contribution: In this study the authors aimed at evaluating the ease of implementing a semantic knowledge management system at Ericsson, including the essential components of such systems (such as text processing, ontologies, semantic annotation and semantic search). Thereafter, feedback on the usefulness of the system was collected from practitioners. Method: A single case study was conducted at a development site of Ericsson AB in Sweden. Results: It was found that semantic knowledge management systems are challenging to implement, this refers in particular to the implementation and integration of ontologies. Specific ontologies for structuring and filtering are essential, such as domain ontologies and ontologies distinct to the organization. Conclusion: To be readily adopted and transferable to practice, desired ontologies need to be implemented and integrated into semantic knowledge management frameworks with ease, given that the desired ontologies are dependent on organizations and domains.",0
Capturing cost avoidance through reuse,,0
Capturing cost avoidance through reuse,,0
Adapting Behavior Driven Development ({BDD}) for large-scale software systems,"Context
Large-scale software projects require interaction between many stakeholders. Behavior-driven development (BDD) facilitates collaboration between stakeholders, and an adapted BDD process can help improve cooperation in a large-scale project.

Objective
The objective of this study is to propose and empirically evaluate a BDD based process adapted for large-scale projects.

Method
A technology transfer model was used to propose a BDD based process for large-scale projects. We conducted six workshop sessions to understand the challenges and benefits of BDD. Later, an industrial evaluation was performed for the process with the help of practitioners.

Results
From our investigations, understanding of a business aspect of requirements, their improved quality, a guide to system-level use-cases, reuse of artifacts, and help for test organization are found as benefits of BDD. Practitioners identified the following challenges: specification and ownership of behaviors, adoption of new tools, the software projects’ scale, and versioning of behaviors. We proposed a process to address these challenges and evaluated the process with the help of practitioners.

Conclusion
The evaluation proved that BDD could be adapted and used to facilitate interaction in large-scale software projects in the software industry. The feedback from the practitioners helped in improving the proposed process.",0
Technology transfer decision support in requirements engineering research: a systematic review of {REj},"One of the main goals of an applied research field such as requirements engineering is the transfer of research results to
industrial use. To promote industrial adoption of technologies developed in academia, researchers need to provide tangible
evidence of the advantages of using them. This can be done through industry validation, enabling researchers to test and validate
technologies in a real setting with real users and applications. The evidence obtained, together with detailed information
on how the validation was conducted, offers rich decision support material for industrial practitioners seeking to adopt new
technologies. This paper presents a comprehensive systematic literature review of all papers published in the Requirements
Engineering journal containing any type of technology evaluation. The aim is to gauge the support for technology transfer,
i.e., to what degree industrial practitioners can use the reporting of technology evaluations in the journal as decision support 
for adopting the technologies in industrial practice. Findings show that very few evaluations offer full technology transfer 
support, i.e., have a realistic scale, application or subjects. The major improvement potential concerning support for technology
transfer is found to be the subjects used in the evaluations. Attaining company support, including support for using practitioners
as subjects, is vital for technology transfer and for researchers seeking to validate technologies.",0
A method for evaluating rigor and industrial relevance of technology evaluations,"One of the main goals of an applied research field such as software engineering is the transfer and widespread use of research
results in industry. To impact industry, researchers developing technologies in academia need to provide tangible evidence
of the advantages of using them. This can be done trough step-wise validation, enabling researchers to gradually test and
evaluate technologies to finally try them in real settings with real users and applications. The evidence obtained, together
with detailed information on how the validation was conducted, offers rich decision support material for industry practitioners
seeking to adopt new technologies and researchers looking for an empirical basis on which to build new or refined technologies.
This paper presents model for evaluating the rigor and industrial relevance of technology evaluations in software engineering.
The model is applied and validated in a comprehensive systematic literature review of evaluations of requirements engineering
technologies published in software engineering journals. The aim is to show the applicability of the model and to characterize
how evaluations are carried out and reported to evaluate the state-of-research. The review shows that the model can be applied
to characterize evaluations in requirements engineering. The findings from applying the model also show that the majority
of technology evaluations in requirements engineering lack both industrial relevance and rigor. In addition, the research
field does not show any improvements in terms of industrial relevance over time.",0
{PRACTICE} {SELECTION} {FRAMEWORK},"Knowledge management (KM) in software engineering and software process improvement (SPI) are challenging. Most existing KM and SPI frameworks are too expensive to deploy or do not take an organization's specific needs or knowledge into consideration. There is thus a need for scalable improvement approaches that leverage knowledge already residing in the organizations.
This paper presents the Practice Selection Framework (PSF), an Experience Factory approach, enabling lightweight experience capture and use by utilizing postmortem reviews. Experiences gathered concern performance and applicability of practices used in the organization, gained from concluded projects. Project managers use these as decision support for selecting practices to use in future projects, enabling explicit knowledge transfer across projects and the development organization as a whole. Process managers use the experiences to determine if there is potential for improvement of practices used in the organization. This framework was developed and subsequently validated in industry to get feedback on usability and usefulness from practitioners. The validation consisted of tailoring and testing the framework using real data from the organization and comparing it to current practices used in the organization to ensure that the approach meets industry needs. The results from the validation are encouraging and the participants' assessment of PSF and particularly the tailoring developed was positive.",0
Representing software project vision by means of video: A quality model for vision videos,"Establishing a shared software project vision is a key challenge in Requirements Engineering (RE). Several approaches use videos to represent visions. However, these approaches omit how to produce a good video. This missing guidance is one crucial reason why videos are not established in RE. We propose a quality model for videos representing a vision, so-called vision videos. Based on two literature reviews, we elaborate ten quality characteristics of videos and five quality characteristics of visions which together form a quality model for vision videos that includes all 15 quality characteristics. We provide two representations of the quality model: (a) a hierarchical decomposition of vision video quality into the quality characteristics and (b) a mapping of these characteristics to the video production and use process. While the hierarchical decomposition supports the evaluation of vision videos, the mapping provides guidance for video production. In an evaluation with 139 students, we investigated whether the 15 characteristics are related to the overall quality of vision videos perceived by the subjects from a developer’s the point of view. Six characteristics (video length, focus, prior knowledge, clarity, pleasure, and stability) correlated significantly with the likelihood that the subjects perceived a vision video as good. These relationships substantiate a fundamental relevance of the proposed quality model. Therefore, we conclude that the quality model is a sound basis for future refinements and extensions.",0
A Conceptual {UX}-Aware Model of Requirements,"User eXperience (UX) is becoming increasingly important for success of software products. Yet, many companies still face various challenges in their work with UX. Part of these challenges relate to inadequate knowledge and awareness of UX and that current UX models are commonly not practical nor well integrated into existing Software Engineering (SE) models and concepts. Therefore, we present a conceptual UX-aware model of requirements for software development practitioners. This layered model shows the interrelation between UX and functional and quality requirements. The model is developed based on current models of UX and software quality characteristics. Through the model we highlight the main differences between various requirement types in particular essentially subjective and accidentally subjective quality requirements. We also present the result of an initial validation of the model through interviews with 12 practitioners and researchers. Our results show that the model can raise practitioners' knowledge and awareness of UX in particular in relation to requirement and testing activities. It can also facilitate UX-related communication among stakeholders with different backgrounds.",0
A systematic review of domain analysis solutions for product lines,,0
A Controlled Experiment of a Method for Early Requirements Triage Utilizing Product Strategies,,0
The contextual nature of innovation {\textendash} An empirical investigation of three software intensive products,"Context
New products create significant opportunities for differentiation and competitive advantage. To increase the chances of new product success, a universal set of critical activities and determinants have been recommended. Some researchers believe, however, that these factors are not universal, but are contextual.
Objective: This paper reports innovation processes followed to develop three software intensive products for understanding how and why innovation practice is dependent on innovation context.

Method
This paper reports innovation processes and practices with an in-depth multi-case study of three software product innovations from Ericsson, IBM, and Rorotika. It describes the actual innovation processes followed in the three cases and discusses the observed innovation practice and relates it to state-of-the-art.

Results
The cases point to a set of contextual factors that influence the choice of innovation activities and determinants for developing successful product innovations. The cases provide evidence that innovation practice cannot be standardized, but is contextual in nature.

Conclusion
The rich description of the interaction between context and innovation practice enables future investigations into contextual elements that influence innovation practice, and calls for the creation of frameworks enabling activity and determinant selection for a given context – since one size does not fit all.",0
Force-Torque Control Methodology for Industrial Robots Applied on Finishing Operations,"The paper deals with the force-torque control methodology for industrial robots that can be more or less applied on a variety
of industrial applications such as grinding, drilling, automatic assembly or other applications where the key aspect is to
control the physical contact between a tool and a workpiece mounted on the robot gripper or vice versa. In other words, contact
forces and respective moments need to be controlled in real-time. The experimental set-up is based mainly on a KUKA robot
(KR3, KR 16), FTC sensor (SCHUNK FTC-050), external PLC system (Embedded PC Beckhoff) for main control structures and other
devices. Main practical results are concerned with determining the contact between a workpiece, grasped in the robot gripper,
and the surface while maintaining a constant force during robot motion.",0
Development of Framework for an Integrated Model for Technology Transfer,,0
Optimization of the Technology Transfer Process Using Gantt Charts and Critical Path Analysis Flow Diagrams: Case Study of the Korean Automobile Industry,"This research is focused on the technology transfer process in the automobile industry using project management tools. The aim of this research is the development of a technology-transfer model using Gantt charts and Critical Path Analysis flow diagrams to achieve a sustainable planning process in the global environment. To achieve this goal, the authors use Gantt charts and Critical Path Analysis flow diagrams. The hypothesis and three research questions are presented, which suggest a relationship between project management tools and the sustainable planning process of technology transfer. During the research, we use the case study of the Korean automobile industry as an excellent example of the technology-transfer process in global markets. A single project of technology transfer is discussed: the technology knowledge transfer from Korean headquarters to a Russian manufacturing subsidiary (Hyundai Motor Corporation). Quantitative data were collected through the open resources of the corporation; the qualitative data were analyzed through a case study and model parameter evaluation. The significant result that the combination of Gantt Charts and Critical Path Analysis flow diagrams methods improves the planning process for technology-transfer projects was found in this survey. It is noticed that (a) it is useful to apply project-management tools for technology transferring models; (b) Gantt Charts and Critical Path Analysis flow diagrams have a sustainable impact on technology transfer projects; and (c) critical paths and operational reserves in network diagrams help to optimize the planning process for technology transfer.",0
Towards a Methodology for Participant Selection in Software Engineering Experiments,"Background. Software Engineering (SE) researchers extensively perform experiments with human subjects. Well-defined samples are required to ensure external validity. Samples are selected purposely or by convenience, limiting the generalizability of results.

Objective. We aim to depict the current status of participants selection in empirical SE, identifying the main threats and how they are mitigated. We draft a robust approach to participants' selection.

Method. We reviewed existing participants' selection guidelines in SE, and performed a preliminary literature review to find out how participants' selection is conducted in SE in practice.

Results. We outline a new selection methodology, by 1) defining the characteristics of the desired population, 2) locating possible sources of sampling available for researchers, and 3) identifying and reducing the ""distance'' between the selected sample and its corresponding population.

Conclusion. We propose a roadmap to develop and empirically validate the selection methodology.",0
Motivating the contributions: An Open Innovation perspective on what to share as Open Source Software,"Open Source Software (OSS) ecosystems have reshaped the ways how software-intensive firms develop products and deliver value to customers. However, firms still need support for strategic product planning in terms of what to develop internally and what to share as OSS. Existing models accurately capture commoditization in software business, but lack operational support to decide what contribution strategy to employ in terms of what and when to contribute. This study proposes a Contribution Acceptance Process (CAP) model from which firms can adopt contribution strategies that align with product strategies and planning. In a design science influenced case study executed at Sony Mobile, the CAP model was iteratively developed in close collaboration with the firm's practitioners. The CAP model helps classify artifacts according to business impact and control complexity so firms may estimate and plan whether an artifact should be contributed or not. Further, an information meta-model is proposed that helps operationalize the CAP model at the organization. The CAP model provides an operational OI perspective on what firms involved in OSS ecosystems should share, by helping them motivate contributions through the creation of contribution strategies. The goal is to help maximize return on investment and sustain needed influence in OSS ecosystems.",0
"What to share, when, and where: balancing the objectives and complexities of open source software contributions","Context
Software-intensive organizations’ rationale for sharing Open Source Software (OSS) may be driven by both idealistic, strategic and commercial objectives, and include both monetary as well as non-monetary benefits. To gain the potential benefits, an organization may need to consider what they share and how, while taking into account risks, costs and other complexities.

Objective
This study aims to empirically investigate objectives and complexities organizations need to consider and balance between when deciding on what software to share as OSS, when to share it, and whether to create a new or contribute to an existing community.

Method
A multiple-case study of three case organizations was conducted in two research cycles, with data gathered from interviews with 20 practitioners from these organizations. The data was analyzed qualitatively in an inductive and iterative coding process.

Results
12 contribution objectives and 15 contribution complexities were found. Objectives include opportunities for improving reputation, managing suppliers, managing partners and competitors, and exploiting externally available knowledge and resources. Complexities include risk of loosing control, risk of giving away competitive advantage, risk of creating negative exposure, costs of contributing, and the possibility and need to contribute to an existing or new community.

Conclusions
Cross-case analysis and interview validation show that the identified objectives and complexities offer organizations a possibility to reflect on and adapt their contribution strategies based on their specific contexts and business goals.",0
On Evidence-Based Risk Management in Requirements Engineering,"Background: The sensitivity of Requirements Engineering (RE) to the context makes it difficult to efficiently control problems therein, thus, hampering an effective risk management devoted to allow for early corrective or even preventive measures. Problem: There is still little empirical knowledge about context-specific RE phenomena which would be necessary for an effective context-sensitive risk management in RE. Goal: We propose and validate an evidence-based approach to assess risks in RE using cross-company data about problems, causes and effects. Research Method: We use survey data from 228 companies and build a probabilistic network that supports the forecast of context-specific RE phenomena. We implement this approach using spreadsheets to support a light-weight risk assessment. Results: Our results from an initial validation in 6 companies strengthen our confidence that the approach increases the awareness for individual risk factors in RE, and the feedback further allows for disseminating our approach into practice.",0
Artifact Compatibility for Enabling Collaboration in the Artificial Intelligence Ecosystem,Different types of software components and data have to be combined to solve an artificial intelligence challenge. An emerging marketplace for these components will allow for their exchange and distribution. To facilitate and boost the collaboration on the marketplace a solution for finding compatible artifacts is needed. We propose a concept to define compatibility on such a marketplace and suggest appropriate scenarios on how users can interact with it to support the different types of required compatibility. We also propose an initial architecture that derives from and implements the compatibility principles and makes the scenarios feasible. We matured our concept in focus group workshops and interviews with potential marketplace users from industry and academia. The results demonstrate the applicability of the concept in a real-world scenario.,0
Transferring interactive search-based software testing to industry,,0
"Models, Processes, and Roles of Universities in Technology Transfer Management: A Systematic Review",,0
Industry-Academia Research Collaborations During and After {COVID}-19,"There exists a long-standing challenge of building successful research collaborations between industry and academia in software engineering. There are multiple reasons contributing to this issue, including different timelines, impact metrics, expectations, and perceptions of researchers and practitioners, altogether leading to the issue known as the industryacademia collaboration gap. After the onset of the COVID-19 pandemic, most researchers and practitioners were sent to work from home, relying on virtual collaboration with their peers, which might have given rise to an even wider industry-academia collaboration gap. At the 8th International Workshop on Software Engineering Research and Industrial Practice, held virtually at the International Conference on Software Engineering 2021, we investigate the impact that working from home has had on research collaborations between industry and academia. We also take a look at how remote work may change research collaborations in the future. In this report, we present takeaways from keynote talks on this matter, share insights from the panel of six experts on the topic of industry-academia collaborations, and finally summarize findings from related paper presentations.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
Industry-Academy Collaboration in Agile Methodology: Preliminary Findings of a Systematic Literature Review,,0
Practical experiences in designing and conducting empirical studies in industry-academia collaboration,"More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success.",0
Continuous and collaborative technology transfer: Software engineering research with real-time industry impact,,1
{LoCo} {CoCo}: Automatically constructing coordination and communication networks from model-based systems engineering data,"Context: Communication and coordination are essential ingredients to successful requirements and software engineering. However, especially in large organisations, it is difficult to establish and maintain communication channels.
Objective: In order to facilitate communication, we investigate automatic construction of social network models from existing requirements and systems engineering models.
Method: We conducted a design science research study in three iterative cycles at a large automotive company, and evaluated the outcome based on 15 interviews with practitioners and a survey with 12 participants.
Results: The resulting approach, denoted LoCo CoCo, automatically creates and visualises social networks based on selected systems engineering components of real-life, productive systems engineering models. Our results indicate that automatic construction and visualisation of social network models could be feasible and useful to overcome existing communication challenges.
Conclusion: Despite a lack of quality in existing social data at the case company, practitioners found LoCo CoCo potentially helpful to overcome existing communication challenges. Additionally, the visualisation could trigger practitioners to keep their social data up to date.",0
Determining a core view of research quality in empirical software engineering,"Context
Research quality is intended to appraise the design and reporting of studies. It comprises a set of standards such as methodological rigor, practical relevance, and conformance to ethical standards. Depending on the perspective, different views of importance are given to the standards for research quality

Objective
To investigate the suitability of a conceptual model of research quality to Software Engineering (SE), from the perspective of researchers engaged in Empirical Software Engineering (ESE) research, in order to understand the core value of research quality

Method
We conducted a mixed-methods approach with two distinct group perspectives: (i) a research group; and (ii) the empirical SE research community. Our data collection approach comprised a questionnaire survey and a complementary focus group. We carried out a hierarchical voting prioritization to collect relative values for importance of standards for research quality

Results
In the context of this research, ‘internally valid’, ‘relevant research idea’, and ‘applicable results’ are perceived as the core standards for research quality in empirical SE. The alignment at the research group level was higher compared to that at the community level

Conclusion
The conceptual model was seen to express fairly the standards for research quality in the SE context. It presented limitations regarding its structure and components’ description, which resulted in an updated model.",0
Safety Evidence Traceability: Problem Analysis and Model,"[Context and motivation] Safety evidence plays an important role in gaining confidence in the safe operation of a system in a given context. For a large system, it is necessary to provide information about thousands of artefacts that might be used as evidence and about the relationships among themselves and also with other safety assurance assets. [Question/problem] Past research has only addressed some needs of traceability in safety-critical systems and thus has not provided a complete picture of safety evidence traceability. Lack of knowledge and awareness of these needs can result in poor evidence management and lead to certification risks. [Principal ideas/results] This paper aims to provide a broad overview of safety evidence traceability needs for practice and its associated challenges. We also propose a safety evidence traceability model, which has been validated with data from real-world critical systems. [Contribution] We discuss the motivation and challenges for safety evidence traceability, and present the various traces that need to be captured and maintained. This information can help researchers to shape future research based on industry needs and can help practitioners to gain a deeper understanding and a wider knowledge of safety evidence traceability, thereby facilitating safety assurance and certification.",0
{TECHNOLOGY} {TRANSFER} {RISK} {MANAGEMENT} {IN} {THE} {CONDITIONS} {OF} {SCIENTIFIC} {INTERNATIONALISATION},"In times of globalisation and post-pandemic, it is the availability of advanced technologies , their effective use is a determining factor in economic growth. The process of transferring innovative technologies is associated with a significant level of risk, which negatively affects the economic, social and technical, and technological development of the economy of any country in the world. Thus, the study aims to develop an algorithm for managing key risks that arise in the exchange of technology in the scientific and educational environment in the context of the internationalisation of science. In turn, the risk analysis became the basis for developing proposals to eliminate probabilistic barriers, such as limited information, shortage of qualified personnel, low government activity, lack of business interest in high-cost and high-risk science-intensive projects, and the uncertainty of potential demand for new technology among consumers. The hypotheses proposed by the authors proved that educational collaborations, marketing intelligence, and the use of professional networking platforms are both sources of potential risks for technology transfer in scientific circles and the driver of its development. The theoretical and practical value of the research results is that they allow forming a theoretical and practical basis for the formation of the methodological paradigm of risk management of internationalisation of technology transfer, taking into account the peculiarities of the domestic economy and global challenges.",0
Structuring automotive product lines and feature models: an exploratory study at Opel,,0
The Analysis of Conceptual Theoretical Approaches to the Problem of Technology Transfer in Foreign Universities,"The article overviews the existing models of technology transfer, including those within foreign universities, and highlights the most relevant ones that can be used by Russian universities in the post-COVID-19 conditions. The study should allow the university-based transfer centers to choose the model which is mostly suitable for their situation, and to include elements that will help them to maximize the efficiency of their activities. The existing centers will be able to make changes in their activity in order to update and/or to transform it in accordance with the changed conditions. For the management personnel of the university, the article also provides practical recommendations on managing technology transfer centers. The authors reveal the key functioning elements of various technology transfer models, which can be used by management personnel to design technology transfer centers based on Russian universities. The possible result of the stakeholders’ getting to know this study might be their creating and implementing regulations to govern the technology transfer centers’ activities; forming a personnel reserve; advanced existing personnel training and multi-competence teams’ creating; forming a flexible budgetary policy, as well as a policy of values, for the technology transfer center to function within.",0
The Analysis of Conceptual Theoretical Approaches to the Problem of Technology Transfer in Foreign Universities,"The article overviews the existing models of technology transfer, including those within foreign universities, and highlights the most relevant ones that can be used by Russian universities in the post-COVID-19 conditions. The study should allow the university-based transfer centers to choose the model which is mostly suitable for their situation, and to include elements that will help them to maximize the efficiency of their activities. The existing centers will be able to make changes in their activity in order to update and/or to transform it in accordance with the changed conditions. For the management personnel of the university, the article also provides practical recommendations on managing technology transfer centers. The authors reveal the key functioning elements of various technology transfer models, which can be used by management personnel to design technology transfer centers based on Russian universities. The possible result of the stakeholders’ getting to know this study might be their creating and implementing regulations to govern the technology transfer centers’ activities; forming a personnel reserve; advanced existing personnel training and multi-competence teams’ creating; forming a flexible budgetary policy, as well as a policy of values, for the technology transfer center to function within.",0
"Methodi Ordinatio: a proposed methodology to select and rank relevant scientific papers encompassing the impact factor, number of citation, and year of publication",,0
Key factors in university-to-university knowledge and technology transfer on international student mobility,"The international circulation of scientists from developing to developed countries can be one of the ways to access advanced knowledge. Similarly, another alternative proposed in this paper is the international student mobility as a way to increase the tacit knowledge asset of a country. Based on this assumption, the purpose of this paper is to approach knowledge and technology transfer having two universities as subjects of study in order to identify the barriers and mechanisms in the transfer within the international student mobility scenario. The paper investigates two groups of students, one from Brazil and another from France, which participated in an international student mobility programme for a period longer than six months. Results show the main barriers and the most effective mechanisms for this category of knowledge and technology transfer. At the end of the paper, we propose a model which has as interfaces two universities as transferor and transferee.",0
A {STUDY} {INVESTIGATING} {CHALLENGES} {IN} {THE} {INTERFACE} {BETWEEN} {PRODUCT} {DEVELOPMENT} {AND} {MANUFACTURING} {IN} {THE} {DEVELOPMENT} {OF} {SOFTWARE}-{INTENSIVE} {AUTOMOTIVE} {SYSTEMS},"The automotive industry is facing a tremendous growth in the engineering of software-intensive systems, giving rise to various challenges. To prevent problems related to the fit of new software technologies in vehicles and the manufacturing processes, a well functioning interaction between the functions for product development and manufacturing is crucial. This is complicated by the fact that the changeable nature of software development causes unprecedented needs for collaboration and coordination between these two functions. This paper reports on a process assessment that focuses on the interface between the functions for product development and manufacturing in the development and design of software-intensive automotive systems. The main purpose of the study was to identify the key issues for improvement in the area assessed. The assessment was performed at two Swedish automotive companies where data were collected from documents and in interviews with practitioners. Nine key improvement issues were established ranging from challenges in requirements engineering to the need for knowledge transfer between manufacturing and product development. In addition, to increase the understandability of the results and map possible avenues for solution and future research, the paper provides an extensive analysis of each improvement issue in relation to the state-of-the-art.",0
Software Process Improvement in Inter-departmental Development of Software-Intensive Automotive Systems {\textendash} A Case Study,"This paper presents a software process improvement (SPI) initiative conducted at two automotive companies, focusing on the inter-departmental interplay between manufacturing and product development, which are central players in automotive development. In such a complex environment with multiple departments with varying challenges(the planning of improvement possibilities was considered as mission critical to get support for changes in the companies. This paper reports the results of the SPI efforts following the process assessment, namely specifically the improvement planning step, which is often overlooked in empirical reports. We also thoroughly describe and report on lessons learned from employing our tailored planning method involving 41 professionals.
We found that requirements engineering, early manufacturing involvement and roles and responsibilities were prioritized as main challenges to address. Furthermore, our and the involved professionals’ experiences of the used SPI (planning) method, showed that it was useful, giving valuable decision support for the planning of the improvement.",0
Software Process Improvement in Inter-departmental Development of Software-Intensive Automotive Systems {\textendash} A Case Study,"This paper presents a software process improvement (SPI) initiative conducted at two automotive companies, focusing on the inter-departmental interplay between manufacturing and product development, which are central players in automotive development. In such a complex environment with multiple departments with varying challenges(the planning of improvement possibilities was considered as mission critical to get support for changes in the companies. This paper reports the results of the SPI efforts following the process assessment, namely specifically the improvement planning step, which is often overlooked in empirical reports. We also thoroughly describe and report on lessons learned from employing our tailored planning method involving 41 professionals.
We found that requirements engineering, early manufacturing involvement and roles and responsibilities were prioritized as main challenges to address. Furthermore, our and the involved professionals’ experiences of the used SPI (planning) method, showed that it was useful, giving valuable decision support for the planning of the improvement.",0
Requirements communication and balancing in large-scale software-intensive product development,,0
Measuring the flow in lean software development,"Responsiveness to customer needs is an important goal in agile and lean software development. One major aspect is to have a continuous and smooth flow that quickly delivers value to the customer. In this paper we apply cumulative flow diagrams to visualize the flow of lean software development. The main contribution is the definition of novel measures connected to the diagrams to achieve the following goals: (1) increase throughput and reduce lead-time to achieve high responsiveness to customers' needs, and (2) to provide a tracking system that shows the progress/status of software product development. An evaluation of the measures in an industrial case study showed that practitioners found them useful and identify improvements based on the measurements, which were in line with lean and agile principles. Furthermore, the practitioners found the measures useful in seeing the progress of development for complex products where many tasks are executed in parallel. The measures are now an integral part of the improvement work at the studied company.",0
Software process improvement through the Lean Measurement ({SPI}-{LEAM}) method,"Software process improvement methods help to continuously refine and adjust the 
software process to improve its performance (e.g., in terms of lead-time, 
quality of the software product, reduction of change requests, and so forth). 
Lean software development propagates two important principles that help process 
improvement, namely identification of waste in the process and considering 
interactions between the individual parts of the software process from an 
end-to-end perspective. A large shift of thinking about the own way of working 
is often required to adopt lean. One of the potential main sources of failure 
is to try to make a too large shift about the ways of working at once. 
Therefore, the change to lean has to be done in a continuous and incremental 
way. In response to this we propose a novel approach to bring together the 
quality improvement paradigm and lean software development practices, the 
approach being called Software Process Improvement through the Lean Measurement 
(SPI-LEAM) Method. The method allows to assess the performance of the 
development process and take continuous actions to arrive at a more lean 
software process over time. The method is under implementation in industry and 
an initial evaluation of the method has been performed.",0
Early identification of bottlenecks in very large scale system of systems software development,"System of systems are of high complexity, and for each system, many different requirements are implemented in parallel. Systems are developed with some degree of managerial independence but later on have to work together. In this situation, many requirements are written, implemented, and tested in parallel for different systems that are to be integrated. This makes identifying bottlenecks challenging, and visualizations often used on project level (such as Kanban boards or burndown charts) have to be extended/complemented to cope with the increased complexity. In response to these challenges, the contributions of this study are to propose the following: (i) a visualization for early identification and proactive removal of bottlenecks; (ii) a visualization to check on the success of bottleneck resolution; and (iii) to provide an industry evaluation of the visualizations in a case study of a system of systems developed at Ericsson AB in Sweden. The feedback by the practitioners showed that the visualizations were perceived as useful in improving throughput and lead time. The quantitative analysis showed that the visualizations were able in identifying bottlenecks and showing improvements or the lack thereof. On the basis of the qualitative and quantitative data collected, we conclude that the visualizations are useful in bottleneck identification and resolution. Copyright © 2014 John Wiley & Sons, Ltd.",0
Finding relevant research solutions for practical problems,,0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
Valorization of Assistive Technologies for Cognition: Lessons and Practices,"A growing body of literature suggests that Assistive Technologies for Cognition (ATCs) are efficient at improving independence and life participation of persons with cognitive impairments. Despite years of research, ATCs implementation in the field of cognitive rehabilitation remains a real challenge. These intervention tools are still not common in clinics and only a few assistive technologies developed in research reach the commercialization phase. This chapter discusses difficulties with regard to the valorization of ATCs and their widespread adoption and provides a reflective tool to optimize the implementation of cognitive assistants.",0
Exploring and improving industry-academia communication in software engineering,,1
Does academic research have practical relevance? A question of translating hydrology research into practice,"Hydrology research has played a vital role in improving hydrological process understanding and by extension, devising solutions to address water management challenges that are critical for people and the environment. Research projects in hydrology are often considered successful when scientific or engineering advancements through new insights or new models or improved understanding are published in peer reviewed or other literature. Quantitative research outputs, such as number of journal publications, number of students trained, number of conference presentations, or additional funding leveraged are considered key indicators of success in research. In this commentary, we argue that research has limited utility when practical applications that add value to practitioners are not explored concurrently within the research process. We discuss some outstanding challenges in translating academic research into practice, and make some recommendations to bridge the increasing gap between research and practice through a strong knowledge mobilization effort. A path from mucky middle to bridging the gap between research and practice.",0
"Lean Development in Design Science Research: Deliberating Principles, Prospects and Pitfalls","[Context and motivation:] As a relevant and viable research methodology that addresses the development and empirical investigation of new artifacts, design science research (DSR) has gained traction in the requirements and software engineering research community over the past decade. [Question/Problem:] In this paper, we deliberate the synergies between the lean mindset and DSR, and explore the application of lean development approaches in the planning and execution of software and requirements engineering research projects. [Principal idea:] The widespread adoption of lean approaches in many business and technology practices today provides the impetus to explore their application in the context of software and requirements engineering empirical research. Toward this, we offer a review of key principles underlying the lean mindset and provide an overview of the typical processes followed in DSR research projects. Subsequently, we reflect the potential for lean development approaches to facilitate DSR projects. [Contribution:] We propose a conceptual framework that integrates lean principles with DSR phases and outputs, and we aim to inspire future discussion on the application of the lean mindset in the planning and execution of empirical research projects.",0
Guidelines for conducting and reporting case study research in software engineering,"Abstract,Case study is a suitable research methodology,for software engineering,research since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes a case study varies, and hence the quality of the resulting studies. This paper aims,at providing,an introduction to case study methodology,and,guidelines for researchers,conducting,case studies and,readers studying,reports of such,studies. The content is based on the authors’ own,experience from conducting,and reading case studies. The terminology,and,guidelines are compiled,from,different methodology,handbooks,in other research domains, in particular social science and information systems, and adapted to the needs,in software,engineering. We,present,recommended,practices for software engineering,case studies as well,as empirically,derived,and,evaluated,checklists for researchers and readers of case study research. Keywords,Casestudy.Research methodology.Checklists .Guidelines",0
Get the cogs in synch,"In industry–academia collaboration projects, there are many issues related to different time horizons in industry and academia. If not adressed upfront, they may hinder collabora-tion in such projects. We analyze our expe-riences from a 10 year industry–academia col-laboration program, the EASE Industrial Ex-cellence Center in Sweden, and identify issues and feasible practices to overcome the hur-dles of different time horizons. Specifically, we identify issues related to contracts, goals, re-sults, organization (in)stability, and work prac-tices. We identify several areas where the time horizon is different, and conclude that mutual awareness of these differences and management commitment to the collaboration are the key means to overcome the differences. The launch of a mediating institute may also be part of the solution.",0
The 4$\mathplus$1 view model of industry--academia collaboration,"Industry–academia projects exist in complex contexts of various stakeholders, time perspec-tives, and goals. In order to analyze projects and communicate about them, we have de-fined an ""architectural"" model for industry– academia collaboration, inspired by Kruchten's software architecture model. The model has four views of i) time, ii) space, iii) activity and iv) domain, corresponding to the ques-tions: when, where, how and what. The +1 view is the scenario, binding the other four to-gether. We illustrate the model by applying it to the Industrial Excellence Center EASE and the Sigrun Software Innovation and En-gineering Institute. The model helps analyz-ing industry–academia collaboration projects, to find gaps and reduce redundant work.",0
The Design Science Paradigm as a Frame for Empirical Software Engineering,"Software engineering research aims to help improve real-world practice. With the adoption of empirical software engineering research methods, the understanding of real-world needs and validation of solution proposals have evolved. However, the philosophical perspective on what constitutes theoretical knowledge and research contributions in software engineering is less discussed in the community. In this chapter, we use the design science paradigm as a frame for articulating and communicating prescriptive software engineering research contributions. Design science embraces problem conceptualization, solution (or artifact) design, and validation of solution proposals, with recommendations for practice phrased as technological rules. Design science is used in related research areas, particularly information systems and management theory. We elaborate the constructs of design science for software engineering, relate them to different conceptualizations of design science, and provide examples of possible research methods. We outline how the assessment of research contributions, industry–academia communication, and theoretical knowledge building may be supported by the design science paradigm. Finally, we provide examples of software engineering research presented through a design science lens.",1
"Recruitment, engagement and feedback in empirical software engineering studies in industrial contexts","Context
Research carried out in industrial contexts are recognized as important to the advancement of software engineering knowledge and practice. However, several challenges present themselves in the three key phases of research carried out in industrial contexts, recruitment, engagement and feedback.

Objective
The aim of this paper is to report the challenges related to each of the three phases of research carried out in industrial contexts, and the associated solutions we have found useful from our combined body of industrial empirical software engineering research studies spanning four case studies, five grounded theory studies, seven survey studies and two quasi-experimental studies involving a total of over 400 industrial participants in the past decade.

Method
We designed an instrument to gather details of our studies carried out in industrial contexts and performed thematic analysis to synthesise and draw out the most prominent challenges faced.

Results
We present a set of recommendations around study design, conduct and reporting to try and mitigate some of these challenges as they apply specifically to industrial empirical research.

Conclusion
These recommendations can guide researchers, novice and experienced, working in close collaboration with industry stakeholders to make the most of their industrial software engineering research.",1
Knowledge and technology transfer in sustainability reports: Fomenting stakeholder engagement for sustainable development,"This article aimed to propose and test a model to assess the potential of sustainability reporting (SR) standards as facilitators for knowledge and technology transfer (KTT), the Sustainable Reporting Knowledge and Technology Transfer (SURKaTT) Model. The proposed model can be used mainly by researchers and public organizations that intend to or are currently conducting SR initiatives. It can be used to assess and compare SR standards, being a facilitator to KTT processes. GRI, a worldwide well-known SR standard was assessed using the SURKaTT Model, and results show that GRI performed at only 58.8% of its potential to facilitate KTT processes. This pioneering approach can encourage researchers onto developing further criteria to assess the possibilities of KTT in SR, and it is a kick-off start for SR to be considered a both purposeful and serendipitous source of KTT initiatives.",0
Academia{\textendash}Industry Collaboration: Getting Closer is the Key!,,0
Um Estudo de Caso de Aplica{\c{c}}{\~{a}}o de um M{\'{e}}todo {\'{A}}gil para Desenvolvimento de Requisitos de Software: O {REAC},,0
Extraction of test cases procedures from textual use cases: is it worth it?,"Software testing plays a major role in the quality of software since it assures that the software complies with its expected behavior. However, this is an expensive activity and, thus, companies usually do not perform testing activities on software projects due to the time required. These costs may be even higher in testing processes that rely only on manual test execution, which is both time-consuming and error-prone. One strategy commonly used to mitigate these costs is to use tools to automate testing activities such as test execution, test documentation, and test case generation. This paper presents an experience report in the context of a Test Factory about the use of a tool that partially automates the specification of test procedures from textual use cases. This tool automatically retrieves use cases from the requirement management system, generates the test case procedures, requires inputs from the tester, and then sends the test cases to the test management system. This paper details how this tool was used in real releases of an industrial software project. We also evaluated our tool with four test analysts from a different project to gather more data regarding its efficiency to support the test case documentation.",0
Solutions in global software engineering: A systematic literature review,"Global software engineering (GSE) has received increased attention, as globalization enables and encourages increased distribution of product development. Many empirical studies and systematic literature reviews (SLRs) focus on the identification of challenges, this paper however presents the first SLR collecting and analyzing solutions associated with GSE, while also evaluating the level of empirical validation of said solutions. As a starting point the paper presents a GSE model, designed to categorize solutions into process areas, useful for the analysis of the research community's contributions to state-of-the-art and identifying fundamental gaps in research. In addition, the model categorizing the solutions is populated with references and good-examples, useful for practitioners, which can use the model to find solutions to overall challenges in various process areas. The overall results of the systematic review revealed more than 330 papers containing 127 solutions that were then identified and mapped to the model. The process areas of project management are highly populated, while other areas like product integration have received surprisingly little attention. In addition, selected process area is elaborated upon in terms of contents and deficiencies.",0
Towards a hybrid testing process unifying exploratory testing and scripted testing,"SUMMARY Given the current state of the art in research, practitioners are faced with the challenge of choosing scripted testing (ST) or exploratory testing (ET). This study aims at systematically incorporating strengths of ET and ST in a hybrid testing process to overcome the weaknesses of each. We utilized systematic review and practitioner interviews to identify strengths and weaknesses of ET and ST. Strengths of ET were mapped to weaknesses of ST and vice versa. Noblit and Hare's lines-of-argument method was used for data analysis. The results of the mapping were used as input to codesign a hybrid process with experienced practitioners. We found a clear need to create a hybrid process as follows: (i) both ST and ET provide strengths and weaknesses, and these depend on some particular conditions, which prevents preference of one approach to another; and (ii) the mapping showed that it is possible to address the weaknesses in one process by the strengths of the other in a hybrid form. With the input from literature and industry experts, a flexible and iterative hybrid process was designed. Practitioners can clearly benefit from using a hybrid process given the mapping of advantages and disadvantages. Copyright © 2013 John Wiley & Sons, Ltd.",0
Action Research vs. Design Research,"Action research is one of many research methodologies used in contemporary empirical software engineering. Its practical orientation and embedding in the context of a company are its main appeal. However, the embedding can be challenging as it requires active participation from industrial partners. Therefore, we can sometimes change the course of our studies and use a methodology that is closely related—design science research. In this chapter, we explore the basic principles of design science research and make the comparison between these two methodologies.",0
Action Research in Software Engineering,"This book addresses action research (AR), one of the main research methodologies used for academia-industry research collaborations. It elaborates on how to find the right research activities and how to distinguish them from non-significant ones. Further, it details how to glean lessons from the research results, no matter whether they are positive or negative. Lastly, it shows how companies can evolve and build talents while expanding their product portfolio.

The book’s structure is based on that of AR projects; it sequentially covers and discusses each phase of the project. Each chapter shares new insights into AR and provides the reader with a better understanding of how to apply it. In addition, each chapter includes a number of practical use cases or examples. Taken together, the chapters cover the entire software lifecycle: from problem diagnosis to project (or action) planning and execution, to documenting and disseminating results, including validity assessments for AR studies.

The goal of this book is to help everyone interested in industry-academia collaborations to conduct joint research. It is for students of software engineering who need to learn about how to set up an evaluation, how to run a project, and how to document the results. It is for all academics who aren’t afraid to step out of their comfort zone and enter industry. It is for industrial researchers who know that they want to do more than just develop software blindly. And finally, it is for stakeholders who want to learn how to manage industrial research projects and how to set up guidelines for their own role and expectations.",0
7.3.2 Assessment of Readiness for Internal Technology Transfer - A Case Study,"Premature introduction of new technologies in product development is likely to lead to both budget and schedule overruns. The assessment of when a technology is ready to be transferred from technology development to product development and production is critical for striking the right balance of short time-to-market and low risk. Previous research on internal technology transfer has mainly focused on the development of methods and tools for assessing technology readiness for major development programs in governmental agencies, revealing few cases of such implementations in technology driven industrial companies. This paper aims to provide description of experiences from using such tools at a case company and prescription on how to manage the identified challenges. The study is based on 22 semi-structured interviews, primarily with personnel from the technology and product development departments. The results indicate that the readiness assessments suggested in literature can support decisions also in industrial companies. However, adapting the tools to the internal differences between technologies is important for minimizing administrative workload and ensuring implementation readiness as opposed to just technology readiness. The strategy for their adaptation could benefit from more research on the practices of companies dealing with internal technology transfer and from the development of a framework for how to adapt the assessment process to different contexts.",0
Using a context-aware approach to recommend code reviewers,"Code review is a commonly used practice in software development. It refers to the process of reviewing new code changes before they are merged with a codebase. However, to perform the review, developers are mostly assigned manually to code changes. This may lead to problems such as a time-consuming selection process, limited pool of known candidates and risk of over-allocation of a few reviewers. To address the above problems, we developed Carrot, a machine learning-based tool to recommend code reviewers. We conducted an improvement case study at Ericsson. We evaluated Carrot using a mixed approach. we evaluated the prediction accuracy using historical data and the metrical Mean Reciprocal Rank (MRR). Furthermore, we deployed the tool in one Ericsson project and evaluated how adequate the recommendations were from the point of view of the tool users and the recommended reviewers. We also asked the opinion of senior developers about the usefulness of the tool. The results show that Carrot can help identify relevant non-obvious reviewers and be of great assistance to new developers. However, there were mixed opinions on Carrot's ability to assist with workload balancing and the decrease code review lead time.",0
Uni-{REPM}: validated and improved,"Software products are usually developed for either a specific customer (bespoke) or a broader market (market-driven). Due to their characteristic, bespoke and market-driven development face different challenges, especially concerning requirements engineering. Many challenges are caused by an inadequate requirements engineering process, and hence there is a need for process improvement frameworks based on empirical research and industry needs. In a previous article we introduced Uni-REPM, a lightweight requirements engineering process assessment framework based on a review of empirically motivated practices in market-driven and bespoke requirements engineering literature. In this article, we validate this framework in academia as well as industry, in order to prepare Uni-REPM for widespread industry use. We conduct two validations; a static validation based on interviews with seven academic experts and a dynamic validation where Uni-REPM is applied in four industrial organisations. Uni-REPM is refined according to the feedback obtained in the validations. The study shows that Uni-REPM is a quick, simple, and cost-effective solution to assess the maturity level of the requirements engineering process of projects. Moreover, the assessment method using checklists is highly usable and applicable in various international development environments.",0
"Adopting Free/Libre/Open Source Software Practices, Techniques and Methods for Industrial Use","Today's software companies face the challenges of highly distributed development projects and constantly changing requirements. This paper proposes the adoption of relevant Free/Libre/Open Source Software (FLOSS) practices in order to improve software development projects in industry. Many FLOSS projects have proven to be very successful, producing high quality products with steady and frequent releases. This study aims to identify FLOSS practices that can be adapted for the corporate environment. To achieve this goal, a framework to compare FLOSS and industrial development methodologies was created. Three successful FLOSS projects were selected as study targets (the Linux Kernel, the FreeBSD operating system, and the JBoss application server), as well as two projects from Ericsson, a large telecommunications company. Based on an analysis of these projects, FLOSS best practices were tailored to fit industrial development environments. The final results consisted of a set of key adoption opportunities that aimed to improve software quality and overall development productivity by importing best practices from the FLOSS environment. The adoption opportunities were then validated at three large corporations.",0
{REQUIREMENTS} {TRACEABILITY}: A {SYSTEMATIC} {REVIEW} {AND} {INDUSTRY} {CASE} {STUDY},"Requirements traceability enables software engineers to trace a requirement from its emergence to its ful¯llment. In this paper we examine requirements traceability de¯nitions, challenges, tools and techniques, by the use of a systematic review performing an exhaustive search through the years 1997À2007. We present a number of common de¯nitions, challenges, available tools and techniques (presenting empirical evidence when found), while complementing the results and analysis with a static validation in industry through a series of interviews.",0
A conceptual framework for {SPI} evaluation,"Software Process Improvement (SPI) encompasses the analysis and modification of the processes within software development, aimed at improving key areas that contribute to the organizations' goals. The task of evaluating whether the selected improvement path meets these goals is challenging. Based on the results of a systematic literature review on SPI measurement and evaluation practices, we developed a framework (SPI-MEF) that supports the planning and implementation of SPI evaluations. SPI-MEF guides the practitioner in scoping the evaluation, determining measures and performing the assessment. SPI-MEF does not assume a specific approach to process improvement and can be integrated in existing measurement programs, refocusing the assessment on evaluating the improvement initiative's outcome. Sixteen industry and academic experts evaluated the framework's usability and capability to support practitioners, providing additional insights that were integrated in the application guidelines of the framework.",0
Large-scale information retrieval in software engineering - an experience report from industrial application,,0
Assessing requirements engineering and software test alignment{\textemdash}Five case studies,"The development of large, software-intensive systems is a complex undertaking that we generally tackle by a divide and conquer strategy. Companies thereby face the challenge of coordinating individual aspects of software development, in particular between requirements engineering (RE) and software testing (ST). A lack of REST alignment can not only lead to wasted effort but also to defective software. However, before a company can improve the mechanisms of coordination they need to be understood first. With REST-bench we aim at providing an assessment tool that illustrates the coordination in software development projects and identify concrete improvement opportunities. We have developed REST-bench on the sound fundamentals of a taxonomy on REST alignment methods and validated the method in five case studies. Following the principles of technical action research, we collaborated with five companies, applying REST-bench and iteratively improving the method based on the lessons we learned. We applied REST-bench both in Agile and plan-driven environments, in projects lasting from weeks to years, and staffed as large as 1000 employees. The improvement opportunities we identified and the feedback we received indicate that the assessment was effective and efficient. Furthermore, participants confirmed that their understanding on the coordination between RE and ST improved.",0
Developing and using checklists to improve software effort estimation: A multi-case study,"Expert judgment based effort estimation techniques are widely used for estimating software effort. In the absence of process support, experts may overlook important factors during estimation, leading to inconsistent estimates. This might cause underestimation, which is a common problem in software projects. This multi-case study aims to improve expert estimation of software development effort. Our goal is two-fold: 1) to propose a process to develop and evolve estimation checklists for agile teams, and 2) to evaluate the usefulness of the checklists in improving expert estimation processes. The use of checklists improved the accuracy of the estimates in two case companies. In particular, the underestimation bias was reduced to a large extent. For the third case, we could not perform a similar analysis, due to the unavailability of historical data. However, when checklist was used in two sprints, the estimates were quite accurate (median Balanced Relative Error (BRE) bias of -0.05). The study participants from the case companies observed several benefits of using the checklists during estimation, such as increased confidence in estimates, improved consistency due to help in recalling relevant factors, more objectivity in the process, improved understanding of the tasks being estimated, and reduced chances of missing tasks.",0
Bridging the Gap in Technology Transfer for Advanced Process Control with Industrial Applications,"In the present paper, a software framework comprising the implementation of Model Predictive Control—a popular industrial control method—is presented. The framework is versatile and can be run on a variety of target systems including programmable logic controllers and distributed control system implementations. However, the main attractive property of the framework stems from the goal of achieving smooth technology transfer from the academic setting to real industrial applications. Technology transfer is, in general, difficult to achieve, because of the apparent disconnect between academic studies and actual industry. The proposed software framework aims at bridging this gap for model predictive control—a powerful control technique which can result in substantial performance improvement of industrial control loops, thus adhering to modern trends for reducing energy waste and fulfilling sustainable development goals. In the paper, the proposed solution is motivated and described, and experimental evidence of its successful deployment is provided using a real industrial plant.",0
Alinhamento estrat{\'{e}}gico de melhoria de processos de software: percep{\c{c}}{\~{o}}es de um processo de apoio {\`{a}} decis{\~{a}}o,O alinhamento de melhoria do processo de software (MPS) com objetivos organizacionais envolve decisões em níveis estratégico e tático. Este artigo apresenta um estudo qualitativo sobre a utilidade de um processo formal de tomada de decisão no alinhamento estratégico de MPS. A definição e o refinamento do processo proposto ajudaram a desenvolver proposições teóricas de forma indutiva. Questionários adaptados do Modelo de Aceitação de Tecnologia avaliaram positivamente tanto a facilidade de uso quanto a utilidade percebida da solução proposta. Os resultados indicam que um processo formal de tomada de decisão é útil e necessário para o alinhamento estratégico de MPS.,0
Approaches to strategic alignment of software process improvement: A systematic literature review,"Context: Software process improvement (SPI) aims to increase the effectiveness of a software organization. Many studies indicate that the strategic alignment is a critical factor for the SPI success. However, little is known about practical approaches to achieving and maintaining such alignment. Objective: The goal of this study is to evaluate the validation evidence of the existing approaches to the strategic alignment of SPI. Method: We develop a search protocol that combines database search and snowballing to perform the systematic literature review and evaluate empirical studies by applying rigor and relevance criteria. To evaluate the efficiency of our protocol, we use a “quasi-gold standard” to compute the sensitivity and precision of the search. Result: We identified 30 studies (18 empirical) and 19 approaches to strategic alignment of SPI from 495 retrieved studies. Only three out of the 18 empirical studies were rated as high in the categories rigor and relevance, suggesting the need for a stronger validation of the approaches. Conclusion: We conclude that the lack of empirical validation indicates that the results of the existing approaches have not been adequately transferred to practitioners yet, calling for more rigorous studies on the subject.",0
Knowledge Base and Experience Factory for Empowering Competitiveness,"As it is well-known, knowledge exploitation is becoming the focus of the economy for the competitiveness of both organizations
and countries. In this chapter some models that enable enterprises towards the knowledge society are presented. An Experience
Factory is suggested as support to such behavioral models. It collects empirical experiences as Experience-Knowledge Packages.
The most relevant innovation of the chapter is represented by the contents and structure of the packages which are different
from ones in the literature. The changes made to the structure aim to convince potential addressees to use the contents of
the packages and favor their adoption independently from the author(s) of the package. Consequently, the proposed structure
allows to produce packages incrementally and cooperatively. The proposed changes derive from the lessons learnt in previous
experiences of technology transfer. The chapter presents the PROMETHEUS platform which implements all the requirements for
collecting and distributing Knowledge-Experience Packages.",0
Towards improving industrial adoption,"While promising software engineering approaches are proposed every day, only few are adapted by professional developers. There are many potential reasons for this, such as, problems in identifying helpful approaches, missing tools, or lacking practical relevance. With our current research, we are concerned to improve the knowledge transfer from research to practice. In this paper, we discuss the impact of development environments and programming languages on knowledge transfer - considering that many scientific approaches and tools are interesting for professional developers, but rarely adopted by them. We base our discussion mainly on our personal experiences with industry-academia collaborations. To determine whether these experiences also apply to other developers, we additionally conducted a survey with 89 participants from academia and industry. The first results of our on-going work indicate a gap between the development environments and programming languages that are supported or used by researchers and those that are applied in industry. Based on our results, we describe initial discussions that can help to improve collaborations between industry and research.",0
Assessing telecommunication service availability risks for organisations,,0
Experimental Validation of a Risk Assessment Method,"[Context and motivation] It is desirable that requirement engineering methods are reliable, that is, that methods can be repeated with the same results. Risk assessments methods, however, often have low reliability when they identify risk mitigations for a system based on expert judgement. [Question/problem] Our goal is to assess the reliability of an availability risk assessment method for telecominfrastructures, and to identify possibilities for improvement of its reliability. [Principal ideas/results] We propose an experimental validation of reliability, and report on its application. We give a detailed analysis of sources of variation, explain how we controlled them and validated their mitigations, and motivate the statistical procedure used to analyse the outcome. [Contribution] Our results can be used to improve the reliability of risk assessment methods. Our approach to validating reliability can be useful for the assessment of the reliability of other methods.",0
Requirements traceability technologies and technology transfer decision support: A systematic review,"Requirements traceability (RT) is a core activity in Requirements Engineering. Various types of RT technologies have been extensively studied for decades. In this paper, we present a systematic literature review from 114 papers between 2006 and 2016 on RT techniques. We summarized 10 major challenges in current RT activities, and categorized existing RT techniques into 6 groups and 25 sub-groups. Moreover, we built mapping relations between these challenges and techniques, and identified 7 potential future research directions. Based on 83 empirical studies, the evaluations for technology transfer are conducted. The main conclusions are: (1) The “trustworthy” and “automated” challenges are the most widely investigated ones, while “scalable” “coordinated” “dynamic” and “lightweight” challenges receive much less attention; (2) “Trace link generation” especially information retrieval-based (IR-based) methods, are the most studied techniques; (3) IR-based methods have the most potential to be adopted by industry, as they have been validated from multiple viewpoints; (4) Seven promising future research directions are identified, which include developing scalable, dynamic and lightweight tracing techniques, introducing new approaches in other disciplines to meet the RT challenges, improving the express ability of trace links, promoting the industry adoption of RT technologies and developing new techniques to support developers’ coordination.",0
A Road Map of Research Methods,"The road map of this book was shown in outline in the Preface, and is here shown with more detail in Fig. 16.1 (Research Goals and Research Questions). As stated in the Introduction, design science research iterates over solving design problems and answering knowledge questions. Design problems that need novel treatments are dealt with rationally by the design cycle, which has been treated in Part II. Knowledge questions that require empirical research to answer, are dealt with rationally by the empirical cycle, which has been treated in Part IV. Design and empirical research both require theoretical knowledge in the form of conceptual frameworks and theoretical generalizations, which enhance our capability to describe, explain, and predict phenomena, and to design artifacts that produce these phenomena. Theoretical frameworks have been treated in Part III.",0
The Design Cycle,"A design science project iterates over the activities of designing and investigating. The design task itself is decomposed into three tasks, namely, problem investigation, treatment design, and treatment validation. We call this set of three tasks the design cycle, because researchers iterate over these tasks many times in a design science research project.",0
Experimentation in Software Engineering,,0
Analysis and Interpretation,"The experiment data from the operation is input to the analysis and interpretation. After collecting experimental data in the operation phase, we want to be able to draw conclusions based on this data. To be able to draw valid conclusions, we must interpret the experiment data.",0
Presentation and Package,,0
Systematic Literature Reviews,"Systematic literature reviews are conducted to “identify, analyse and interpret all available evidence related to a specific research question” [96]. As it aims to give a complete, comprehensive and valid picture of the existing evidence, both the identification, analysis and interpretation must be conducted in a scientifically and rigorous way. In order to achieve this goal, Kitchenham and Charters have adapted guidelines for systematic literature reviews, primarily from medicine, evaluated them [24] and updated them accordingly [96]. These guidelines, structured according to a three-step process for planning, conducting and reporting the review, are summarized below.",0
Experiment Process Illustration,The primary objective of the presentation of this experiment is to illustrate experimentation and the steps in the experiment process introduced in the previous chapters. The presentation of the experiment in this chapter is focused on the experiment process rather than following the proposed report structure in Chap. 11.,0
Guiding the selection of research methodology in industry{\textendash}academia collaboration in software engineering,,1
Successful combination of database search and snowballing for identification of primary studies in systematic literature studies,,0
Social influences on secure development tool adoption,"Security tools can help developers build more secure software systems by helping developers detect or fix security vulnerabilities in source code. However, developers do not always use these tools. In this paper, we investigate a number of social factors that impact developers' adoption decisions, based on a multidisciplinary field of research called diffusion of innovations. We conducted 42 one-on-one interviews with professional software developers, and our results suggest a number of ways in which security tool adoption depends on developers' social environments and on the channels through which information about tools is communicated. For example, some participants trusted developers with strong reputations on the Internet as much as they trust their colleagues for information about security tools.",0
Team discussions and dynamics during {DevOps} tool adoptions in {OSS} projects,,0
Threat modeling,,0
An empirical investigation of transferring research to software technology innovation,"Context: Governments are providing more and more support for academia-industry collaborations for industry led research and innovation via Cooperative Research Centers (CRC). It is important to understand the processes and practices of such programs for transferring scientific R&D to innovation. Goal: We aimed at empirically investigating the processes and practices implemented in the context of one of the Australian CRCs, aimed at transferring big data research to innovative software solutions for national security. Method: We applied case study method and collected and analyzed data from 17 interviews and observations of the participants of the studied CRC program. Findings: We present the innovation process implemented in the studied CRC. We particularly highlight the practices used to involve end-users in the innovation process. We further elaborate on the challenges of running this collaborative model for software technology innovation.",0
Explaining software developer acceptance of methodologies: a comparison of five theoretical models,"Many organizations attempt to deploy methodologies intended to improve software development processes. However, resistance by individual software developers against using such methodologies often obstructs their successful deployment. To better explain why individual developers accept or resist methodologies, five theoretical models of individual intentions to accept information technology tools were examined. In a field study of 128 developers in a large organization that implemented a methodology, each model explained significant variance in developers' intentions to use the methodology. Similar to findings from the tool adoption context, we found that, if a methodology is not regarded as useful by developers, its prospects for successful deployment may be severely undermined. In contrast to the typical pattern of findings in a tool context, however, we found that methodology adoption intentions are driven by: 1) the presence of an organizational mandate to use the methodology, 2) the compatibility of the methodology with how developers perform their work, and 3) the opinions of developers' coworkers and supervisors toward using the methodology. Collectively, these results provide surprising new insights into why software developers accept or resist methodologies and suggest what software engineering managers might do to overcome developer resistance.",0
Muse over university organisational ecology in action and service-oriented architectures,"This paper muses over two e-engineering projects, which use service-oriented architectures to navigate the complexities of e-engineering age. One of these projects is a Monash University Software Engineering (MUSE) portal, which has been developed to provide a central mechanism for group interaction, collaboration and knowledge aggregation to assist students in completing their final year capstone projects. Learning in part of a wider ecology, and benefits from interdependent resources and expertise in an organizational grouping forming a Web of interconnected parts. Collaboration and cooperation sustains this ecology (Maiden, 2003). The paper explores the interconnected aspects via service-oriented architectures and organization units (be it for a course or organizations in a consortium). The paper details the service-oriented architecture of our MUSE portal which is aimed at sustaining the capstone group's ecological requirements of collaboration and cooperation in their group project. The second project is about an E-commerce (B2B) Technology Infusion Project for Australian Rail Manufacturers (ARM). It uses emerging innovative business models with Web services and associated technology to deliver B2B as a new technology infusion program initiative from the research organization (MUSE) to the industry consortium of ARM. It is aimed at providing business integration through Web services (B2B) for a cluster of small to medium enterprises (SMEs). We reflect on (muse over) how the organisational ecology is achieved for the MUSE portal and for the ARM Consortium's B2B project. Services are discrete, self-contained applications that sit within the MUSE portal framework. Web services suit the decentralised nature of this B2B project.",0
4th international workshop on adoption-centric software engineering,The ACSE series of events aims to advance the adoption of software engineering tools and techniques by bringing together researchers and practitioners who investigate novel approaches to fostering the transition between limited-use research prototypes and broadly applicable practical solutions. One proven technique to aid adoption is to leverage existing commercial platforms and infrastructure. The key objective of ACSE 2004 is to explore innovative approaches to the adoption of proofof- concept systems by embedding them in extensions of Commercial Off-The-Shelf (COTS) products and/or using middleware technologies to integrate the prototypes into existing toolsets.,0
A controlled experiment on the impact of the object constraint language in UML-based maintenance,,0
Organising evidence to support software engineering practice,"Evidence (in different forms) is widely employed to establish and refine ideas about what constitutes good practice in many domains of science and engineering. However, software engineering (and computing in general) has so far been a notable exception to this, and our paper sets out to explore some of the reasons why this should be so, and how the situation might be changed in the future. We examine the ways in which some other domains collect and use evidence, and then examine both 'commercial' and 'open source' development practices to see how these currently make use of previous experience and evidence. Finally, we consider the possible role of systematic review groups in strengthening the way that evidence could be employed in future software engineering practices.",0
Tackling the complexity of requirements engineering process improvement by partitioning the improvement task,"Software process improvement is a complex and expensive endeavor requiring extensive resources and long term commitment. In the present study software process improvement (SPI) problems in small organizations were tackled by dividing the overall effort into three subtopics: technical infrastructure, working practices, and management infrastructure. Partitioning the SPI efforts into these three subtopics makes it apparent that all of these topics do not need to be tackled in the same way but some tasks can, e.g., be outsourced. In this paper the results of an investigation into the use of the model above in requirements engineering (RE) process improvement are reported from three industrial case studies. A domain specific method was constructed independently of the utilizing companies, i.e., outsourced, and it was then used in SPI efforts in the companies to establish a solid infrastructure for basic RE in a short period of time, with limited resources, and without previous expertise in RE. It is argued that the suggested partitioning can both lower the threshold for initiating software process improvement efforts in industry and increase the likelihood of successfully completing them.",0
Acceptance issues in metrics program implementation,"Process improvement initiatives such as metrics programs have a high failure rate during their assimilation in a software organization. Lack of attention to social issues and lack of communication are some of the factors affecting their acceptance. Social Psychology includes study of such acceptance issues in the adoption of technology in the workplace. Although metrics implementations are often more intrusive and their benefits are indirect compared to workplace technology in general, both are introduced for similar reasons and induce organizational change. Therefore, we apply technology adoption concepts to metrics program implementation to develop a predictive model that takes as input organizational culture, practitioner mindset, and the nature of the metrics program. Our model relates these inputs to the likelihood of a successful metrics program implementation and to areas that may need improvement. This paper includes the results of a pilot study. The predictor variables ease of use, usefulness, control, and attitude were significantly correlated with the dependent variable, the respondent's intention to perform metrics activities.",0
An experimental investigation of formality in UML-based development,"The object constraint language (OCL) was introduced as part of the Unified Modeling Language (UML). Its main purpose is to make UML models more precise and unambiguous by providing a constraint language describing constraints that the UML diagrams alone do not convey, including class invariants, operation contracts, and statechart guard conditions. There is an ongoing debate regarding the usefulness of using OCL in UML-based development, questioning whether the additional effort and formality is worth the benefit. It is argued that natural language may be sufficient, and using OCL may not bring any tangible benefits. This debate is in fact similar to the discussion about the effectiveness of formal methods in software engineering, but in a much more specific context. This paper presents the results of two controlled experiments that investigate the impact of using OCL on three software engineering activities using UML analysis models: detection of model defects through inspections, comprehension of the system logic and functionality, and impact analysis of changes. The results show that, once past an initial learning curve, significant benefits can be obtained by using OCL in combination with UML analysis diagrams to form a precise UML analysis model. But, this result is however conditioned on providing substantial, thorough training to the experiment participants.",0
Investigating Determinants of Software Developers{\textquotesingle} Intentions to Follow Methodologies,,0
Investigating Determinants of Software Developers{\textquotesingle} Intentions to Follow Methodologies,,0
Guide to Advanced Empirical Software Engineering,,0
Software Engineering Process,,0
A Model for Technology Transfer in Practice,Successful technology transfer requires close cooperation and collaboration between researchers and practitioners. Researchers need to observe the challenges facing industry firsthand and tailor their work accordingly. Practitioners can help shape technology development on the basis of tangible issues identified on site. This article presents a seven-step technology transfer model that reflects collaborations between university researchers and practitioners at two Swedish companies. The authors discuss key lessons learned for each of these seven steps.,0
Research Collaborations between Academia and Industry,"The rapid and complex research and innovation processes require high-tech companies to optimize their technology transfer processes. It is clearly not sufficient to solely rely on internal R&D; strategic cooperations with external research centers of excellence are needed in order to compete in the global innovation market. Candidates for such strategic cooperations are universities, research institutions, and technology focused consulting companies. Key challenge is the effective integration of external competences into the company-internal innovation processes. In this paper we present a survey of the state-of-the-art in technology transfer, high-light promising success cases for the future, and derive success criteria for successful technology transfer in a global world. The cooperation between Siemens and Fraunhofer IESE is presented as a concrete example.",0
On the Sustained Use of a Test-Driven Development Practice at IBM,"Test-driven development (TDD) is an agile practice that is widely accepted and advocated by most agile methods and methodologists. In this paper, we report on a post hoc analysis of the results of an IBM team who has sustained use of TDD for five years and over ten releases of a Java-implemented product. The team worked from a design and wrote tests incrementally before or while they wrote code and, in the process, developed a significant asset of automated tests. The IBM team realized sustained quality improvement relative to a pre-TDD project and consistently had defect density below industry standards. As a result, our data indicate that the TDD practice can aid in the production of high quality products. This quality improvement would compensate for the moderate perceived productivity losses. Additionally, our data indicates that the use of TDD may decrease the degree to which code complexity increases as software ages, as measured by cyclomatic complexity metric.",0
"Design Science, Engineering Science and Requirements Engineering","For several decades there has been a debate in the computing sciences about the relative roles of design and empirical research, and about the contribution of design and research methodology to the relevance of research results. In this minitutorial we review this debate and compare it with evidence about the relation between design and research in the history of science and technology. Our review shows that research and design are separate but concurrent activities, and that relevance of research results depends on problem setting rather than on rigorous methods. We argue that rigorous scientific methods separate design from research, and we give simple model for how to do this in a problem-driven way.",0
A prototype tool for QUPER to support release planning of quality requirements,"Release planning plays an important role for the success of a software product vendor that develops software-intensive incremental products. It is important that the software product is released to the market at the right time, and offers higher quality than the competitors. However, an especially challenging problem for a software product vendor is to set the right quality target in relation to future market demands and competitor products. In this paper, we present a prototype for QUPER, a special-purpose tool for supporting release planning of quality requirements. The applicability of the QUPER prototype tool is demonstrated through academic and industrial evaluations. The study showed that the tool provides a clear overview of the current market situation by the generated roadmaps, and to reach an alignment between practitioners, e.g., product managers and developers, of what level of quality is actually needed.",0
Analyzing the Impact of Beliefs in Software Project Practices,"Folklore and beliefs are strong in the software practitioners' community. Software engineering is a communication intensive activity. Software engineers are innovation driven and regularly use automated resources to share ideas, new paradigms and approaches to support and improve their practices. This information flow generates technical folklore and beliefs (that do not have a formal trial basis). Software engineers applying practices are influenced by these and they are inevitably taken on board in the adoption of a particular technology or practice. This paper presents an industrial case study, using a qualitative approach, to investigate the origins and impacts of beliefs on software development team practices. Its main contribution is on the understanding of creation and evolution of technical beliefs, and in studying its use for team practices improvement in the software engineering industry.",0
Towards Envisaging Software Testing in a Pervasive Computing World,"Pervasive computing has been increasingly finding its way into mainstream. Such paradigm has been fostering the development of systems that transparently interact with users, push context awareness further, and are able to deal with aspects of the user's day-to-day experience. Pervasive systems have been constantly and invisibly introduced in our everyday lives, moving us towards a pervasive computing world. Therefore, in this paper we argue that there is a need to prepare for the challenges that such paradigm will bring about. As dependability is a key feature in pervasive environments, we highlight some of these challenges in the light of software testing, which will play an important role on a plausible pervasive computing world. We address this topic by (i) illustrating challenges for testing pervasive software in an example scenario, (ii) describing our outlook on how the tool support for testing pervasive systems will interact with testers and practitioners alike, and (iii) outlining what research thrusts we need to emphasize in order to prepare for this change.",0
Recommendations to the Adoption of New Software Practices: A Case Study of Team Intention and Behavior in Three Software Companies,"It is believed that people consider the implications of their actions and act based on a reasonable assessment of those implications. In this context, belief can be defined as a state of mind that embodies trust and confidence in something. So, behavior is driven by what is believed, by what is culturally assumed to be true about the world. Our work aims to study and characterize a belief system of software project teams to understand the beliefs underlying an intention or practice, and seek answers about how people progress from intention to behavior in software engineering environments. We applied a behavioral theory in terms of organizational and team level factors associated to beliefs about the software development practices. A set of interviews on origins, sources and impacts of beliefs on software practices was conducted with professionals from different project teams and companies. The results point out a strong influence of past experiences and repeated behavior on software development practices of project teams. Also, we list a set of practical recommendations for software companies that are dealing with the challenges of adopting new practices on software projects.",0
"The Unending Quest for Valid, Useful Software Engineering Theories","Using scientific disciplines as inspiration, some researchers have called for the creation of general theories for software engineering. I present a contrary view, drawing on recent work in the philosophy of engineering. Engineering theories are different to scientific theories, and are not judged by the same criteria. Software engineering researchers should strive to create valid theories about the uses of software-based systems, even if that leads to a multitude of theories that have narrow, overlapping scopes, are approximate, and have little explanatory power. The engineering imperative is that the predictions of software engineering theories should be consistent with actual behaviour of software-based systems, and that theories and should support assurances and explicit justification that systems will meet their requirements. Process theories are about the organisation of work and project management, and are relevant to cost and schedule requirements in software engineering. However, to directly provide evidence that software-based systems meet their main functional and non-functional requirements, software engineering researchers should focus on product theories, about the specifications, designs, code, and behaviours of software-based systems.",0
An Exploratory Study on Technology Transfer in Software Engineering,"Background: Technology transfer is one key to the success of research projects, especially in Software Engineering, where the (practical) impact of the outcome may depend not only on the reliability and feasibility of technologies, but also on their applicability to industrial settings. However, there is limited knowledge on the current state of practice and how to assess the success of technology transfer. Objective: We aim at elaborating a set of hypotheses on how technology transfer takes place in Software Engineering research projects. Method: We designed an exploratory survey with the participants of two large research projects in Germany, which involve both industrial and academic partners in the area of model driven development for embedded systems. Results: Base on the extracted respondents answers of this survey, we defined a resulting theory which is based on the following set of main hypothesis: Most of the technologies developed in research projects are not mature enough for a direct application, but need post-project customisation to fit the industrial contexts (H1). Common models that represent technology transfer as a transaction of an object from a transferor to a transferee does not fit industrial reality (H2). Additionally, technology transfer takes place without an explicit process (H3). Regarding transfer mediums, most used mediums are human-intensive (H5) and industry organisations gain new knowledge mainly within their own confines (H4). Finally the motivations that drive the transfer in industry and academia are heterogenous (H6). Conclusions: From the theoretical perspective, this theory and set of hypotheses extracted from the survey results will be further explored and tested in different follow-up activities. This initial set, however, already may serve as a basis for independent assessments from other researchers to collaboratively shed light on a how technology transfer takes place in Software Engineering research projects, which are the barriers, and how to improve the transfer into practice. From the practical perspective, our results may be used as a basis for an evaluation framework for the transfer of the developed technologies in our projects. This would also help companies in getting new developed technologies transfer easier to their specific context.",1
In Quest for Proper Mediums for Technology Transfer in Software Engineering,"Background: Successful transfer of the results of research projects into practice is of great interest to all project participants. It can be assumed that different transfer mediums fulfill technology transfer (TT) with different levels of success and that they are impaired by different kinds of barriers. Objective: The goal of this study is to gain a better understanding about the different mediums used for TT in software engineering, and to identify barriers weakening the success of the application of such mediums. Method: We conducted an exploratory study implemented by a survey in the context of a German research project with a broad range of used mediums. Results: The main reported barriers were low expectations of usefulness, no awareness of existence, lack of resources, or inadequateness in terms of outdated material or being in an immature state. Conclusions: We interpreted our results as symptoms of a lack of a dissemination plan in the project. Further work will be needed to explore the implications for the transfer of research results (knowledge and techniques) to practice.",0
The Evolution of an Enterprise System Implementation Methodology by Adaptation through Reflexivity,"In spite of an Enterprise Systems Implementation Methodology's (ESIM's) potential and significance for Enterprise Systems implementation, little attention has been paid to its evolution in ES literature. Moreover, current studies reveal contradictory findings and provide a fragmented understanding. The purpose of this paper is to provide a framework underpinned by a morphogenetic approach for explaining how ESIM evolves by adaptation through reflexivity. Our qualitative study resulted in a richer description of ESIM contents differentiated by adaptation strategies through reflexivity. Four theoretically and empirically informed ESIM adaptation strategies, i.e. reorienting, embedding, aligning and connecting, with related conditions and effects are suggested. This study retains valuable insights of prior works in Information Systems Development (ISD) research, since ESIM might be regarded as one of the latest interventions undertaken in an attempt to improve the quality of an ES product and the productivity and quality of an implementation process.",0
Key management processes to technology transfer success,"The success rate of technology transfer from government laboratories is quite low. This paper combines findings from academic research to provide valuable managerial insights. We conclude that technology transfer factors identified so far actually relate to four management processes: project management, strategy management, innovation management, and relationship management.",0
The Use of System Development Methodologies in the Development of Mobile Applications: Are they Worthy of Use?,"The implementation of system development methodologies (SDMs) in mobile applications (mobile apps) development has a positive effect on companies and their respective software projects. SDMs provide a framework for planning, executing, and managing the process of developing software systems. In this paper, we investigate the worthiness of using of SDMs in the development of mobile applications. A survey was conducted among software developers in various organizations. The organizations included software development companies, financial institutions, telecommunication companies, engineering companies and educational institutions. A total of 152 out of 392 questionnaires distributed, were returned, giving a response rate of 38.8%. Furthermore, the responses were categorized into two groups (users/non-users of SDMs) and T-test analysis was performed to determine the differences between the means of the two groups. The findings indicate that SDMs are effectively used in developing mobile apps and there are significant practical differences between the users and non-users of SDMs in mobile apps development in areas of organizational size, the number of developers in the organization, years of experience, the number of applications developed and application success. The users (companies and individuals) are larger, more experienced and more productive. Furthermore, the use of SDMs in mobile apps development leads to more successful mobile apps. We conclude that SDMs are indeed worthy of use in mobile apps development.",0
Transfering Software Form Univesities to Industries: A Case Study ICTL,"To develop digital control systems (software) is a very attractive idea for solving industrial control problems because the required budget for designing it could be lower than designing hardware for control systems; thus, several universities in Mexico are interested in developing digital control Toolkits that can be deployed in commercial platforms. Moreover, some industries need to improve their conventional control systems, so intelligent control systems are an excellent opportunity for being implemented as industrial solutions. However, when this software is transferred from universities to the industry sector, some considerations must be considered to avoid complications during the technology transfer process. This paper shows how software for intelligent control systems based on LabVIEW (ICTL) was transfer to the industry as well as the main steps that were followed to attract a market sector in the industrial automation segment. Also, this paper illustrates some experiences that were learned during the transferring process at Tecnologico de Monterrey in Mexico.",0
Practical experiences and value of applying software analytics to manage quality,"Background: Despite the growth in the use of software analytics platforms in industry, little empirical evidence is available about the challenges that practitioners face and the value that these platforms provide. Aim: The goal of this research is to explore the benefits of using a software analytics platform for practitioners managing quality. Method: In a technology transfer project, a software analytics platform was incrementally developed between academic and industrial partners to address their software quality problems. This paper focuses on exploring the value provided by this software analytics platform in two pilot projects. Results: Practitioners emphasized major benefits including the improvement of product quality and process performance and an increased awareness of product readiness. They especially perceived the semi-automated functionality of generating quality requirements by the software analytics platform as the benefit with the highest impact and most novel value for them. Conclusions: Practitioners can benefit from modern software analytics platforms, especially if they have time to adopt such a platform carefully and integrate it into their quality assurance activities.",0
Lessons Learned on Research Co-Creation: Making Industry-Academia Collaboration Work,"How to increase the impact of software engineering research in the software industry and the society at large is a critical yet perplexing question to answer. Constrained by curtailed communication between researchers and practitioners, research conducted in a vacuum, or the ""publish or perish"" mindset, research collaborations between industry and academia often fail to deliver on the promise of creating a meaningful impact for practitioners. In an attempt to address these circumstances, this paper gives insights on applying research value co-creation to industry-academia collaboration in software engineering. We observe that the core of co-creation includes commitment, continuous engagement and alignment, aiming to produce value for both sides. Further we contend that co-creation has the potential to bridge the acknowledged research-practice collaboration gap through participative knowledge generation. Our experience stems from an eight-year long large collaborative project between a research organization and Norwegian software industry and public sector services. We suggest that for achieving research impact one needs to rethink the way industry and academia engage in and run collaborative projects. Traditional technology-transfer workflows where research is created in a lab and then pushed to industry practice do not stand the best chance of success. Instead, co-creating research with all stakeholders is likely to bring about the best research impact.",1
Why software engineering is riskier than ever,"The ultimate aim of software engineering methods and tools is to reduce risks associated with the development of software products. Accepted risk management procedures recognize that software development is inherently risky, however fail to take into account the changing nature of both software products and the organizations undertaking their development. SE research has traditionally focused on the needs of very large corporations undertaking equally mammoth and complex development projects, thus most tools and methods are predicated on this model. Yet most software development is undertaken by small to medium enterprises. Consequently, these development efforts are either undertaken with little or no adherence to any SE standard process or by attempting to tailor processes intended for larger organizations. Neither of these alternatives is ideal, with both introducing new elements of risk. The rise of the Internet as a platform for commercial applications has partly driven this move away from monolithic software development and has also contributed to the proliferation of software products built using COTS components. Clearly there is a risk involved in the use of components not developed specifically for a particular application while Internet applications introduce an. entirely new set of possible risks. These newer risk factors directly affect the quality of the software product and the paper discusses these factors in detail, showing how they contribute to making software development today an even riskier proposition than previously.",0
Un Atelier de G{\'{e}}nie Logiciel pour d{\'{e}}centraliser et r{\'{e}}utiliser des applications,,0
A modeling language{\textquotesingle}s evolution driven by tight interaction between academia and industry,"Domain specific languages play an important role in model-driven engineering of software-intensive industrial systems. A rich body of knowledge exists on the development of languages, modeling environments, and transformation systems. The understanding of architectural choices for combining these parts into a feasible solution, however, is not particularly deep. We report on an endeavor in the realm of a technology transfer process from academia to industry, where we encountered unexpected influences of the architecture on the modeling language. By examining the evolution of our language and its programming interface, we show that these influences mainly stemmed from practical considerations; for identifying these early on, tight interaction between our research lab and the industrial partner was key. In addition, we share insights into the practice of cooperating with industry by presenting essential lessons we learned.",0
Empirical studies for innovation dissemination,,0
Programming Language Adoption as an Epidemiological Phenomenon,"In Software Engineering, technology transfer has been faced as a peer to peer problem, concerning only the adoption and innovation agents. This approach works well when one is just seeking the adoption of a technology by a specific client, but it can not solve a common problem that is the adoption of new technologies by a large mass of potential new users. In wider context, it no longer makes sense to focus on peer to peer transfer. A new way of looking at the problem is necessary. The diffusion of innovations is more natural when it is treated as a spread of information in a community, similar to that observed in epidemics. This work proposes a paradigm shift to show that the adoption of programming languages can be formally treated as an epidemic. This shift of focus allows the dynamics of adoption of programming languages to be mathematically modeled as such, defining models that explain the communities' behavior when adopting programming languages, and allows some forecast to be made.",0
Setting quality targets for coming releases with {QUPER}: an industrial case study,"Quality requirements play a critical role in driving architectural design and are an important issue in software development.
Therefore, quality requirements need to be considered, specified, and quantified early during system analysis and not later
in the development phase in an ad-hoc fashion. This paper presents the quality performance model that estimates quality targets
in relation to market expectations as a basis for the architecting of quality requirements. The purpose of the model is to
provide concepts for qualitative reasoning of quality levels in the decision-making of setting actual targets of quality requirements
for coming releases of the product. The quality performance model is evaluated at one case company, using a market-driven
development approach, in the electronic payment-processing domain. The results show that the model is useful for supporting
early decision-making in, e.g., release planning of quality requirements.",0
Intelligent decision support for road mapping a technology transfer case study with seimens corporate technology,"In this paper, we describe a technology transfer case study with Siemens Corporate Technology, Systems and Engineering in Munich, Germany in which intelligent decision support was provided for road mapping of the services provided by this unit. The challenge was to provide roadmaps for optimal success in order to achieve maximum market competitiveness and customer satisfaction while simultaneously balancing the resources, business rules, risks, constraints and priorities of different stakeholders and customers around the world. The paper thus describes how ReleasePlanner, a cutting edge technology based on hybrid intelligence developed by the Laboratory for Software Engineering Decision Support at the University of Calgary was used to provide decision support. The technology transfer process and its impact at Siemens are reported.",0
Intelligent decision support for road mapping a technology transfer case study with seimens corporate technology,"In this paper, we describe a technology transfer case study with Siemens Corporate Technology, Systems and Engineering in Munich, Germany in which intelligent decision support was provided for road mapping of the services provided by this unit. The challenge was to provide roadmaps for optimal success in order to achieve maximum market competitiveness and customer satisfaction while simultaneously balancing the resources, business rules, risks, constraints and priorities of different stakeholders and customers around the world. The paper thus describes how ReleasePlanner, a cutting edge technology based on hybrid intelligence developed by the Laboratory for Software Engineering Decision Support at the University of Calgary was used to provide decision support. The technology transfer process and its impact at Siemens are reported.",0
Protocol and tools for conducting agile software engineering research in an industrial-academic setting,"Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.",1
"Approaches, success factors, and barriers for technology transfer in software engineering-Results of a systematic literature review","Introduction
Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application.

Objective
This paper reports on the current state of technology transfer in software engineering.

Method
We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis.

Results
Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer.

Conclusion
Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages.",0
Acceptance of agile methodologies: A critical review and conceptual framework,"It is widely believed that systems development methodologies (SDMs) can help improve the software development process. Nevertheless, their deployment often encounters resistance from systems developers. Agile methodologies, the latest batch of SDMs that are most suitable in dealing with volatile business requirements, are likely to face the same challenge as they require developers to drastically change their work habits and acquire new skills. This paper addresses what can be done to overcome the challenge to agile methodologies acceptance. We provide a critical review of the extant literature on the acceptance of traditional SDMs and agile methodologies, and develop a conceptual framework for agile methodologies acceptance based on a knowledge management perspective. This framework can provide guidance for future research into acceptance of agile methodologies, and has implications for practitioners concerned with the effective deployment of agile methodologies.",0
From User-Centered to Adoption-Centered Design,"As we increasingly strive for scientific rigor and generalizability in HCI research, should we entertain any hope that by doing good science, our discoveries will eventually be more transferrable to industry? We present an in-depth case study of how an HCI research innovation goes through the process of transitioning from a university project to a revenue-generating startup financed by venture capital. The innovation is a novel contextual help system for the Web, and we reflect on the different methods used to evaluate it and how research insights endure attempted dissemination as a commercial product. Although the extent to which any innovation succeeds commercially depends on a number of factors like market forces, we found that our HCI innovation with user-centered origins was in a unique position to gain traction with customers and garner buy-in from investors. However, since end users were not the buyers of our product, a strong user-centered focus obfuscated other critical needs of the startup and pushed out perspectives of non-user-centered stakeholders. To make the research-to-product transition, we had to focus on adoption-centered design, the process of understanding and designing for adopters and stakeholders of the product. Our case study raises questions about how we evaluate the novelty and research contributions of HCI innovations with respect to their potential for commercial impact.",0
{MIS}-{PyME} Software Measurement Maturity Model-Supporting the Definition of Software Measurement Programs,"An important reason why measurement program implementation fails is that the maturity of companies as regards measurement has not been taken into account at its definition phase. Unfortunately, the major methods and frameworks supporting measurement programs –such as Goal Question Metric (GQM), Goal-Driven Software Measurement, GQ(I)M, PSM and ISO/IEC 15939– do not explicitly address, this issue, which is especially important in small and medium settings, where low measurement maturity level is typical and there are more measurement implementation constraints. Additionally, these companies usually have poor measurement knowledge, limited resources and budget, which prevent measurement integration in the corporate culture. This restricts measurement support in these companies and increases the chances of failure. In this paper we will be looking at an adaptation of the software measurement maturity method developed by Daskalantonakis. The so-called “MIS-PyME maturity model” is focused on giving support towards measurement program definition and is integrated in MIS-PyME, a methodological framework for measurement suited to small and medium settings.",0
{MIS}-{PyME} software measurement capability maturity model {\textendash} Supporting the definition of software measurement programs and capability determination,"One important reason for the failure of measurement program implementation is that the maturity of companies as regards measurement has not been taken into account during the definition phase. Unfortunately, the major methods and frameworks that support measurement programs – such as Goal Question Metric (GQM), Goal-Driven Software Measurement, GQ(I)M, PSM and ISO/IEC 15939 – do not address this issue explicitly. This can especially affect small and medium settings, where a low measurement maturity level is typical and where there are more measurement implementation limitations. This is the case both as far as software engineering is concerned and with respect to measurement knowledge. Nevertheless, companies do wish to define measurement programs adapted to the measurement maturity of the company and they want to improve their measurement maturity. There are few measurement assessment models and these are neither well-known nor applied in industry. This paper presents a measurement capability maturity model which supports companies both in defining their measurement programs, as adapted to the measurement maturity of the company, and in detecting measurement improvement suggestions.",0
Evaluating Structural Criteria for Testing Mobile Code,"Code mobility has become an attractive alternative to the implementation of distributed systems. In the last few years much effort has been made in the study and development of techniques to support the development of software based on mobile code. In spite of this effort, there is still a lack of criteria and environments to test mobile software. In this paper we investigate the use of control and data flow based criteria for testing software with mobility features. A testing tool named JaBUTi/MA supports coverage analysis based on client triggered and server triggered instrumentation. A case study is presented to assess the use of JaBUTi/MA on mobile agents.",0
Implementing a software measurement program in small and medium enterprises: a suitable framework,"The successful implementation of software measurement programs is not an easy task. Software measurement program implementations sometimes fail, and this failure is frequently caused by their definition: the measurement program does not provide the required information, the data required are difficult to obtain and so on. The definition of measurement programs is even less encouraging in small and medium enterprises (SMEs), since most of the outstanding measurement program models are not suited to these types of companies. Additionally, the literature provides few cases of measurement program implementation, which could be used as a source of reference for good practices through which to successfully perform these activities. A measurement program definition framework suited to SMEs called MIS-PyME is used to implement a measurement program in the software development and maintenance department of a medium company. The result of this measurement program and the good practices detected from this experience are expounded, along with the benefits obtained using MIS-PyME in contrast to our previous experiences of using the goal question indicator metric.",0
Bridging the gap: {SE} technology transfer into practice,"Background: Particularly during and after research projects, technology transfer into practice plays an important role for academia to get technologies into use and for industry to improve their development. Objective: Our goal was to gain more and current knowledge about how technology transfer from software engineering (SE) research into industrial practice is accomplished best and how to measure the effectiveness of this transfer. Method: We conducted a study in the context of two German research projects, covering many different organizations from industry and academia. Results: This paper presents the design of the study and the survey performed. After introducing the concept of technology transfer we used and adapted, we present preliminary results. Conclusions: We observed that traditional means such as meetings or workshops are still the most widely used mediums for technology transfer in SE. We also discovered that, even though the duration of transfer depends on the object being transferred, the average duration is three years, which is far less than previously published (~18 years).",0
An empirical review of software process assessments,"In the recent past there has been a rapid increase in the use of process assessments in the software industry. Such assessments play an important role in initiating and tracking process improvements. In addition, there has been a proliferation of best practice models that are the basis for the assessments. The purpose of this chapter is to review the empirical evidence that exists to date on the efficacy of process assessments, with a specific focus on the CMM for software and the emerging ISO/IEC 15504 international standard. The available evidence is quite extensive, and supports the claims that assessments can be an effective tool for process improvement. We also highlight gaps in the literature where further work needs to be done.",0
Industry{\textendash}academia collaborations in software testing: experience and success stories from Canada and Turkey,,1
Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review,"Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations.",0
Industry evaluation of the Requirements Abstraction Model,"Software requirements are often formulated on different levels and hence they are difficult to compare to each other. To address
this issue, a model that allows for placing requirements on different levels has been developed. The model supports both abstraction
and refinement of requirements, and hence requirements can both be compared with each other and to product strategies. Comparison
between requirements will allow for prioritization of requirements, which in many cases is impossible if the requirements
are described on different abstraction levels. Comparison to product strategies will enable early and systematic acceptance
or dismissal of requirements, minimizing the risk for overloading. This paper presents an industrial evaluation of the model.
It has been evaluated in two different companies, and the experiences and findings are presented. It is concluded that the
requirements abstraction model provides helpful improvements to the industrial requirements engineering process.",0
A survey of software project managers on software process change,"Software project managers play an important role in selecting their software development process. In this study we conducted a survey of software project managers about software process change. The result of the survey revealed several factors affecting this type of decision making. It also revealed critical issues in software development projects. In particular, the findings point to the importance of a piloting strategy in technology transfer, as well as the importance of highlighting cost, quality, and schedule information in reporting evidence of a new technique's effectiveness. We expect that the findings of this study could facilitate research on technology transfer and adoption.",0
Testing,"Testing is an important process that is performed to support quality assurance. Testing activities support quality assurance by gathering information about the nature of the software being studied. These activities consist of designing test cases, executing the software with those test cases, and examining the results produced by those executions. Studies indicate that more than fifty percent of the cost of software development is devoted to testing, with the percentage for testing critical software being even higher. As software becomes more pervasive and is used more often to perform critical tasks, it will be required to be of higher quality. Unless we can find efficient ways to perform effective testing, the percentage of development costs devoted to testing will increase significantly. This report briefly assesses the state of the art in software testing, outlines some future directions in software testing, and gives some pointers to software testing resources.",0
External Experiments {\textendash} A Workable Paradigm for Collaboration Between Industry and Academia,"Results of empirical investigations are key input for industrial software process improvement activities. The relevance of an investigation for a given environment, however, depends on the similarities or dissimilarities of the investigation environment compared to the industrial environment which is interested in using a new technology. The optimal (or most relevant) results may be gained when performing the experiment in the industrial environment itself. Unfortunately, this takes place only rarely as experiments in industrial environments are either expensive (when new and old technology are used in parallel) or risky (when only the new technology is used).To overcome this dilemma, we introduced the concept of external experiments, i.e. experiments which are conducted in an environment different from the industrial target environment and which tries to simulate the characteristics of the industrial environment as best as possible. This paper describes this concept in detail, presents a process for identification, conduction and exploitation of such experiments and shows some results from past investigations which used this concept.",0
The Role of User Guidance in the Industrial Adoption of MDE Approach,"Model-Driven Engineering (MDE) has emerged as an actively researched and established approach for next generation control application development. Technology transfer to the industry is a topical research problem. Since most professional factory process control engineers do not have computer science backgrounds, there is an urgent need for studies of the role of user guidance in the professional learning, and thus, of industrial adoption of MDE approaches. In this study professionals were invited to a hands-on assessment of the AUKOTON MDE approach for factory process control engineering. Qualitative empirical material was collected and analyzed to identify the role of user guidance in the context of other factors impacting industrial adoption. Challenges in adoption that could be solved by user guidance were identified with the theory of organizational knowledge creation (SECI) model.",0
"Adoption-centric usability engineering: systematic deployment, evaluation and improvement of usability engineering methods in the software engineering lifecycle",,0
Technology transfer decision support in requirements engineering research: a systematic review of {REj},"One of the main goals of an applied research field such as requirements engineering is the transfer of research results to
industrial use. To promote industrial adoption of technologies developed in academia, researchers need to provide tangible
evidence of the advantages of using them. This can be done through industry validation, enabling researchers to test and validate
technologies in a real setting with real users and applications. The evidence obtained, together with detailed information
on how the validation was conducted, offers rich decision support material for industrial practitioners seeking to adopt new
technologies. This paper presents a comprehensive systematic literature review of all papers published in the Requirements
Engineering journal containing any type of technology evaluation. The aim is to gauge the support for technology transfer,
i.e., to what degree industrial practitioners can use the reporting of technology evaluations in the journal as decision support 
for adopting the technologies in industrial practice. Findings show that very few evaluations offer full technology transfer 
support, i.e., have a realistic scale, application or subjects. The major improvement potential concerning support for technology
transfer is found to be the subjects used in the evaluations. Attaining company support, including support for using practitioners
as subjects, is vital for technology transfer and for researchers seeking to validate technologies.",0
A method for evaluating rigor and industrial relevance of technology evaluations,"One of the main goals of an applied research field such as software engineering is the transfer and widespread use of research
results in industry. To impact industry, researchers developing technologies in academia need to provide tangible evidence
of the advantages of using them. This can be done trough step-wise validation, enabling researchers to gradually test and
evaluate technologies to finally try them in real settings with real users and applications. The evidence obtained, together
with detailed information on how the validation was conducted, offers rich decision support material for industry practitioners
seeking to adopt new technologies and researchers looking for an empirical basis on which to build new or refined technologies.
This paper presents model for evaluating the rigor and industrial relevance of technology evaluations in software engineering.
The model is applied and validated in a comprehensive systematic literature review of evaluations of requirements engineering
technologies published in software engineering journals. The aim is to show the applicability of the model and to characterize
how evaluations are carried out and reported to evaluate the state-of-research. The review shows that the model can be applied
to characterize evaluations in requirements engineering. The findings from applying the model also show that the majority
of technology evaluations in requirements engineering lack both industrial relevance and rigor. In addition, the research
field does not show any improvements in terms of industrial relevance over time.",0
Evaluating a model of software managers{\textquotesingle} information needs,"Background: The identification of alternative technologies - which is one step of the formal decision-making process -- results in a judgment on whether a technology is considered as a candidate for the further decision-making process. A model has been proposed that aims at improving the delivery of relevant information from ESE research to software managers. Objectives: Evaluate the effectiveness of the model of software managers information needs Method: Experiment with software managers from industry who read two versions of a report on a controlled experiment, one of which contained the information as required by the information needs model. Results: Participants reading the version of the report based on the model perceived that they could judge better whether the technology is appropriate than those reading the original version of the paper. Conclusion: The information needs model provides a means for supporting the identification of alternative solutions and thus has the potential to solve the problem of making decisions.",0
Reporting experiments to satisfy professionals' information needs,,0
System-specific static code analyses: a case study in the complex embedded systems domain,"In this paper, we are exploring the approach to utilize system-specific static analyses of code with the goal to improve software
quality for specific software systems. Specialized analyses, tailored for a particular system, make it possible to take advantage
of system/domain knowledge that is not available to more generic analyses. Furthermore, analyses can be selected and/or developed
in order to best meet the challenges and specific issues of the system at hand. As a result, such analyses can be used as
a complement to more generic code analysis tools because they are likely to have a better impact on (business) concerns such
as improving certain software quality attributes and reducing certain classes of failures. We present a case study of a large,
industrial embedded system, giving examples of what kinds of analyses could be realized and demonstrate the feasibility of
implementing such analyses. We synthesize lessons learned based on our case study and provide recommendations on how to realize
system-specific analyses and how to get them adopted by industry.",0
The Management of University{\textendash}Industry Collaborations Involving Empirical Studies of Software Enginee,"In this chapter we will discuss some of the pragmatic considerations that we believe university researchers and companies
should consider when establishing collaborative software engineering research projects; in particular, those involving empirical
studies of software engineers. The chapter is illustrated using as a case study a research collaboration in which the authors
are involved. We enumerate the costs, benefits, risks and risk-reducing factors that can have an impact on all the parties
involved in the collaboration (the company, the faculty members and the graduate student researchers). Understanding this
information is needed to help justify the research in the first place, and to manage it effectively. We then discuss many
of the activities that will be needed to plan and manage the project, including such issues as attracting students, handling
intellectual property, obtaining ethical approval and interacting with participants. The main objective of the chapter is
to provoke some thoughts in the minds of those planning empirical research projects in software engineering.",0
On Transferring a Method into a Usage Situation,"Many things can militate against the successfu l transfer of IS methods from research to commercial environments. In this paper we synthesize a framework for reasoning about method transfer. Four main themes emerge from analysis of the relevant literature: the importance of a clear conceptual framework for a method; support for learning; usability within a defined context; and acceptability to stakeholders. These themes are elaborated in the paper, and also illuminated, by reference to Langefors infological equation and from experience gained in four case studies of method transfer. We claim that there is an onus on both method developers and those responsible for method adoption to consider all identified aspects, in an attempt to minimize inherent tensions between methods in concept and methods in action. Full Text at Springer, may require registration or fee",0
Method in Action and Method in Tool: A Stakeholder Perspective,"Tool support for information systems (IS) development can be considered from many perspectives, and it is not surprising that different stakeholders perceive such tools very differently. This can contribute on one side to poor selection processes and ineffective deployment of CASE, and on another to inappropriate tool development. In this paper, the relationship between CASE-tools and IS development methods is considered from three stakeholder perspectives: concept developer, IS developer and product developer. These perspectives, and the tensions between them, are characterised within a ‘stakeholder triangle’. Some of the major issues related to each tension are highlighted, and the triangle is then used to consider the importance, and implications for all stakeholders, of considering all tensions together. In particular, we suggest that the concept of ‘method in action’ be complemented by that of ‘method in tool’. We believe that these insights will contribute to the continuing debate on how to reduce adoption failures.Journal of Information Technology (2004) 19, 215–223. doi:10.1057/palgrave.jit.2000022 Published online 21 September 2004",0
A Case Study on Artefact-Based {RE} Improvement in Practice,"Most requirements engineering (RE) process improvement approaches are solution-driven and activity-based. They focus on the assessment of the RE of a company against an external norm of best practices. A consequence is that practitioners often have to rely on an improvement approach that skips a profound problem analysis and that results in an RE approach that might be alien to the organisational needs. In recent years, we have developed an RE improvement approach (called \emph{ArtREPI}) that guides a holistic RE improvement against individual goals of a company putting primary attention to the quality of the artefacts. In this paper, we aim at exploring ArtREPI's benefits and limitations. We contribute an industrial evaluation of ArtREPI by relying on a case study research. Our results suggest that ArtREPI is well-suited for the establishment of an RE that reflects a specific organisational culture but to some extent at the cost of efficiency resulting from intensive discussions on a terminology that suits all involved stakeholders. Our results reveal first benefits and limitations, but we can also conclude the need of longitudinal and independent investigations for which we herewith lay the foundation.",0
An Insight upon the Effect of Quality Assurance on the Cost of Software Development,,0
Early Empirical Assessment of the Practical Value of {GQM}$\mathplus$Strategies,"The success of a measurement initiative in a software company depends on the quality of the links between metrics programs
and organizational business goals. GQM+Strategies is a new approach designed to help in establishing links between the organizational business goals and measurement
programs. However, there are no reported industrial experiences that demonstrate the practical value of the method. We designed
a five-step research approach in order to assess the method’s practical value. The approach utilized revised Bloom’s taxonomy
as a framework for assessing the practitioners’ cognition level of the concepts. The results of our study demonstrated that
the method has practical value for the case company, and it is capable of addressing real-world problems. In the conducted
empirical study, the cognition level of the practitioners was sufficient for a successful implementation of the method.

KeywordsGQM+Strategies-GQM-Software Metrics-Bloom’s Taxonomy",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
{MDD} vs. traditional software development: A practitioner's subjective perspective,,0
Practical experiences in designing and conducting empirical studies in industry-academia collaboration,"More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success.",0
3-step knowledge transition,"Software Engineering is developing very fast. To keep up with the changes, software companies need effective methods of knowledge transfer. In the paper a 3-step approach to knowledge transfer, called Technical Drama, is presented. The paper is focused on transferring knowledge concerning architecture evaluation, but the approach could also be applied to transferring knowledge concerning inspections, testing etc. It is claimed in the paper that the Technical Drama can be useful in the industrial context (two case studies are described) as well as at university (then a kind of software studio is required).",0
Continuous and collaborative technology transfer: Software engineering research with real-time industry impact,,1
Understanding acceptance of information system development and management methodologies by actual users: A review and assessment of existing literature,"Despite the advantages of using IS methodologies, they are often rejected by actual users. Consequently, researchers have repeatedly attempted to understand why individuals accept certain methodologies while rejecting others. In order to differentiate what has been done from what needs to be done in research, a systematic review of academic studies that examine the acceptance of IS methodologies by actual users was conducted. This review revealed 19 articles. We found that the studies were either: (a) descriptive, (b) focused on specific determinants, or (c) applied a holistic approach, examining methodology acceptance from a number of dimensions. Furthermore, while cognitive aspects have received considerable attention, none of the publications studied the effect of habits, emotions and the personal characteristics of individuals. We also examined the studies with respect to the reported research practices, and thereby identified areas of improvement. Based upon our findings, we developed a research agenda to guide future studies on this crucial subject.",0
{CERSE} - Catalog for empirical research in software engineering: A Systematic mapping study,"**Context:** Empirical research in software engineering contributes towards developing scientific knowledge in this field, which in turn is relevant to inform decision-making in industry. A number of empirical studies have been carried out to date in software engineering, and the need for guidelines for conducting and evaluating such research has been stressed.

**Objective:** The main goal of this mapping study is to identify and summarize the body of knowledge on research guidelines, assessment instruments and knowledge organization systems on how to conduct and evaluate empirical research in software engineering.

**Method:** A systematic mapping study employing manual search and snowballing techniques was carried out to identify the suitable papers. To build up the catalog, we extracted and categorized information provided by the identified papers.

**Results:** The mapping study comprises a list of 341 methodological papers, classified according to research methods, research phases covered, and type of instrument provided. Later, we derived a brief explanatory review of the instruments provided for each of the research methods.

**Conclusion:** We provide: an aggregated body of knowledge on the state of the art relating to guidelines, assessment instruments and knowledge organization systems for carrying out empirical software engineering research; an exemplary usage scenario that can be used to guide those carrying out such studies is also provided. Finally, we discuss the catalog’s implications for research practice and the needs for further research.",0
Is Server Virtualization Implementation in Business and Public Organizations a Worthwhile Investment?,"Globalization is responsible for rapid development and release of information technologies. Globalization drives the competitiveness of people and organizations. Competitiveness makes organizations in particular to seek for solutions to enhance their competitive edge. Recent survey results on server virtualization suggest that the need to enhance competitiveness by reducing costs and improving business productivity is a major reason for the adoption of server virtualization in organizations. Thus, in taking adoption decisions on emerging technologies such as server virtualization, the provocative question we ask is: Is server virtualization implementation in business and public organizations a worthwhile investment? The outcomes of this study clearly show the answer is YES. However, the pitfalls associated with the implementation of these technologies are capable of making future adopters skeptical. This study examined the benefits and drawbacks of server virtualization implementation in 83 South African organizations. Server virtualization implementation has couple of drawbacks, which should be looked into.",0
A Researcher's Experiences in Supporting Industrial Software Process Improvement,"Industry–academia collaboration in software engineering is essential for the relevance of research, as research may make important contributions to the improvement of software engineering. Thus, software engineering researchers are an asset in software process improvement. In this chapter, I present different experiences of being an embedded researcher in industry contributing to software process improvement. The process improvement works were focused on helping organizations to move from plan-driven processes to agile and lean processes. We will elaborate on the challenges, essential practices, and related benefits that were observed when working closely with industry in the role of embedded researchers. Supporting examples from different published cases form the basis for this experience report.",1
,"This paper is an experience report on an initiative to incorporate requirements engineering practices into the development process of two large corporations. The project was framed by a government program to foster collaboration between academia, industry, and government agencies. Its expected result—proposals for cooperative work—is in itself a major challenge, since it was not decided from the beginning what aspect of requirements engineering would be covered by the proposals.We describe the cooperation process followed by the project partners, three universities, and two companies, the difficulties found therein, and compare our experience with other reports on the issue of adoption of requirements engineering into the mainstream practice.",0
Sustainable Technology Transfer,"In this position paper we address the issue of transferring a technology from research into an industrial organization by presenting a refined process for technology transfer. Based on over two decades of industrial experience, we identified the need for a dedicated technology engineering phase for that process. Although little attention has been paid to this technology engineering phase in the academic world, we believe it to be essential for sustainable technology transfer.",0
Software engineering technology innovation {\textendash} Turning research results into industrial success,,0
Assessing the Kinect technology acceptance/diffusion into healthcare (the case of physical therapy),"Ludic engagement provides opportunity to gain from available gaming innovations to efficiently enhance mobility, reduce cost and error, and improve quality of life, particularly for patients suffering from stroke or other traumas left with reduced mobility and access to physical therapy often needed for long periods of time. Early clinical trials and implementations have provided promising evidences to the feasibility of using sensors, speech, voice recognition and visual interaction functionality of gaming consoles for assessing and improving physical performance of patients. This paper studies the cause and effect interplay of the salient derivers in the acceptance of ludic engagement. It reports on the conducted literature review and by performing ethnographic interviews creates a combined map of users' mental landscape using fuzzy cognitive map (FCM). Then using FCM simulation, the scenario of financial stimulation is identified as the most successful path to the timely adoption of ludic engagement.",0
"Using argumentation theory to analyse software practitioners' defeasible evidence, inference and belief","Context: Software practitioners are often the primary source of information for software engineering research. They naturally produce information about their experiences of software practice, and the beliefs they infer from their experiences. Researchers must evaluate the quality and quantity of this information for their research. Objective: To examine how concepts and methods from argumentation research can be used to study practitioners' evidence, inference and beliefs so as to better understand and improve software practice. Method: We develop a preliminary framework and preliminary methodology, and use those to identify, extract and structure practitioners' evidence, inference and beliefs. We illustrate the application of the framework and methodology with examples from a practitioner's blog post. Result: The practitioner uses (factual) stories, analogies, examples and popular opinion as evidence, and uses that evidence in defeasible reasoning to justify his beliefs and to rebut the beliefs of other practitioners. Conclusion: The framework, methodology and examples could provide a foundation for software engineering researchers to develop a more sophisticated understanding of, and appreciation for, practitioners' defeasible evidence, inference and belief. Further work needs to automate (parts of) the methodology to support larger-scale application of the methodology.",0
Technical Debt Management in Brazilian Software Organizations,"Maintenance is often the most expensive and time-consuming of all software system lifecycle phases. Technical Debt (TD) refers to technical decisions on shortcuts and workarounds taken during the software development. It affects the internal quality of software. Therefore, software maintenance can be difficult when the TD is not perceived or managed in the projects. Despite the increasing attention of practitioners and researchers, TD studies indicate its management (TDM) is still incipient. Particularly in Brazilian Software Organizations (BSOs), there is still a lack of information on how practitioners perceive and manage the TD in software projects. This paper reports the results of two studies aiming to investigate the current knowledge level of practitioners from BSOs regarding TD and TDM, and to produce a summary of the available technologies to manage TD. To achieve these objectives, we surveyed practitioners from BSOs and undertook a quasi-Systematic Literature Review (qSLR) to gather specific TDM technologies. The survey results indicated that the general BSOs practitioners' knowledge regarding TD and TDM is still low. Few participants from the survey reported managing TD. The qSLR results provide evidence-based information about a set of TDM technologies, synthesized in evidence briefings to facilitate their use by software practitioners in the industry. Moreover, this paper offers links to a research package to aid in the replication process and support future investigations.",0
Towards modeling guidelines for capturing the cost of improving software product quality in release planning,"Quality requirements complement functional requirements with information on the target quality levels of software functions or emergent system quality aspects. In release planning the allocation of development effort in further investments into product enhancements, new or enhanced functions are competing with quality improvements for limited resources. When setting balanced quality targets for development of coming releases, the estimated costs of improved software quality is needed as a basis for decisions. In this paper, we present initial results from an industrial evaluation of modeling guidelines for the Cost View in the QUality PERformance (QUPER) model. The initial results indicate the feasibility of the proposed modeling approach to cost estimation of quality requirements in QUPER, but further validation is needed.",0
Training students to be innovative information systems developers,"The competitive nature of today's business environment has made it necessary for educators to inculcate in our students a sense of innovativeness in Information Systems (IS) development. While working on real-world projects presents the most ideal opportunity to achieve this objective, it is not always possible to gain access to them. This paper proposes how the case study pedagogy using problem-based learning can be synergized with project-based learning to provide a feasible alternative. An integrative research model based on the IS development methodology acceptance theories is used to investigate the usefulness, satisfaction and acceptance of the proposed business innovation process.",0
A Unified Model of the Technology Push Process and Its Application in a Workshop Setting,"The process of commercializing new technologies, i.e. of creating technology push innovations, is poorly understood and modeled in very different and heterogeneous ways in the academic literature. Furthermore, no framework exists up to now to allow for practical facilitation like Design Thinking supporting user-centric innovations. To tackle these shortcomings, this chapter aims to improve the understanding of the technology push process and take initial steps towards a practical methodological framework. The understanding is enhanced by creating a consolidated and unified model of the process which builds on a systematic literature review. Additionally, methods are identified, evaluated and combined into a workshop format for the most critical phase of technology application selection. A case example in a university setting shows that the workshop is well-suited to advance technologies. Both the process model and the workshop concept are relevant for the academic and practical contexts: The process model aids in better understanding the technology push process and unifies different views. The workshop is an essential first step in designing a systematic framework for practical technology push developments with concrete methods and tools. The methodology is new to the field of innovation management and forms a well-designed starting point for similar endeavors.",0
Predicting acceptance of Software Process Improvement,"Software Process Improvement (SPI) initiatives induce organizational change, by introducing new tools, techniques and work practices. Organizations have to address acceptance issues such as resistance to change, compatibility and fear of adverse consequences. Social psychology literature includes the Technology Acceptance Model (TAM) and the Theory of Planned Behavior (TPB), which study such adoption issues and predict intention to use and actual usage of workplace technology. Some constructs of these models could be applied to software organizations to make it easier for them to counter the initial resistance and to assimilate process improvement into the work culture. To increase applicability of these models to the SPI context, some additional constructs are proposed, by taking into account organizational culture, the impact of changes caused by SPI and the unique characteristics of software developers.",0
Predicting acceptance of Software Process Improvement,,0
To use or not to use? {SDM} utilisation in the development of {LMS} in South Africa,,0
Software Development Methodology Evaluation Model,"In the paper we present software development methodology evaluation model that helps a software development company to find out what is the most suitable methodology for its needs. The purpose of the evaluation model is not to prescribe the use of a certain methodology, but merely to suggest what kind of methodology is suitable for a certain type of organization or project. In the paper we discuss requirements and guidelines for the evaluation model, and design and function of the model.",0
Towards improving industrial adoption,"While promising software engineering approaches are proposed every day, only few are adapted by professional developers. There are many potential reasons for this, such as, problems in identifying helpful approaches, missing tools, or lacking practical relevance. With our current research, we are concerned to improve the knowledge transfer from research to practice. In this paper, we discuss the impact of development environments and programming languages on knowledge transfer - considering that many scientific approaches and tools are interesting for professional developers, but rarely adopted by them. We base our discussion mainly on our personal experiences with industry-academia collaborations. To determine whether these experiences also apply to other developers, we additionally conducted a survey with 89 participants from academia and industry. The first results of our on-going work indicate a gap between the development environments and programming languages that are supported or used by researchers and those that are applied in industry. Based on our results, we describe initial discussions that can help to improve collaborations between industry and research.",0
Design science methodology,"Design scientists have to balance the demands of methodological rigor that they share with purely curiosity-driven scientists, with the demands of practical utility that they share with utility-driven engineers. Balancing these conflicting demands can be conceptually complex and may lead to methodological mistakes. For example, treating a design question as an empirical research question may lead to researcher to omit the identification of the practical problem to solve, to omit the identification of stakeholder-motivated evaluation criteria, or to omit trade-off and sensitivity analysis. This tutorial aims to clear up this methodological mist in the case of software engineering (SE) research.",0
Team discussions and dynamics during {DevOps} tool adoptions in {OSS} projects,,0
Using empirical knowledge from replicated experiments for software process simulation: a practical example,"Empirical knowledge from software engineering studies is an important source for the creation of accurate simulation models. This article describes the development of a simulation model using empirical knowledge gained from an experiment at the NASA/GSFC Software Engineering Laboratory and from two replications at the University of Kaiserslautern. Data and analysis results are used to identify influence dependencies between parameters, and to calibrate models. The goal of the model is the determination of the effects (i.e. defect detection efficacy) of a requirements inspection process under varying contexts. The purpose is to provide decision support for project managers and process engineers when planning or changing a development process. This article describes the systematic model development with a focus on the use of empirical knowledge. Additionally, limitations of the model, lessons learned, and research questions for future work are sketched. The model performed well in an initial validation run, with only little deviation from experimental values.",0
Tackling the complexity of requirements engineering process improvement by partitioning the improvement task,"Software process improvement is a complex and expensive endeavor requiring extensive resources and long term commitment. In the present study software process improvement (SPI) problems in small organizations were tackled by dividing the overall effort into three subtopics: technical infrastructure, working practices, and management infrastructure. Partitioning the SPI efforts into these three subtopics makes it apparent that all of these topics do not need to be tackled in the same way but some tasks can, e.g., be outsourced. In this paper the results of an investigation into the use of the model above in requirements engineering (RE) process improvement are reported from three industrial case studies. A domain specific method was constructed independently of the utilizing companies, i.e., outsourced, and it was then used in SPI efforts in the companies to establish a solid infrastructure for basic RE in a short period of time, with limited resources, and without previous expertise in RE. It is argued that the suggested partitioning can both lower the threshold for initiating software process improvement efforts in industry and increase the likelihood of successfully completing them.",0
An empirical investigation of the key factors for success in software process improvement,"Understanding how to implement software process improvement (SPI) successfully is arguably the most challenging issue facing the SPI field today. The SPI literature contains many case studies of successful companies and descriptions of their SPI programs. However, the research efforts to date are limited and inconclusive and without adequate theoretical and psychometric justification. This paper extends and integrates models from prior research by performing an empirical investigation of the key factors for success in SPI. A quantitative survey of 120 software organizations was designed to test the conceptual model and hypotheses of the study. The results indicate that success depends critically on six organizational factors, which explained more than 50 percent of the variance in the outcome variable. The main contribution of the paper is to increase the understanding of the influence of organizational issues by empirically showing that they are at least as important as technology for succeeding with SPI and, thus, to provide researchers and practitioners with important new insights regarding the critical factors of success in SPI.",0
Early & Quick function point: sizing more with less,"The Early & Quick technique was originally proposed in 1997 for IFPUG Function Points, to size software in early stages of the development process, when functional requirements are still to be established in a detailed form and/or when a rapid measure is needed for existing software from a high-level viewpoint, within limited time. Typical lack of measurement details and requirements volatility in early project stages are overcome by the E&Q approach to provide a size estimate as a significant contribution to early project planning needs. Fundamental principles of the technique are classification by analogy, functionality structured aggregation, and multilevel approach, with statistical validation of numerical ranges. Recently, the technique has evolved, to fully comply with any functional size measurement method (ISO/IEC 14143:1998), so to cover new generation methods (e.g., COSMIC Full FP 2.2) and updated releases of existing methods (e.g., IFPUG FP 4.1 and 4.2). This paper describes the current technique release 2.0, application cases, validation results, supporting tools, and further improvement directions.",0
Early & Quick Function Point: Sizing More with Less,"The Early & Quick technique was originally proposed in 1997 for IFPUG Function Points, to size software in early stages of the development process, when functional requirements are still to be established in a detailed form and/or when a rapid measure is needed for existing software from a high-level viewpoint, within limited time. Typical lack of measurement details and requirements volatility in early project stages are overcome by the E&Q approach to provide a size estimate as a significant contribution to early project planning needs. Fundamental principles of the technique are classification by analogy, functionality structured aggregation, and multilevel approach, with statistical validation of numerical ranges. Recently, the technique has evolved, to fully comply with any Functional Size Measurement method (ISO/IEC 14143:1998), so to cover new generation methods (e.g. COSMIC Full FP 2.2) and updated releases of existing methods (e.g. IFPUG FP 4.1 and 4.2). This paper describes the current technique release 2.0, application cases, validation results, supporting tools, and further improvement directions.",0
Experimental Software Engineering: A New Conference,"An interesting issue facing software engineering relates to the evidence for adopting new techniques, tools, languages methodologies, and so on. We shouldn't always reject new models based on pure argument and logic, but ideally, we should subject such developments to some form of validation. The software engineering community has addressed this issue in part by the establishment of specialist conferences. Two of these are merging, and the Technical Council on Software Engineering thought you would like to know why.",0
From the editors,,0
A Model for Technology Transfer in Practice,Successful technology transfer requires close cooperation and collaboration between researchers and practitioners. Researchers need to observe the challenges facing industry firsthand and tailor their work accordingly. Practitioners can help shape technology development on the basis of tangible issues identified on site. This article presents a seven-step technology transfer model that reflects collaborations between university researchers and practitioners at two Swedish companies. The authors discuss key lessons learned for each of these seven steps.,0
Selecting Best Practices for Effort Estimation,"Effort estimation often requires generalizing from a small number of historical projects. Generalization from such limited experience is an inherently underconstrained problem. Hence, the learned effort models can exhibit large deviations that prevent standard statistical methods (e.g., t-tests) from distinguishing the performance of alternative effort-estimation methods. The COSEEKMO effort-modeling workbench applies a set of heuristic rejection rules to comparatively assess results from alternative models. Using these rules, and despite the presence of large deviations, COSEEKMO can rank alternative methods for generating effort models. Based on our experiments with COSEEKMO, we advise a new view on supposed ""best practices"" in model-based effort estimation: 1) Each such practice should be viewed as a candidate technique which may or may not be useful in a particular domain, and 2) tools like COSEEKMO should be used to help analysts explore and select the best method for a particular domain",0
Data Mining Static Code Attributes to Learn Defect Predictors,"The value of using static code attributes to learn defect predictors has been widely debated. Prior work has explored issues like the merits of ""McCabes versus Halstead versus lines of code counts"" for generating defect predictors. We show here that such debates are irrelevant since how the attributes are used to build predictors is much more important than which particular attributes are used. Also, contrary to prior pessimism, we show that such defect predictors are demonstrably useful and, on the data studied here, yield predictors with a mean probability of detection of 71 percent and mean false alarms rates of 25 percent. These predictors would be useful for prioritizing a resource-bound exploration of code that has yet to be inspected",0
CMM Implementation and Organizational Learning: Findings from a Case Study Analysis,"Methods and practices adopted by software professionals to develop and maintain software are believed to have significant impact on the project outcomes in terms of development cost and product quality. Disciplined methods and practices are expected to result in better control over the software development process. Even though there is a great awareness that software quality is largely dependent on the way the development process is carried on, there is lack of empirical evidence supporting the effect of software development processes on life-cycle productivity or quality and particularly of the impact of CMM certification on productivity improvement. This paper, using qualitative and quantitative data relative to the software process improvement initiative in which the Italian branch of a multinational software company was engaged from Jan. 1997 to May 2001, investigates the impact of CMM certification on organizational learning. In particular, a knowledge management perspective is adopted to explain the software development process increase in productivity. Data suggest the idea that CMM can effectively support and address knowledge management and learning within a software organization. Organizations using a well-structured process model such as the CMM can use the process infrastructure it provides for organizational learning. As an organization moves up the CMM levels, predictability is increased, risk is better managed and reduced and organizational learning is enhanced",0
The Future of Empirical Methods in Software Engineering Research,"We present the vision that for all fields of software engineering (SE), empirical research methods should enable the development of scientific knowledge about how useful different SE technologies are for different kinds of actors, performing different kinds of activities, on different kinds of systems. It is part of the vision that such scientific knowledge will guide the development of new SE technology and is a major input to important SE decisions in industry. Major challenges to the pursuit of this vision are: more SE research should be based on the use of empirical methods; the quality, including relevance, of the studies using such methods should be increased; there should be more and better synthesis of empirical evidence; and more theories should be built and tested. Means to meet these challenges include (1) increased competence regarding how to apply and combine alternative empirical methods, (2) tighter links between academia and industry, (3) the development of common research agendas with a focus on empirical methods, and (4) more resources for empirical research.",0
A Framework to Detect Deviations During Process Enactment,"People enacting processes deviate from the process definition for a variety of different reasons. These deviations may result in either negative or positive consequences for the organization involved. Detecting deviations as the process is being enacted provides an opportunity to determine not only the point in the process where the deviation occurred but a faster and more accurate diagnosis of any issues or problems and the rectification of such. We present a framework designed to detect deviations in enacting process ""on the fly"". The framework consists of a definition engine in which boundary values and process constraints are set, a monitoring engine which observes and records the process during enactment and a detection engine which compares observed values against the definition constraints and detects inconsistencies and deviations as they happen. The methods used are related to some of the work previously conducted in the process improvement and deviation detection domain, and brings these concepts together with our own ideas as a software tool. The developed model is demonstrated with a simulated process and the findings are evaluated.",0
Software effort estimation using machine learning methods,"In software engineering, the main aim is to develop projects that produce the desired results within limited schedule and budget. The most important factor affecting the budget of a project is the effort. Therefore, estimating effort is crucial because hiring people more than needed leads to a loss of income and hiring people less than needed leads to an extension of schedule. The main objective of this research is making an analysis of software effort estimation to overcome problems related to it: budget and schedule extension. To accomplish this, we propose a model that uses machine learning methods. We evaluate these models on public datasets and data gathered from software organizations in Turkey. It is found out in the experiments that the best method for a dataset may change and this proves the point that the usage of one model cannot always produce the best results.",0
Making Statistics Part of Decision Making in an Engineering Organization,"This article reports our experiences deploying statistical methods at BAE Systems Network Systems (BAE NS), a software and systems development organization. We focus not on the methods' mathematical details but on the problem of deploying them to managers and practitioners. Of course, misunderstanding and misuse of these methods will interfere with their successful deployment, so some knowledge of statistical methods is required.",0
A resource based formal methodology to detect non-conformance in processes,"The methodology described in this paper seeks not so much to break away from the other generic, broad methodologies presented in the literature thus far, but rather to apply our concept to a small and easier aspect of the process - resources. By applying our model to just process resources, we can keep it a lot simpler and easier to understand. Having said that, our methodology still remains generic and applicable to processes across all domains instead of being targeted at one, like manufacturing or software engineering the way most other presented models do. The model we describe here is specifically designed to detect instances of non-conformance between a ldquoprescribedrdquo process and its ldquoobservedrdquo process counterpart by structuring the data of the two and then making comparisons. A mathematically formal model is presented with a small illustrative example of how it can be usefully applied.",0
Automated severity assessment of software defect reports,"In mission critical systems, such as those developed by NASA, it is very important that the test engineers properly recognize the severity of each issue they identify during testing. Proper severity assessment is essential for appropriate resource allocation and planning for fixing activities and additional testing. Severity assessment is strongly influenced by the experience of the test engineers and by the time they spend on each issue. The paper presents a new and automated method named SEVERIS (severity issue assessment), which assists the test engineer in assigning severity levels to defect reports. SEVERIS is based on standard text mining and machine learning techniques applied to existing sets of defect reports. A case study on using SEVERIS with data from NASApsilas Project and Issue Tracking System (PITS) is presented in the paper. The case study results indicate that SEVERIS is a good predictor for issue severity levels, while it is easy to use and efficient.",0
Using the Software Process Improvement approach for Defining a Methodology for Embedded Systems Development using the CMMI-DEV v1.2,"Software process improvement holds a significant promise to reduce cycle times and provide greater value to all development activities involved in the software process development. While these methods appear to be well suited for embedded systems development, their use has not become an organized practice. In the same way as that of software development, the embedded systems development could be failing due a bad management in the development process. CMMI-DEV v1.2 is a process improvement maturity model that has been developed by the Software Engineering Institute at Carnegie Mellon. CMMI-DEV v1.2 defines “what” processes and activities need to be done and not “how” these processes and activities are done. In this paper we introduce the SPIES methodology that integrates the CMMI-DEV v1.2 Level 2 process areas to specify a process for developing embedded systems. This methodology incorporates the TSP principles to support the lack of management and improve the process specification. To illustrate this approach, we describe an experimental system in which it has been applied to develop and manage a traffic light system.",0
Defining a Software Process Improvement-Based Methodology for Embedded Systems Development,"While software process improvement methods appear to be well suited for embedded systems development, their use has not become an organized practice. In the same way as that of software development, the embedded systems development could be failing due a bad management in the development process. In this paper we introduce the SPIES methodology that integrates the CMMI-DEV v1.2 Level 2 process areas to specify a process for developing embedded systems. This methodology incorporates principles to support the lack of management and improve the process specification. To illustrate this methodology, we design an experimental system to manage a traffic light system.",0
Instituting Software Metrics in Small Organizations: A Practical Approach,,0
Safe Software: Does It Cost More to Develop?,"The importance of system safety has intensified in recent years given the ever-growing use of safety-critical systems in avionics, medicine, nuclear energy, and other fields. However, despite the abundance of standards which exist to provide guidance for the development of safe software for safety-critical systems, there is no consensus on how to achieve safety assurance in a cost-effective fashion. This paper reviews five software safety standards: the FAA System Safety Handbook, the US DoD MIL-STD-882D, the UK MoD DEF-STAN 00-56, NASA-STD 8719.13b and the RTCA DO-178B, and evaluates each in terms of cost effectiveness. It provides an overview of several safety-critical projects, ones that have incurred significant cost overruns as well as ones that have produced safety-critical software in a reasonably cost-effective manner. By virtue of discussing such projects we posit that it is possible to develop software, despite significant safety assurance requirements, without necessarily sacrificing cost. Specifically, projects can realize savings by using mature processes and appropriate tools to assist in development of safety-critical software.",0
Empirical Evaluation of Mixed-Project Defect Prediction Models,"Defect prediction research mostly focus on optimizing the performance of models that are constructed for isolated projects. On the other hand, recent studies try to utilize data across projects for building defect prediction models. We combine both approaches and investigate the effects of using mixed (i.e. within and cross) project data on defect prediction performance, which has not been addressed in previous studies. We conduct experiments to analyze models learned from mixed project data using ten proprietary projects from two different organizations. We observe that code metric based mixed project models yield only minor improvements in the prediction performance for a limited number of cases that are difficult to characterize. Based on existing studies and our results, we conclude that using cross project data for defect prediction is still an open challenge that should only be considered in environments where there is no local data collection activity, and using data from other projects in addition to a project's own data does not pay off in terms of performance.",0
"Empirical Software Engineering Research - The Good, The Bad, The Ugly","The Software Engineering Research community has slowly recognized that empirical studies are an important way of validating ideas and increasingly our community has stopped accepting the sufficiency of arguing that a smart person has come up with the idea and therefore it must be good. This has led to a flood of Software Engineering papers that contain at least some form of empirical study. However, not all empirical studies are created equal, and many may not even provide any useful information or value. We survey the gradual shift from essentially no empirical studies, to a small number of ones of questionable value, and look at what we need to do to insure that our empirical studies really contribute to the state of knowledge in the field. Thus we have the good, the bad, and the ugly. What are we as a community doing correctly? What are we doing less well than we should be because we either don't have the necessary artifacts or because the time and resources required to do ""the good"" is perceived to be too great? And where are we missing the boat entirely in terms of not addressing critical questions and often not even recognizing that these questions are central even if we don't know the answers. We look to see whether we can find some commonality in the projects that have really made the transition from research to widespread practice to see whether we can identify some common themes.",0
The impacts of software process improvement on developers: A systematic review,"This paper presents the results of a systematic review on the impacts of Software Process Improvement (SPI) on developers. This review selected 26 studies from the highest quality journals, conferences, and workshop in the field. The results were compiled and organized following the grounded theory approach. Results from the grounded theory were further categorized using the Ishikawa (or fishbone) diagram. The Ishikawa Diagram models all the factors potentially impacting software developers, and shows both the positive and negative impacts. Positive impacts include a reduction in the number of crises, and an increase in team communications and morale, as well as better requirements and documentation. Negative impacts include increased overhead on developers through the need to collect data and compile documentation, an undue focus on technical approaches, and the fact that SPI is oriented toward management and process quality, and not towards developers and product quality. This systematic review should support future practice through the identification of important obstacles and opportunities for achieving SPI success. Future research should also benefit from the problems and advantages of SPI identified by developers.",0
Implementation of Software Process Improvement in Pakistan: An empirical study,"Software Process Improvement is a set of activities that leads to a better software process, and ensures the design and development of quality software in a timely manner. Recently, several software companies have decided to adopt maturity models such as the CMM/CMMI to ensure quality software processes. This paper presents the empirical study for successful implementation of CMMI in Pakistani Information Technology (IT) industry. Recent literature reveals that only few CMMI based assessments have been performed at software companies so far. Pakistani software companies are facing a lot of problems to attain a good level of CMMI. This paper has indentified the key factors to be used for analyzing the problems faced by these organizations. These factors have played a key role in analyzing the collected surveyed data from various perspectives. This research also presents the best practices for ease and successful implementation of CMMI to improve the quality of software processes in Pakistani IT industry.",0
A Method for Diagnosing Information Technology Governance Processes,"The importance of Information Technology in guaranteeing the success of an organization has greatly increased, hence, many models and practices have been developed to improve its effectiveness and efficiency. In order to improve Information Technology practices, however, it is important to initially diagnose current practices and then decide what needs to be improved. This article describes a method which can be used to diagnose Information Technology Governance processes. Initially, a method for diagnosing software processes was used in order to assess Information Technology Governance processes. Then, by analyzing weaknesses faced, a specific method for Diagnosing Information Technology Processes was created, which had already been tested in another organization.",0
Empirical software engineering research with industry: Top 10 challenges,"Software engineering research can be done in many ways, in particular it can be done in different ways when it comes to working with industry. This paper presents a list of top 10 challenges to work with industry based on our experience from working with industry in a very close collaboration with continuous exchange of knowledge and information. The top 10 list is based on a large number of research projects and empirical studies conducted with industrial research partners since 1983. It is concluded that close collaboration is a long-term undertaking and a large investment. The importance of addressing the top 10 challenges is stressed, since they form the basis for a long-term sustainable and successful collaboration between industry and academia.",0
From source code analysis to static software testing,"This paper first introduces the safety rule which standardizes static software testing based on technology of source code analysis and lists a few big problems which can be tested by the technology. These problems can be categorized as memory management, uninitialized variables, null pointer exception, array access violation and exception and buffer overflow. Besides, this paper gives a static test tool, Klocwork, which analyses source code, and puts forward four stages of the static testing based on the technology of source code analysis. In the end, certain issues inside aerospace simulation applications are technically summarized with associated research plans.",0
Integrative Double Kaizen Loop (IDKL): Towards a Culture of Continuous Learning and Sustainable Improvements for Software Organizations,"In the past decades, software organizations have been relying on implementing process improvement methods to advance quality, productivity, and predictability of their development and maintenance efforts. However, these methods have proven to be challenging to implement in many situations, and when implemented, their benefits are often not sustained. Commonly, the workforce requires guidance during the initial deployment, but what happens after the guidance stops? Why do not traditional improvement methods deliver the desired results? And, how do we maintain the improvements when they are realized? In response to these questions, we have combined social and organizational learning methods with Lean's continuous improvement philosophy, Kaizen, which has resulted in an IDKL model that has successfully promoted continuous learning and improvement. The IDKL has evolved through a real-life project with an industrial partner; the study employed ethnographic action research with 231 participants and had lasted for almost 3 years. The IDKL requires employees to continuously apply small improvements to the daily routines of the work-procedures. The small improvements by themselves are unobtrusive. However, the IDKL has helped the industrial partner to implant continuous improvement as a daily habit. This has led to realizing sustainable and noticeable improvements. The findings show that on average, Lead Time has dropped by 46 percent, Process Cycle Efficiency has increased by 137 percent, First-Pass Process Yield has increased by 27 percent, and Customer Satisfaction has increased by 25 percent.",0
Comparing Boosting and Cost-Sensitive Boosting With Imbalanced Data,"Class imbalance problem has emerged as one of the crucial issues in machine learning and data mining communities since there is increasing growth and availability of real world data distributed skew or unequal misclassification costs of the minority and majority classes. This paper compares the performance of several boosting and cost-sensitive boosting methods in terms of their capabilities in dealing with the class imbalance problem by using evaluation metrics, precision, F-Measure, Geometric mean (G-mean), and the area under receiver operating characteristics curve (AUC) on five NASA benchmark imbalanced datasets (JM1, KC1, KC2, PC1 and CM1). The learning algorithms studied in this paper include Logistic regression, AdaBoost, AdaC1, AdaC2, AdaC3, and cost-sensitive classifiers based on the former two respectively. The experimental results show that it is difficult to say which one is the best for handling class imbalance without consideration of evaluation metrics.",0
Generating testable hypotheses from tacit knowledge for high productivity computing,"In this research, we are developing our understanding of how the high performance computing community develops effective parallel implementations of programs by collecting the folklore within the community. We use this folklore as the basis for a series of experiments, which we expect, will validate or negate these assumptions.",0
Protocols in the use of empirical software engineering artifacts,"If empirical software engineering is to grow as a valid scientific endeavor, the ability to acquire, use, share, and compare data collected from a variety of sources must be encouraged. This is necessary to validate the formal models being developed within computer science. However, within the empirical software engineering community this has not been easily accomplished. This paper analyses experience from a number of projects, and defines the issues, which include the following: (1) How should data, testbeds, and artifacts be shared? (2) What limits should be placed on who can use them and how? How does one limit potential misuse? (3) What is the appropriate way to credit the organization and individual that spent the effort collecting the data, developing the testbed, and building the artifact? (4) Once shared, who owns the evolved asset? As a solution to these issues, the paper proposes a framework for an empirical software engineering artifact agreement, which is intended to address the needs for both creator and user of such artifacts and should foster a market in making available and using such artifacts. If this framework for sharing software engineering artifacts is commonly accepted, it should encourage artifact owners to make the artifacts accessible to others (gaining credit is more likely and misuse is less likely), and it may be easier for other researchers to request artifacts since there will be a well-defined protocol for how to deal with relevant matters.",0
A Personal Perspective on the Evolution of Empirical Software Engineering,"This paper offers a four-decade overview of the evolution of empirical software engineering from a personal perspective. It represents what I saw as major milestones in terms of the kind of thinking that affected the nature of the work. I use examples from my own work as I feel that work followed the evolution of the field and is representative of the thinking at various points in time. I try to say where we fell short and where we need to go, in the end discussing the barriers we still need to address. © 2013 Springer-Verlag Berlin Heidelberg. All rights are reserved.",0
Experiments to Understand {HPC} Time to Development (Final report for Department of Energy contract {DE}-{FG}02-04ER25633) Report {DOE}/{ER}/25633-1,"In order to understand how high performance computing (HPC) programs are developed, a series of experiments, using students in graduate level HPC classes and various research centers, were conducted at various locations in the US. In this report, we discuss this research, give some of the early results of those experiments, and describe a web-based Experiment Manager we are developing that allows us to run studies more easily and consistently at universities and laboratories, allowing us to generate results that more accurately reflect the process of building HPC programs.",0
The impact of software capability maturity model on knowledge management and organisational learning: empirical findings and useful insights,"This paper, using qualitative and quantitative data relative to the software process improvement initiative in which the Italian branch of a multinational software company was engaged from January 1997 to May 2001, investigates the impact of Capability Maturity Model (CMM) certification on organisational learning. A knowledge management perspective is adopted to explain the software development process increase in productivity. Data suggest that CMM can effectively support and address knowledge management and learning within a software organisation. Disciplined methods and practices are expected to result in better control over the software development process, and organisations using a well-structured process model such as the CMM can use the process infrastructure it provides for organisational learning.",0
Resistance factors in software processes improvement,"Several companies have been carrying out software processes improvement projects. However, some of them give up before the project ends and others take much longer than expected to get it accomplished. This way, identifying the resistance factors that influence the implementation of such projects might serve as a reference to professionals in this area on the one hand, and help to manage future projects on the other, throught the use of priventive actions that either lessen or eliminate the resistance factors' consequences. For this matter, this article presents a survey with 36 professionals involved in initiatives of software prosses improvement in 18 companies in the state of Rio Grande do Sul, Brazil.",0
Using Practice Outcome Areas to Understand Perceived Value of {CMMI} Specific Practices for {SMEs},"In this article, we present a categorization of CMMI Specific Practices, and use this to reanalyze prior work describing the
perceived value of those practices for Small-to-Medium-sized Enterprises (SMEs), in order to better understand the software
engineering practice needs of SMEs. Our categorization is based not on process areas, but on outcome areas (covering organizational,
process, project, and product outcomes) and on the nature of activities leading to outcomes in those areas (covering planning,
doing, checking, and improvement activities). Our reanalysis of the perceived value of Specific Practices for the CMMI Level
2 Process Areas shows that SMEs most value practices for working on project-related outcomes, and for planning and doing work
on product-related outcomes. Our categorization of practices will serve as a framework for further study about CMMI and other
SPI approaches.",0
Multi-player online video games for cognitive rehabilitation,"This document describes the author's PhD work done to date. The motivation and background is described, and the hypothesis presented, which is that an online multi-player video game could provide cognitive therapy for brain-injured people. The proposed experiment is described, explaining the design decisions made. The expected contribution of this research is stated.",0
Lessons Learned and Recommendations from Two Large Norwegian {SPI} Programmes,"Software development is an experimental discipline, i.e. somewhat unpredictable. This suggests that software processes improvement should be based on the continuous iteration of characterization, goal setting, selection of improved technology, monitoring and analysis of its effects. This paper describes experiences from the empirical studies in two large SPI programmes in Norway. Five main lessons were learned: 1) It is a challenge for the industrial partners to invest enough reso urces in SPI activities. 2) The research partners must learn to know the companies, and 3) they must work as a multi- competent and coherent unit towards them. 4) Any SPI initiative must show visible, short-term payoff. 5) Establishing a solid baseline from which to improve is unrealistic. Based on these lessons, a set of operational recommendations for other researchers in the area are proposed.",0
An Industrial Case Study of Immediate Benefits of Requirements Engineering Process Improvement at the Australian Center for Unisys Software,"This paper describes an industrial experience in process improvement at one of the Unisys development labs in Australia. Following a capability maturity model (CMM) mini-assessment, the organization is undertaking significant changes in the requirements management process, which include the introduction of group session approaches to requirements analysis and a structured method for writing requirements. An empirical evaluation which investigated other aspects of the process improvement than the CMM model indicates tangible benefits as well as perceived long-term benefits during design and testing. Findings confirm that a more thorough requirements analysis results in more clearly defined, better understood and specified requirements, and an enhanced ability to address the market needs and product strategy requirements. The catalyst behind these improvements included project management leadership, managing the human dimension, collaboration among stakeholders and senior management support.",0
A model for software rework reduction through a combination of anomaly metrics,"Analysis of anomalies reported during testing of a project can tell a lot about how well the processes and products work. Still, organizations rarely use anomaly reports for more than progress tracking although projects commonly spend a significant part of the development time on finding and correcting faults. This paper presents an anomaly metrics model that organizations can use for identifying improvements in the development process, i.e. to reduce the cost and lead-time spent on rework-related activities and to improve the quality of the delivered product. The model is the result of a four year research project performed at Ericsson.",0
Empirical software engineering experts on the use of students and professionals in experiments,,0
Empirical software engineering experts on the use of students and professionals in experiments,,0
Automatically finding the control variables for complex system behavior,"Testing large-scale systems is expensive in terms of both time and money. Running simulations early in the process is a proven method of finding the design faults likely to lead to critical system failures, but determining the exact cause of those errors is still time-consuming and requires access to a limited number of domain experts. It is desirable to find an automated method that explores the large number of combinations and is able to isolate likely fault points.
Treatment learning is a subset of minimal contrast-set learning that, rather than classifying data into distinct categories, focuses on finding the unique factors that lead to a particular classification. That is, they find the smallest change to the data that causes the largest change in the class distribution. These treatments, when imposed, are able to identify the factors most likely to cause a mission-critical failure. The goal of this research is to comparatively assess treatment learning against state-of-the-art numerical optimization techniques. To achieve this, this paper benchmarks the TAR3 and TAR4.1 treatment learners against optimization techniques across three complex systems, including two projects from the Robust Software Engineering (RSE) group within the National Aeronautics and Space Administration (NASA) Ames Research Center. The results clearly show that treatment learning is both faster and more accurate than traditional optimization methods.",0
Applying machine learning to software fault-proneness prediction,"The importance of software testing to quality assurance cannot be overemphasized. The estimation of a module’s fault-proneness is important for minimizing cost and improving the effectiveness of the software testing process. Unfortunately, no general technique for estimating software fault-proneness is available. The observed correlation between some software metrics and fault-proneness has resulted in a variety of predictive models based on multiple metrics. Much work has concentrated on how to select the software metrics that are most likely to indicate fault-proneness. In this paper, we propose the use of machine learning for this purpose. Specifically, given historical data on software metric values and number of reported errors, an Artificial Neural Network (ANN) is trained. Then, in order to determine the importance of each software metric in predicting fault-proneness, a sensitivity analysis is performed on the trained ANN. The software metrics that are deemed to be the most critical are then used as the basis of an ANN-based predictive model of a continuous measure of fault-proneness. We also view fault-proneness prediction as a binary classification task (i.e., a module can either contain errors or be error-free) and use Support Vector Machines (SVM) as a state-of-the-art classification method. We perform a comparative experimental study of the effectiveness of ANNs and SVMs on a data set obtained from NASA’s Metrics Data Program data repository.",0
Industry evaluation of the Requirements Abstraction Model,"Software requirements are often formulated on different levels and hence they are difficult to compare to each other. To address
this issue, a model that allows for placing requirements on different levels has been developed. The model supports both abstraction
and refinement of requirements, and hence requirements can both be compared with each other and to product strategies. Comparison
between requirements will allow for prioritization of requirements, which in many cases is impossible if the requirements
are described on different abstraction levels. Comparison to product strategies will enable early and systematic acceptance
or dismissal of requirements, minimizing the risk for overloading. This paper presents an industrial evaluation of the model.
It has been evaluated in two different companies, and the experiences and findings are presented. It is concluded that the
requirements abstraction model provides helpful improvements to the industrial requirements engineering process.",0
Industry evaluation of the Requirements Abstraction Model,"Software requirements are often formulated on different levels and hence they are difficult to compare to each other. To address
this issue, a model that allows for placing requirements on different levels has been developed. The model supports both abstraction
and refinement of requirements, and hence requirements can both be compared with each other and to product strategies. Comparison
between requirements will allow for prioritization of requirements, which in many cases is impossible if the requirements
are described on different abstraction levels. Comparison to product strategies will enable early and systematic acceptance
or dismissal of requirements, minimizing the risk for overloading. This paper presents an industrial evaluation of the model.
It has been evaluated in two different companies, and the experiences and findings are presented. It is concluded that the
requirements abstraction model provides helpful improvements to the industrial requirements engineering process.",0
Requirements engineering: In search of the dependent variables,"When software development teams modify their requirements engineering process as an independent variable, they often examine the implications of these process changes by assessing the quality of the products of the requirements engineering process, e.g., a software requirements specification (SRS). Using the quality of the SRS as the dependent variable is flawed. As an alternative, this paper presents a framework of dependent variables that serves as a full range for requirements engineering quality assessment. In this framework, the quality of the SRS itself is just the first level. Other higher, and more significant levels, include whether the project was successful and whether the resulting product was successful. And still higher levels include whether or not the company was successful and whether there was a positive or negative impact on society as a whole.",0
{EXPLORING} {THE} {EFFORT} {OF} {GENERAL} {SOFTWARE} {PROJECT} {ACTIVITIES} {WITH} {DATA} {MINING},"Software project effort estimation requires high accuracy, but accurate estimations are difficult to achieve. Increasingly, data mining is used to improve an organization's software process quality, e.g. the accuracy of effort estimations. Data is collected from projects, and data miners are used to discover beneficial knowledge. This paper reports a data mining experiment in which we examined 32 software projects to improve effort estimation. We examined three major categories of software project activities, and focused on the activities of the category which has got the least attention in research so far, the non-construction activities. The analysis is based on real software project data supplied by a large European software company. In our data mining experiment, we applied a range of machine learners. We found that the estimated total software project effort is a predictor in modeling and predicting the actual quality management effort of the project.",0
Formulation and preliminary test of an empirical theory of coordination in software engineering,,0
Chapter 5 An Environment for Conducting Families of Software Engineering Experiments,"The classroom is a valuable resource for conducting software engineering experiments. However, coordinating a family of experiments in classroom environments presents a number of challenges to researchers. Understanding how to run such experiments, developing procedures to collect accurate data, and collecting data that is consistent across multiple studies are major problems. This paper describes an environment, the Experiment Manager that simplifies the process of collecting, managing, and sanitizing data from classroom experiments, while minimizing disruption to natural subject behavior. We have successfully used this environment to study the impact of parallel programming languages in the high‐performance computing domain on programmer productivity at multiple universities across the United States.",0
A comparison of Six-Sigma and {GQM} approaches in software development,"With an increasing attention being paid to Six-Sigma applications in the software industry, there has been an increasing alignment between Six-Sigma and the Goal Question Measurement or GQM approach. Questions have been raised such as whether Six-Sigma is totally different from GQM, or is there ''nothing new'' in Six-Sigma. Also, are there potential conflicts between these two prominent approaches? Do they provide software companies with an ''either'', ''or'' solution, or can the two be combined? In this paper, we explore the differences and similarities as well as the strengths and weaknesses between Six-Sigma and GQM. Some conclusions and recommendations are presented in this light.",0
External Experiments {\textendash} A Workable Paradigm for Collaboration Between Industry and Academia,"Results of empirical investigations are key input for industrial software process improvement activities. The relevance of an investigation for a given environment, however, depends on the similarities or dissimilarities of the investigation environment compared to the industrial environment which is interested in using a new technology. The optimal (or most relevant) results may be gained when performing the experiment in the industrial environment itself. Unfortunately, this takes place only rarely as experiments in industrial environments are either expensive (when new and old technology are used in parallel) or risky (when only the new technology is used).To overcome this dilemma, we introduced the concept of external experiments, i.e. experiments which are conducted in an environment different from the industrial target environment and which tries to simulate the characteristics of the industrial environment as best as possible. This paper describes this concept in detail, presents a process for identification, conduction and exploitation of such experiments and shows some results from past investigations which used this concept.",0
The effects of software design complexity on defects : a study in open-source systems,,0
"An Empirical Investigation of Applying Lean Production to Software Development and IT Services: Outcomes, Challenges, and Lessons Learned",,0
An exploratory study of process enactment as input to software process improvement,Software process improvement has been a focus of industry for many years. To assist the procedure and implementation of software process improvement we provide a software process recovery method based on mining project enactment data. The goal of process recovery is to improve the quality of a planned software process. We investigate the enactment of a planned software process from the view of understanding the appropriateness and fitness for purpose of the process model from the viewpoint of the project managers in the context of a small software development organization. We collected empirical data from this organization and then applied our method to a pilot case study. The main contribution of our work is to provide a methodology of software process model recovery which supports software process improvement.,0
Tool support for disseminating and improving development practices,"Knowledge management in software engineering and software process improvement activities pose challenges as initiatives are
deployed. Most existing approaches are either too expensive to deploy or do not take an organization’s specific needs into
consideration. There is thus a need for scalable improvement approaches that leverage knowledge already residing in the organizations.
This paper presents tool support for an Experience Factory approach for disseminating and improving practices used in an organization.
Experiences from using practices in development projects are captured in postmortems and provide iteratively improved decision
support for identifying what practices work well and what needs improvement. An initial evaluation of using the tool for organizational
improvement has been performed utilizing both academia and industry. The results from the evaluation indicate that organizational
characteristics influence how practices and experiences can be used. Experiences collected in postmortems are estimated to
have little effect on improvements to practices used throughout the organization. However, in organizations where different
practices are used in different parts of the organization, making practices available together with experiences from use,
as well as having context information, can influence decisions on what practices to use in projects.",0
{PRACTICE} {SELECTION} {FRAMEWORK},"Knowledge management (KM) in software engineering and software process improvement (SPI) are challenging. Most existing KM and SPI frameworks are too expensive to deploy or do not take an organization's specific needs or knowledge into consideration. There is thus a need for scalable improvement approaches that leverage knowledge already residing in the organizations.
This paper presents the Practice Selection Framework (PSF), an Experience Factory approach, enabling lightweight experience capture and use by utilizing postmortem reviews. Experiences gathered concern performance and applicability of practices used in the organization, gained from concluded projects. Project managers use these as decision support for selecting practices to use in future projects, enabling explicit knowledge transfer across projects and the development organization as a whole. Process managers use the experiences to determine if there is potential for improvement of practices used in the organization. This framework was developed and subsequently validated in industry to get feedback on usability and usefulness from practitioners. The validation consisted of tailoring and testing the framework using real data from the organization and comparing it to current practices used in the organization to ensure that the approach meets industry needs. The results from the validation are encouraging and the participants' assessment of PSF and particularly the tailoring developed was positive.",0
Second international workshop on software engineering for high performance computing system applications,,0
Das virtuelle Software-Engineering-Kompetenzzentrum ({ViSEK}),"Zusammenfassung: Software-Engineering ist eine wichtige Produktivtechnik für das 21. Jahrhunderts, weil Software in zunehmend mehr Branchen Anwendung findet und maßgeblich die Leistungs- und Wettbewerbsfähigkeit einer Vielzahl von Produkten beeinflusst. Vor diesem Hintergrund vernetzt das virtuelle Software- Engineering-Kompetenzzentrum (ViSEK) Software-Professionals aus Forschung und Industrie und bietet insbesondere kleinen und mittelständigen Unternehmen (KMUs) einen umfassenden Wissenspool von Technologie-Beschreibungen und Erfahrungen. Ausgehend von sozio-kulturellen Lerntheorien unterstützt ViSEK den Aufbau von Lerngemeinschaften zwischen Software-Professionals auf drei verschiedenen Ebenen (a) zwischen führenden nationalen Forschungsgruppen, (b) zwischen Forschungsgruppen und Praktikern und (c) zwischen Praktikern. Zwei Ansätze für den Aufbau von Lerngemeinschaften beschreiben wir detaillierter (a) ein Internet Portal, welches Software-Engineering Wissen darstellt und Funktio- nalität für die Unterstützung von Gemeinschaftsbildung bietet, (b) regionale Netzwerke die Erfahrungsaustausch und Lernen in bestimmten Feldern des Soft- ware-Engineerings unterstützen.",0
Implementing requirements engineering processes throughout organizations: success factors and challenges,"This paper aims at identifying critical factors affecting organization-wide implementation of requirements engineering (RE) processes. The paper is based on a broad literature review and three longitudinal case studies that were carried out using an action research method. The results indicate that RE process implementation is a demanding undertaking, and its success greatly depends on such human factors as motivation, commitment and enthusiasm. Therefore, it is essential that the RE process is useful for its individual users. Furthermore, the results indicate that organizations can gain benefits from RE by defining a simple RE process, by focusing on a small set of RE practices, and by supporting the systematic usage of these practices.",0
Software Development Improvement with {SFIM},"Most industries are challenging to increase productivity of software development. Often many process improvement activities
are started with enthusiasm, unfortunately most of these are less successful than forecasted or improvements do not sustain
for long. This paper presents the Seven Forces Improvement Method, SFIM, which claims to overcome unexpected disappointment
in improvement results. SFIM is built upon different aspects that influence the success of software process improvements,
such as culture, skills and organization. The method has been applied to improvement activities in a large software department
for a number of years. The success of SFIM is compared with the compliance with the SFIM method. The paper shows that application
of SFIM increases the success rate of software improvement activities in industry.",0
{ENNA},"Companies usually have limited amount of data for effort estimation. Machine learning methods have been preferred over parametric models due to their flexibility to calibrate the model for the available data. On the other hand, as machine learning methods become more complex they need more data to learn from. Therefore the challenge is to increase the performance of the algorithm when there is limited data. In this research we used a relatively complex machine learning algorithm, neural networks, and showed that stable and accurate estimations are achievable with an ensemble using associative memory. Our experimental results revealed that our proposed algorithm (ENNA) achieves on the average PRED(25) = 36.4 which is a significant increase compared to Neural Network (NN) PRED(25) = 8.",0
Ensemble of neural networks with associative memory ({ENNA}) for estimating software development costs,"Companies usually have limited amount of data for effort estimation. Machine learning methods have been preferred over parametric models due to their flexibility to calibrate the model for the available data. On the other hand, as machine learning methods become more complex, they need more data to learn from. Therefore the challenge is to increase the performance of the algorithm when there is limited data. In this paper, we use a relatively complex machine learning algorithm, neural networks, and show that stable and accurate estimations are achievable with an ensemble using associative memory. Our experimental results show that our proposed algorithm (ENNA) produces significantly better results than neural network (NN) in terms of accuracy and robustness. We also analyze the effect of feature subset selection on ENNA’s estimation performance in a wrapper framework. We show that the proposed ENNA algorithm that use the features selected by the wrapper does not perform worse than those that use all available features. Therefore, measuring only company specific key factors is sufficient to obtain accurate and robust estimates about software cost estimation using ENNA.",0
An evolutionary testbed for software technology evaluation,"Empirical evidence and technology evaluation are needed to close the gap between the state of the art and the state of the practice in software engineering. However, there are difficulties associated with evaluating technologies based on empirical evidence: insufficient specification of context variables, cost of experimentation, and risks associated with trying out new technologies. In this paper, we propose the idea of an evolutionary testbed for addressing these problems. We demonstrate the utility of the testbed in empirical studies involving two different research technologies applied to the testbed, as well as the results of these studies. The work is part of NASAs High Dependability Computing Project (HDCP), in which we are evaluating a wide range of new technologies for improving the dependability of NASA mission-critical systems.",0
Virtual Software Engineering Laboratories in Support of Trade-off Analyses,"Due to demanding customer needs and evolving technology, software organizations are forced to trade individual functional and non-functional product quality profiles against other factors such as cost, time, or productivity. The ability to influence or even control these factors requires a deep understanding of the complex relations between process and product attributes in relevant contexts. Based on such understanding, decision support is needed to adjust processes so that they match the product quality goals without violating given project constraints. We propose to use a Virtual Software Engineering Laboratory (VSEL) to establish such decision support cost-effectively. VSELs can be considered as being complementary to existing (empirical)
Software Engineering Laboratories. This paper gives an introduction into the cornerstones of VSELs, discusses how they complement traditional empirically based Software Engineering Laboratories (SELs), and illustrates with the help of case examples from industrial and research environments, how to use them in support of product-focused trade-off analyses.",0
An industrial case study of classifier ensembles for locating software defects,"As the application layer in embedded systems dominates over the hardware, ensuring software quality becomes a real challenge.
Software testing is the most time-consuming and costly project phase, specifically in the embedded software domain. Misclassifying
a safe code as defective increases the cost of projects, and hence leads to low margins. In this research, we present a defect
prediction model based on an ensemble of classifiers. We have collaborated with an industrial partner from the embedded systems
domain. We use our generic defect prediction models with data coming from embedded projects. The embedded systems domain is
similar to mission critical software so that the goal is to catch as many defects as possible. Therefore, the expectation
from a predictor is to get very high probability of detection (pd). On the other hand, most embedded systems in practice are commercial products, and companies would like to lower their costs
to remain competitive in their market by keeping their false alarm (pf) rates as low as possible and improving their precision rates. In our experiments, we used data collected from our industry
partners as well as publicly available data. Our results reveal that ensemble of classifiers significantly decreases pf down
to 15% while increasing precision by 43% and hence, keeping balance rates at 74%. The cost-benefit analysis of the proposed
model shows that it is enough to inspect 23% of the code on local datasets to detect around 70% of defects.

KeywordsDefect prediction–Ensemble of classifiers–Static code attributes–Embedded software",0
Software process improvement to assist medical device software development organisations to comply with the amendments to the medical device directive,"A recent revision to the European Medical Device Directive (MDD) 2007/47/EC made 14 amendments to the original directive (93/42/EEC). A number of these changes directly affect the development of software for use in healthcare. The most significant change in relation to medical device software development is that stand-alone software is now seen as an active medical device and should be developed following state-of-the-art medical device software development processes. State-of-the-art medical device software processes are understood within the industry as developing software in accordance with IEC 62304 and standards that are aligned with it. This study identifies how changes to the MDD affect medical device software development companies and recommendations are made as to how medical device software development companies can conform to the latest regulatory requirements. Additionally, the study provides an overview of how Medi SPICE is currently being developed to provide organisations with a single point of reference for the practices that should be implemented in order to produce regulatory compliant medical device software.",0
Verification and Validation and Artificial Intelligence,"Artificial Intelligence (AI) is useful. AI can deliver more functionality for reduced cost. AI should be used more widely but won't be unless developers can trust adaptive, nondeterministic, or complex AI systems.Verification and validation is one method used by software analysts to gain that trust. AI systems have features that make them hard to check using conventional V&V methods. Nevertheless, as we show in this chapter, there are enough alternative readily-available methods that enable the V&V of AI software.",0
Learning better {IV}{\&}amp$\mathsemicolon$V practices,"After data mining National Aeronautics and Space Administration (NASA) independent verification and validation (IV&V) data, we offer (a) an early life cycle predictor for project issue frequency and severity; (b) an IV&V task selector (that used the predictor to find the appropriate IV&V tasks); and (c) pruning heuristics describing what tasks to ignore, if the budget cannot accommodate all selected tasks. In ten-way cross-validation experiments, the predictor performs very well indeed: the average f-measure for predicting four classes of issue severity was over 0.9. This predictor is built using public-domain data and software. To the best of our knowledge, this is the first reproducible report of a predictor for issue frequency and severity that can be applied early in the life cycle.",0
Stable rankings for different effort models,"There exists a large and growing number of proposed estimation methods but little conclusive evidence ranking one method over
another. Prior effort estimation studies suffered from “conclusion instability”, where the rankings offered to different methods
were not stable across (a)different evaluation criteria; (b)different data sources; or (c)different random selections of
that data. This paper reports a study of 158 effort estimation methods on data sets based on COCOMO features. Four “best”
methods were detected that were consistently better than the “rest” of the other 154 methods. These rankings of “best” and
“rest” methods were stable across (a)three different evaluation criteria applied to (b)multiple data sets from two different
sources that were (c)divided into hundreds of randomly selected subsets using four different random seeds. Hence, while there
exists no single universal “best” effort estimation method, there appears to exist a small number (four) of most useful methods.
This result both complicates and simplifies effort estimation research. The complication is that any future effort estimation
analysis should be preceded by a “selection study” that finds the best local estimator. However, the simplification is that
such a study need not be labor intensive, at least for COCOMO style data sets.

KeywordsCOCOMO-Effort estimation-Data mining-Evaluation",0
Continuous and collaborative technology transfer: Software engineering research with real-time industry impact,,1
"A Project Management Approach to Using Simulation for Cost Estimation on Large, Complex Software Development Projects",,0
Proposta de melhoria para o processo de desenvolvimento de software do ex{\'{e}}rcito brasileiro com base no modelo de gest{\~{a}}o de risco e na metodologia {\'{a}}gil,,0
De-motivators of Software Process Improvement: An Analysis of Vietnamese Practitioners' Views,"We have conducted face-to-face questionnaire based survey sessions with twenty-three Vietnamese software practitioners in order to determine software process improvement (SPI) de-motivators. The main objective of this study is to provide SPI practitioners with some insight into designing appropriate SPI implementation strategies and to maximize practitioners support for SPI. We asked practitioners to choose and rank various SPI de-motivator against the five types of assessments (high, medium, low, zero or do not know). From this, we propose the notion of ’perceived value’ associated with each SPI de-motivator. We have identified ’high’ and ’medium’ perceived values demotivators that can undermine SPI initiatives. We have identified what demotivates developers and managers to be actively involved in SPI initiatives. We have also identified SPI de-motivators of small-medium and large sized organisations.",0
A Model for the Implementation of Software Process Improvement: An Empirical Study,"Advances have been made in the development of software process improvement (SPI) standards and models, i.e. Capability Maturity Model (CMM), more recently CMMI, and ISO’s SPICE. However, these advances have not been matched by equal advances in the adoption of these standards and models in software development which has resulted in limited success for many SPI efforts. The current problem with SPI is not a lack of a standard or model, but rather a lack of an effective strategy to successfully implement these standards or models. In the literature, much attention has been paid to “what activities to implement” rather than “how to implement” these activities. We believe that identification of only “what activities to implement” is not sufficient and that knowledge of “how to implement” is also required for successful implementation of SPI programmes. The aim of this research paper is to empirically explore the viewpoints and experiences of practitioners regarding SPI implementation and based on the findings to develop a model in order to guide practitioners in effectively implementing SPI programmes. This SPI implementation model has six phases and provides a very practical structure within which to implement SPI programmes in organizations.",0
A maturity model for the implementation of software process improvement: an empirical study,,0
Critical success factors for software process improvement implementation: an empirical study,"In this article, we present findings from our recent empirical study of the critical success factors (CSFs) for software process improvement (SPI) implementation with 34 SPI practitioners. The objective of this study is to provide SPI practitioners with sufficient knowledge about the nature of issues that play a positive role in the implementation of SPI programmes in order to assist them in effectively planning SPI implementation strategies.Through our empirical study we identified seven factors (higher management support, training, awareness, allocation of resources, staff involvement, experienced staff and defined SPI implementation methodology) that are generally considered critical for successfully implementing SPI. We also report on a literature survey of CSFs that impact SPI and identify six factors (senior management commitment, staff involvement, staff time and resources, training and mentoring, creating process action teams and reviews). We compared our empirical study results with the literature and confirmed the factors identified in the literature, and also identified two new CSFs (SPI awareness and defined SPI implementation methodology) that were not identified in the literature. Finally, we analyzed the CSFs identified by different groups of practitioners and found that they are aware of what is imperative for the successful implementation of SPI programmes. Copyright © 2006 John Wiley & Sons, Ltd.",0
Demotivators of software process improvement: an empirical investigation,"We have conducted an empirical study with 23 Vietnamese software practitioners to determine Software Process Improvement (SPI) demotivators. We have compared the demotivators identified by the Vietnamese practitioners with the demotivators identified by UK practitioners. The main objective of this study is to provide SPI managers with insight into the nature of factors that can hinder the success of a SPI program, so that SPI managers can better manage those demotivators to maximize practitioners' support for an SPI program.
We used face-to-face questionnaire-based survey sessions for gathering data. We also asked the participants to rank each identified SPI demotivator on a five-point scale (high, medium, low, zero or do not know) to determine the perceived importance of each demotivator. From this, we proposed the notion of ‘perceived value’ associated with each identified demotivator.
Our findings identify the ‘high’ and ‘medium’ perceived value demotivators that can undermine SPI initiatives. The findings also show that there are differences in SPI demotivators across practitioners' groups (i.e., developers and managers) and across organisational sizes (i.e. large and small-to-medium). Moreover, our results reveal the similarities and differences between SPI demotivators as perceived by practitioners in Vietnam and the United Kingdom. The findings are expected to provide SPI managers with insight to design and implement suitable strategies to deal with the identified SPI demotivators. Copyright",0
Software Process Improvement barriers: A cross-cultural comparison,ContextSoftware Process Improvement initiatives have been around for many years with the growing globalisation of software development is making them increasingly important.,0
A comparative study of software process improvement implementation success factors,,0
Maps of Lessons Learnt in Requirements Engineering: A Research Preview,"[Context and Motivation] ""Those who cannot remember the past are condemned to repeat it"" --- George Santayana. From the survey we conducted of requirements engineering (RE) practitioners, over 70% seldom use RE lessons in the RE process, though 85% of these would use such lessons if readily available. Our observation, however, is that, RE lessons are scattered, mainly implicitly, in the literature and practice, which, obviously, does not help the situation. [Problem/Question] Approximately 90% of the survey participants stated that not utilising RE lessons has significant negative impact on product quality, productivity, project delays and cost overruns. [Principal Ideas] We propose ""maps"" (or profiles) of RE lessons which, once populated, would highlight weak (dark) and strong (bright) areas of RE (and hence RE theories). Such maps would thus be: (a) a driver for research to ""light up"" the darker areas of RE and (b) a guide for practice to benefit from the brighter areas. [Contribution] The key contribution of this work is the concept of ""maps"" of RE lessons.",0
A practitioner's guide to light weight software process assessment and improvement planning,"Software process improvement (SPI) is challenging, particularly for small and medium sized enterprises. Most existing SPI frameworks are either too expensive to deploy, or do not take an organizations’ specific needs into consideration. There is a need for light weight SPI frameworks that enable practitioners to base improvement efforts on the issues that are the most critical for the specific organization.This paper presents a step-by-step guide to process assessment and improvement planning using improvement framework utilizing light weight assessment and improvement planning (iFLAP), aimed at practitioners undertaking SPI initiatives. In addition to the guide itself the industrial application of iFLAP is shown through two industrial cases. iFLAP is a packaged improvement framework, containing both assessment and improvement planning capabilities, explicitly developed to be light weight in nature. Assessment is performed by eliciting improvements issues based on the organization’s experience and knowledge. The findings are validated through triangulation utilizing multiple data sources. iFLAP actively involves practitioners in prioritizing improvement issues and identifying dependencies between them in order to package improvements, and thus establish a, for the organization, realistic improvement plan. The two cases of iFLAP application in industry are presented together with lessons learned in order to exemplify actual use of the framework as well as challenges encountered.",0
Process Simulation: A Tool for Software Project Managers?,"Process simulation has been introduced as a tool in support of software project management more than 25 years ago. Since then, it has been considered an approach with high potential for making software project managers' work more effective and successful. Unfortunately, despite high expectations and many reports on prototypical process simulation applications in industrial contexts, little evidence exists that process simulation has become an accepted and regularly used tool of software project managers. This chapter investigates the reasons for lacking impact of process simulation in the software industry. This is done with the help of an in-depth description of a software process simulation application example. The application example focuses on the effects of various workforce allocation strategies on project performance, expressed in terms of project duration, effort consumption, and product quality. With the help of the application example and based on existing literature, the gap between the current state of the art of software process simulation and the actual state of practice is described and its root-causes are discussed. The chapter concludes with a list of issues that need to be addressed in order to close the gap between the state of the art and the state of practice. Most of the issues relate to the difficulty of demonstrating a positive cost-benefit ratio when applying process simulation as a tool in support of software project management tasks. © 2014 Springer-Verlag Berlin Heidelberg. All rights are reserved.",0
Resistance Factors in Software Processes Improvement,"Several companies have been carrying out software processes improvement projects. However, some of them give up before the project ends, and others take much longer than expected to get it accomplished. This way, identifying the resistance factors that influence the implementation of such projects might serve as a reference to professionals in this area on the one hand, and help to manage future projects on the other, through the use of preventive actions that either lessen or eliminate the resistance factors’ consequences. For this matter, this chapter presents a survey with 36 professionals involved in initiatives of software processes improvement in 18 companies in the state of Rio Grande do Sul, Brazil.",0
Software product assurance at the German space agency,"The DLR Space Administration designs and implements the German space program. While project management rests with the agency, suppliers are contracted for building the space devices and their software. As opposed to many other domains, these are often unique devices with uncommon and custom-built peripherals. Its software is specifically developed for a single mission only and controls critical functionality. A small coding error can mean the loss of a mission. For this reason, customer and supplier collaborate to improve products and processes to achieve better software at the end of a project. We discuss quality in the context of space projects, and report a cross-sectional view from a customer's perspective on various management tools for influencing suppliers' processes and product quality: standards, single-source tailoring and cross-company product assurance.",0
Managing Software Process Evolution for Spacecraft from a Customer's Perspective,"The Space Administration of the German Aerospace Center designs and implements the German space program. While project management rests with the agency, suppliers are contracted for building devices and their software. As opposed to many other domains, a spacecraft is a unique device with uncommon and custom-built peripherals. Its software is specifically developed for a single mission only and often controls critical functionality. A small coding error can mean the loss of the spacecraft and mission failure. For this reason, customer and supplier closely collaborate on the field of software quality. We report from a customer’s perspective on how we manage software quality and ensure that suppliers evolve their processes: We contribute to standards, tailor quality, and process requirements to establish them in projects, and engage in cross-company product quality collaboration.",0
Emperor's New Clothes: Transparency Through Metrication in Customer-Supplier Relationships,"You software guys are too much like the weavers in the story about the Emperor and his new clothes. When I go out to check on a software development the answers I get sound like, 'We’re fantastically busy weaving this magic cloth. Just wait a while and it’ll look terrific."" But there’s nothing I can see or touch, no numbers I can relate to, no way to pick up signals that things aren’t really all that great. And there are too many people I know who have come out at the end wearing a bunch of expensive rags or nothing at all.' 

Space projects, and development of software embedded in these systems, are complex, sometimes costing hundreds of millions of Euros and involving several tiers of suppliers. An important means of improving mutual understanding is to increase transparency of the development status between customers and suppliers. We raise the problem of transparency in complex projects to the reader’s attention, and, relying on results of a small survey of practitioners, propose to use ECSS software metrics/KPIs as a mitigation. We present our metrication infrastructure, and describe issues to be considered when implementing an early metrication programme in a real-world, industry space project.

https://www.drprause.de/files/PROFES2018-EmperorNewClothes.pdf",0
Some Findings Concerning Requirements in Agile Methodologies,"gile methods have appeared as an attractive alternative to conventional methodologies. These methods try to reduce the time to market and, indirectly, the cost of the product through flexible development and deep customer involvement. The processes related to requirements have been extensively studied in literature, in most cases in the frame of conventional methods. However, conclusions of conventional methodologies could not be necessarily valid for Agile; in some issues, conventional and Agile processes are radically different. As recent surveys report, inadequate project requirements is one of the most conflictive issues in agile approaches and better understanding about this is needed. This paper describes some findings concerning requirements activities in a project developed under an agile methodology. The project intended to evolve an existing product and, therefore, some background information was available. The major difficulties encountered were related to non-functional needs and management of requirements dependencies.",0
"Impact of research on practice in the field of inspections, reviews and walkthroughs",,0
Defect prediction for Cascading Style Sheets,"Testing is a crucial activity in software development. However exhaustive testing of a given software is impossible in practice because projects have serious time and budget limitations. Therefore, software testing teams need guidance about which modules they should focus on. Defect prediction techniques are useful for this situation because they let testers to identify and focus on defect prone parts of software. These techniques are essential for software teams, because they help teams to efficiently allocate their precious resources in testing phase. Software defect prediction has been an active research area in recent years. Researchers in this field have been using different types of metrics in their prediction models. However, value of extracting static code metrics for stylesheet languages has been ignored until now. User experience is a very important part of web applications and it's mostly provided using Cascading Style Sheets (CSS). In this research, our aim is to improve defect prediction performance for web applications by utilizing metrics generated from CSS code. We generated datasets from four open source web applications to conduct our experiments. Defect prediction is then performed using three different well-known machine learning algorithms. The results revealed that static code metrics based defect prediction techniques can be performed effectively to improve quality of CSS code in web applications. Therefore we recommend utilizing domain-specific characteristics of applications in defect prediction as they result in significantly high prediction performance with low costs.",0
Framework for empirical examination and modeling structural dependencies among inhibitors that impact {SPI} implementation initiatives in software {SMEs},"Context
Since last more than one‐decade software process improvement, widely known as SPI has received the attention of the software engineering community.

Objective
The objective of the paper is to empirically examine and develop a framework to model structural dependences among inhibitors that impact SPI initiatives in software SMEs.

Methods
Authors used mixed method approach (empirical analysis and interpretive structural modeling, ISM) to evaluate, model, and analyze the association between SPI inhibitors in software SMEs.

Results
The results from empirical analysis and ISM show that lack of management commitment, lack of resources, and lack of communication and information sharing are the key SPI inhibitors. The association of various inhibitors with SPI implementation is found statistically significant with effect size (0.42 < Ø < 0.75, P < 0.05). Also, Spearman's coefficient of correlation for rankings of SPI inhibitors is found to be moderate to high, ie, 0.601 (P = 0.01 < 0.05) for SLR and interviews; 0.794 (P = 0.00) for SLR and empirical analysis; and 0.711 (P = 0.002 < 0.01) for interviews and empirical analysis.

Conclusions
Analysis of SPI inhibitors through the proposed triangulation approach and development of software process improvement inhibitors model highlights the importance of structural dependencies among the inhibitors.",0
Tracking Project Progress with Earned Value Management Metrics - A Real Case,"According to the Project Management Institute (PMI) project management consists of planning, organizing, motivating and controlling resources such as time and cost in order to produce products with acceptable quality levels. As so, project managers must monitor and control project execution, i.e. verify actual progress and performance of a project with respect to the project plan and timely identify where changes must be made on both process and product. Earned Value Management (EVM) is a valuable technique for determining and monitoring the progress of a project as it indicates performance variances based on measures related to work progress, schedule and cost information. This technique requires that a set of metrics be systematically collected throughout the entire project. A consequence is that, for large and long projects, managers may encounter difficulties in interpreting all the information collected and using it for decision-making. To assist managers in this tedious task, in this paper we classify the EVM metrics distinguishing them into five conceptual classes and present an interpretation model that managers can adopt as checklist for monitoring EVM values and tracking the project's progress. At this point of our research the decision model has been applied during an industrial project to monitor project progress and guide project manager decisions.",0
Practical considerations in deploying statistical methods for defect prediction: A case study within the Turkish telecommunications industry,"Building defect prediction models in large organizations has many challenges due to limited resources and tight schedules in the software development lifecycle. It is not easy to collect data, utilize any type of algorithm and build a permanent model at once. We have conducted a study in a large telecommunications company in Turkey to employ a software measurement program and to predict pre-release defects. Based on our prior publication, we have shared our experience in terms of the project steps (i.e. challenges and opportunities). We have further introduced new techniques that improve our earlier results.",0
Analysis of Naive Bayes' assumptions on software fault data: An empirical study,"Software defect prediction is important for reducing test times by allocating testing resources effectively. In terms of predicting the defects in software, Naive Bayes outperforms a wide range of other methods. However, Naive Bayes assumes the ‘independence’ and ‘equal importance’ of attributes. In this work, we analyze these assumptions of Naive Bayes using public software defect data from NASA. Our analysis shows that independence assumption is not harmful for software defect data with PCA pre-processing. Our results also indicate that assigning weights to static code attributes may increase the prediction performance significantly, while removing the need for feature subset selection.",0
On the relative value of cross-company and within-company data for defect prediction,,0
Design preservation over subsequent releases of a software product: a case study of Baan {ERP},"SUMMARY We present the results of two case studies we conducted at Baan in the Netherlands. At the time of conducting the case studies, Baan was part of Invensys plc. (Baan is now owned by SSA Global Technologies.) In these case studies we investigated how companies identify design erosion and address this in their software, a practice we call 'design preservation'. In this study, we selected two sub-systems in Baan products that had recently been subjected to extensive maintenance activities because they were eroded. In this paper, we analyze the problems these systems had, how Baan identified that these systems were problematic, and the remedies that were used to address the problems. In addition to confirming some of our earlier conclusions, we have been able to extract some common causes for design erosion problems as well as a number of recommended design preservation practices, which, at least for Baan, have proven to be very effective in strengthening design preservation. Copyright c � 2005 John Wiley & Sons, Ltd.",0
The adoption of software measures: A technology acceptance model ({TAM}) perspective,"The use of software measures for project management and software process improvement has been encouraged for many years. However, the low level of acceptance and use of software measures in practice has been a constant concern. In this paper we propose and test a model which explains and predicts the use of software measures. The model is based on the technology acceptance model (TAM) and operationalizes the perceived usefulness construct according to the “desirable properties of software measures.” Our research provides guidance for software engineers in selecting among different software measures and for software metrics coordinators who are planning measurement programs.",0
Experimental Validation of New Software Technology,When to apply a new technology in an organization is a critical decision for every software development organization. Earlier work defines a set of methods that the research community uses when a new technology is developed. This chapter presents a discussion of the set of methods that industrial organizations use before adopting a new technology. First there is a brief definition of the earlier research methods and then a definition of the set of industrial methods. A comparison of the two sets leads into the perspectives of these methods of experts in the research and industrial community via surveys made to those communities.,0
Education of Software Engineers,"The field of software engineering had its beginnings in the 1960s, almost 50 years ago. Since that time you would expect that significant progress has been made in understanding the models, methods, and techniques that lend themselves to proper software development. However, we are still making some of the same mistakes that were supposedly solved in the 1960s and 1970s. Industry still doesn't understand the critical importance that correct programs have in the proper functioning of society today. In this paper, several examples are given in how we are still reinventing the wheel as well as describing new challenges that will impact software engineers in the near future. © 2013 Springer-Verlag Berlin Heidelberg. All rights are reserved.",0
Situational Method Engineering: Fundamentals and Experiences,"International Federation for Information Processing The IFIP series publishes state-of-the-art results in the sciences and technologies of information and communication. The scope of the series includes: foundations of computer science; software theory and practice; education; computer applications in technology; communication systems; systems modeling and optimization; information systems; computers and society; computer systems technology; security and protection in information processing systems; artificial intelligence; and human-computer interaction. Proceedings and post-proceedings of referred international conferences in computer science and interdisciplinary fields are featured. These results often precede journal publication and represent the most current research. The principal aim of the IFIP series is to encourage education and the dissemination and exchange of information about all aspects of computing. For more information about the 300 other books in the IFIP series, please visit springer.com. For more information about IFIP, please visit ifip.org.",0
Bringing Contextual Dimensions into Improvement of Information System Development Practices,"Significant attention has been paid to the improvement of system development practices. There are theories and methods that are to be used for such improvement purposes. The criticism towards these theories and methods is that many of them have a narrow focus on the system development process, methods, and tools. Too little attention is paid to business orientation, organisational aspects and social factors. In this paper we present a framework that goes beyond this narrow focus in order to serve as a support for directing focus during improvement of system development practices. The development of the framework has been driven by experiences derived from four action research projects focusing on the improvement of system development practices. Generated categories from these experiences have been validated theoretically and internally through a multi-grounded theory development process in order to arrive at a practical theory.",0
Design Science: Perspectives from Europe,"This book constitutes the refereed proceedings of the European Design Science Symposium, EDSS 2012 held in Leixlip, Ireland, in December 2012 which was held in conjunction with the Intel European Research and Innovation Conference, ERIC 2012. The 14 papers (4 invited papers and 10 full papers) presented were carefully reviewed and selected from various submissions. The papers cover the following topics: software, formal logic, rigorous mathematics, informal natural language descriptions.",0
Designing Socially Embedded Technologies in the Real-World,"Modern organisations need to be able to adjust to changes in the environment, changes which are ever more rapid, and in doing so capitalise on the creativity and innovations of their employees. As suggested by Boulus and Bjorn (this volume), Information Technology (IT) applications today are likely to take the form of complex, integrated infrastructures, supporting collaboration within and across organisations. This places requirements on the IT infrastructure. As the work practices within an organisation change the supporting infrastructure also needs to evolve. 
This chapter presents an action research study of infrastructure development at the World Maritime University (WMU) in Malmö, Sweden, a UN-based university with a strong tradition of delegating responsibility and the commitment of the personnel to develop both work practices and supportive organisational and technical structures. The research question thus became: How can the development of an organisational IT management be based on a shop floor development strategy?",0
"Culture, Technology, Communication. Common World, Different Futures","This volume constitutes the refereed post-conference proceedings of the 10th IFIP WG 13.8 International Conference on Culture, Technology, and Communication, CaTaC 2016, held in London, UK, in June 2016.

The 9 revised full papers were carefully reviewed and selected from 22 submissions. The papers explore the intersections between culture, technology, and communication, applying different theoretical and methodological perspectives, genres, and styles. They deal with cultural attitudes towards technology and communication, interaction design, and international development.",0
Human-Computer Interaction - {INTERACT} 2017,"The four-volume set LNCS 10513—10516 constitutes the proceedings of the 16th IFIP TC 13 International Conference on Human-Computer Interaction, INTERACT 2017, held in Mumbai, India, in September 2017.
The total of 68 papers presented in these books was carefully reviewed and selected from 221 submissions. The contributions are organized in topical sections named:
Part I: adaptive design and mobile applications; aging and disabilities; assistive technology for blind users; audience engagement; co-design studies; cultural differences and communication technology; design rationale and camera-control.
Part II: digital inclusion; games; human perception, cognition and behavior; information on demand, on the move, and gesture interaction; interaction at the workplace; interaction with children.
Part III: mediated communication in health; methods and tools for user interface evaluation; multi-touch interaction; new interaction techniques; personalization and visualization; persuasive technology and rehabilitation; and pointing and target selection.",0
Human-Computer Interaction {\textendash} {INTERACT} 2017,"The four-volume set LNCS 10513—10516 constitutes the proceedings of the 16th IFIP TC 13 International Conference on Human-Computer Interaction, INTERACT 2017, held in Mumbai, India, in September 2017. 
The total of 68 papers presented in these books was carefully reviewed and selected from 221 submissions. The contributions are organized in topical sections named:
Part I: adaptive design and mobile applications; aging and disabilities; assistive technology for blind users; audience engagement; co-design studies; cultural differences and communication technology; design rationale and camera-control. Part II: digital inclusion; games; human perception, cognition and behavior; information on demand, on the move, and gesture interaction; interaction at the workplace; interaction with children. Part III: mediated communication in health; methods and tools for user interface evaluation; multi-touch interaction; new interaction techniques; personalization and visualization; persuasive technology and rehabilitation; and pointing and target selection. Part IV: security and trust; social media and design innovation; UX adoption in the organizations; virtual reality and feeling of immersion; case studies; courses; demonstrations; interactive posters; field trips.",0
Online Collaboration and Communication in Contemporary Organizations,"The digital age has introduced a deeper sense of connectivity in business environments. By relying more heavily on current technologies, organizations now experience more effective communication and collaboration opportunities. Online Collaboration and Communication in Contemporary Organizations is a critical scholarly resource that identifies the new practices and techniques for leading, knowledge sharing, and learning through the use of online collaboration. Featuring coverage on a broad range of topics such as online leadership, intercultural competence, and e-ethics, this book is geared toward professionals, managers, and researchers seeking current research on new practices for online collaboration and communication.",0
Designing for Digital Transformation. Co-Creating Services with Citizens and Industry,"This book constitutes the thoroughly refereed proceedings of the 15th International Conference on Design Science Research in Information Systems and Technology, DESRIST 2020, held in Kristiansand, Norway, in December 2020.
The 28 revised full research papers included in the volume together with 7 research-in-progress papers and 9 prototype papers, were carefully reviewed and selected from 93 submissions. They are organized in the following topical sections: digital public services; data science; design principles; methodology; platforms and networks; and service science.
Due to the Corona pandemic this event was held virtually.",0
The Emergence of Information Infrastructure Risk Management in {IT} Services,"Failure to understand, identify, and manage risk is often cited as a major cause of IT problems. While the project is the preferred level of analysis in most IT risk management research, IT is becoming increasingly infrastructural, and there is therefore a need to adapt risk strategies beyond the project level. In this paper, we explore how risk management practices in a successful IT service provider group emerged over time as the group coped with infrastructural dynamics and complexities. Drawing on Orlikowski's practice lens, we investigate actual practices and possible options related to risk management as rapid technological and organizational changes resulted in increased infrastructure management challenges for the IT service provider. Our research contributes to the IT risk management literature by applying risk theory to service management in the infrastructural domain and by moving beyond the project as level of analysis.",0
Pragmatizing the Normative Artifact: Design Science Research in Scandinavia and Beyond,,0
Artificial intelligence as digital agency,,0
Consortium Research,"Design-oriented research in the Information Systems (IS) domain aims at delivering results which are both of scientific rigor and of relevance for practitioners. Today, however, academic researchers are facing the challenge of gaining access to and capturing knowledge from the practitioner community. Against this background, the paper proposes a method for Consortium Research, which is supposed to facilitate multilateral collaboration of researchers and practitioners during the research process. The method’s design is based on a self-evaluating design process which was carried out over a period of 20 years. The paper’s contribution is twofold. First, it addresses the science of design, since it proposes guidance to researchers for practitioner collaboration during the process of artifact design. Second, the method is an artifact itself, hence, the result of a design-oriented research process.",0
Konsortialforschung,"Design-oriented research in the Information Systems (IS) domain aims at delivering results which are both of scientific rigor and of relevance for practitioners. Today, however, academic researchers are facing the challenge of gaining access to and capturing knowledge from the practitioner community. Against this background, the paper proposes a method for Consortium Research, which is supposed to facilitate multilateral collaboration of researchers and practitioners during the research process. The method’s design is based on a self-evaluating design process which was carried out over a period of 20 years. The paper’s contribution is twofold. First, it addresses the science of design, since it proposes guidance to researchers for practitioner collaboration during the process of artifact design. Second, the method is an artifact itself, hence, the result of a design-oriented research process.",0
Teaching Software Developers to Perform {UX} Tasks,"Good UX design is becoming important within the industry when developing new products. This entails that UX skills have to be available in the development processes. This paper investigates the opportunities of using software developers as a UX work resource in the day-to-day working practice. This is done via an action research study where the developers were provided with material concerning a modified AB usability test, by training them in performing this type of work, and by using their feedback to improve the method and the material. The overall result of the study is positive and it is found that by using the developers' feedback in the modification process, the method has truly become applicable within an agile, industrial setting. In combination with a guideline and template this has induced the developers to feel confident in independently performing this type of work.",0
How to reduce the {UX} bottleneck {\textendash} train your software developers,"Usability and user experience (UX) methods come from academic environments, where industrial conditions such as time and resources are not of prime importance. Furthermore, usability and UX methods originate from a time when almost all software developments followed a traditional approach, such as the waterfall model. These two facts entail that existing methods often are too resource demanding and complex to apply directly into today’s agile, industrial environments. In this paper we make the claim that methods must be updated and tailored in order to be applicable within the agile, industrial development framework of today. We pursue a solution to simplify well-known methods and to train software developers to perform the UX work. To do this, three methods are modified via an iterative process together with the development of supporting materials. Software developers in three companies are trained in the methods to assess the approach. We find that it indeed is feasible to update and tailor existing usability and UX methods to fit into an agile, industrial environment. Furthermore, we show that it is possible to train developers to perform the usability and UX methods via one-day, in-situ sessions using an ‘instructor’-teaching approach. The training is based on hands-on exercises and real-life tasks. This further boosts the developers’ confidence in performing UX work and promises a better consideration of UX in the development phases. We evaluate our approach through observations of the developers performing the UX tasks on their own at a later point in time.",0
Navigating Software Process Improvement Projects,"Software process improvement (SPI) is one of the most widely used approaches to innovate software organizations. In this study, we identify and compare two different tactics for SPI projects. The first tactic, the supertanker, is inspired by centralist thinking. It is driven by process-push, and it aims for efficient process development and diffusion. The second tactic, the motorboat, is inspired by decentralist thinking. It facilitates practice-pull, and it aims for adaptive process development and diffusion. Our analysis of 18 SPI projects at Ericsson in Gothenburg shows how the two tactics lead to different practices and outcomes. We discuss on that basis what SPI tactics to use and identify the presence of muddy and unknown waters as the key characteristic that requires motorboat tactics. We suggest that todays changing business environment calls for agile SPI practices that employ adaptive governance mechanisms at the corporate level and combines motorboat tactics with revised supertanker tactics. Full Text at Springer, may require registration or fee",0
{SPI} agility: How to navigate improvement projects,"In this study, we argue that today's changing business environment calls for agile Software Process Improvement (SPI) practices. The study combines experiences from 18 SPI projects executed from 1998 to 2002 at Ericsson in Gothenburg with insights from SPI and agility theory. We suggest that agile SPI practices are both effective and flexible; they employ adaptive governance mechanisms at the corporate level; and they combine different tactics on the project level. We identify and compare two different tactics for SPI projects. Inspired by procedural thinking, the first tactic, the supertanker, employs process-push and aims for efficient process development and diffusion. On the basis of adaptive thinking, the second tactic, the motorboat, facilitates practice-pull and aims for adaptive process development and diffusion. We also discuss how agile SPI practices require understanding of the different types of waters in which the two tactics navigate effectively. Copyright © 2006 John Wiley & Sons, Ltd.",0
{SPI} agility: How to navigate improvement projects,"In this study, we argue that today's changing business environment calls for agile Software Process Improvement (SPI) practices. The study combines experiences from 18 SPI projects executed from 1998 to 2002 at Ericsson in Gothenburg with insights from SPI and agility theory. We suggest that agile SPI practices are both effective and flexible; they employ adaptive governance mechanisms at the corporate level; and they combine different tactics on the project level. We identify and compare two different tactics for SPI projects. Inspired by procedural thinking, the first tactic, the supertanker, employs process-push and aims for efficient process development and diffusion. On the basis of adaptive thinking, the second tactic, the motorboat, facilitates practice-pull and aims for adaptive process development and diffusion. We also discuss how agile SPI practices require understanding of the different types of waters in which the two tactics navigate effectively. Copyright © 2006 John Wiley & Sons, Ltd.",0
Product innovation with scrum: A longitudinal case study,"This paper describes the innovation processes used in a partnership between a company that provides asset integrity and maintenance management consulting services in the energy sector and a university. The challenge faced by the company is to make their in-house expertise more readily available to a worldwide audience. A longitudinal embedded case study has been used to investigate how installable desktop software applications have been redesigned to create a new set of cloud hosted software services. The innovation team adapted an agile scrum process to include exploratory prototyping and manage the geographical distribution of the team members. A minimum viable product was developed that integrated functional elements of previous software tools into an end-to-end data collection, analysis and visualisation product called AimHi which uses a cloud-hosted web services approach. The paper illustrates how the scrum software development method was tailored for a product innovation context. Extended periods of evaluation and reflection (field trials), prototyping and requirement refinement were combined with periods of incremental feature development using sprints. The AimHi product emerged from a technology transfer and innovation project that has successfully reconciled conflicting demands from customers, universities, partner companies and project staff members.",0
Hierarchical Multi-tenancy in Business to Business Software Services,,0
Accounting Information Systems,"Today’s swiftly changing technology, globalization, and integration of corporations has created a need for the introduction of IAS to higher education institutes. This study explores and examines the introduction of IAS to the higher education institutes. The readiness of the institutes, the problems they face to incorporate the IAS to the curriculum. The criteria utilized by ABET focuses on content and delivery of curriculum within the IS discipline. The advantages of incorporating the IAS in the curriculum for students and faculty.",0
{ICT}-enabled Refugee Integration: A Research Agenda,,0
Action Research,"This chapter is about action research. Action research is defined as the comparative research on the conditions and effects of various forms of social action and research leading to social action. This chapter highlights the history of action research, definition of action research, characteristics of action research, stages of action research, issues of action research, credibility and validity of action research. In action research, the ultimate objective is in the perceived functionality of chosen actions to produce desirable consequences for an organization.",0
A tailored participatory action research for foss communities,"Participatory Action Research (PAR) is an established method to implement change in organizations. However, it cannot be applied in the open source (FOSS) communities, without adaptation to their particularities, especially to the specific control mechanisms developed in FOSS. FOSS communities are self-managed, and rely on consensus to reach decisions. This study proposes a PAR framework specifically tailored to FOSS communities. We successfully applied the framework to implement a set of quality assurance interventions in the Robot Operating System community. The framework we proposed is composed of three components, interventions design, democratization, and execution. We believe that this process will work for other FOSS communities too. We have learned that changing a particular aspect of a FOSS community is arduous. To achieve success the change must rally the community around it for support and attract motivated volunteers to implement the interventions.",0
Collaborative design research: Lessons from continuous auditing,"In this paper we discuss Collaborative Design Research – a hybrid methodology for undertaking design science research in collaboration with industry partners – that has been applied to the area of Continuous Auditing and which also has wider applicability to AIS research. Collaborative Design Research has a role at the time in the evolution of a field when early adopting practitioners have made the decision to implement an innovation, but there is as yet no established product or set of best practices that makes it obvious what they should do. We discuss eight key issues facing researchers attempting to do collaborative design research: 1) choice of implementation partner (IP), 2) choice of projects, 3) managing expectations, 4) building on the expertise of the IP, 5) introducing innovation to the IP, 6) project evaluation and reassessment, 7) cost and resource management, and 8) publishing results.",0
Deconstructive Design as an Approach for Opening Trading Zones,"This chapter presents a critical approach to software development that implements reflective competences in software engineering teams. It is grounded within qualitative research on software engineering and critical design practice and presents conceptual work in progress. Software development is a socio-technological process of negotiation that requires mediation of different approaches. Research on the co-construction of society and technology and on the social shaping of technological artefacts and processes has highlighted social dimensions such as gender and diversity discourses that implicitly inform development practices. To help design teams implement reflective competences in this area, the authors introduce 'deconstructive design'-a critical-design approach that uses deconstruction as a tool to disclose collective processes of meaning construction. For this purpose, the idea of value-sensitive design is linked to approaches of practice-based, situated and context-sensitive learning and to the concepts of 'trading zones' and 'boundary objects'.",0
Mind Scripting,,0
Designing for collaborative interpretation in telemonitoring: Re-introducing patients as diagnostic agents,,0
Improving diffusion practices in a software organization,"Methods and tools that support systems development (SD) are usually motivated by a promise of better quality or increased productivity. In large software organizations specialised methods departments often manage these methods and tools. However these methods departments often focus more on purchase, tailoring and maintenance of technologies rather than on systematically diffusing methods and tools into current practices. This paper reports from a systematic improvement initiative in a large software organization. The aim of this effort was to diagnose diffusion practices, evaluate and adapt a service that can improve diffusion practices, and to diffuse this new service. Insights from this initiativet together with theoretical reflections on diffusion of SD technologies are provided. It is suggested that provision of services that help projects understand and plan diffusion of new SD technologies can play a key role in developing the focus and competencies needed to improve diffusion practices in large software organizations.",0
Transforming a Method Department,"Large software organizations establish method departments to manage methods and tools aimed at supporting their software development activities. This division between software development and new technologies for software development helps develop specialized competencies, it supports standardization across software projects and departments, and it provides dedicated resources for innovation. In practice, however, such method departments are seldom perceived as sufficiently successful in diffusing new methods and tools. Reasons for this unsatisfactory performance may be found in the selfperception, learning mechanisms, and diffusion practices of these method departments.
This paper reports from practical attempts to change the attitudes and practices of a method department in a large software organization. Insights from these activities are provided together with theoretical reflections on the underlying learning and change mechanisms. It is suggested that method departments should change their role from technology supplier to service provider. The argument is concluded with practical advice on how to facilitate such a transformation.",0
Controlling action research projects,"Action research (AR), which emphasises collaboration between researchers and practitioners, is a qualitative research method that has much potential for the information systems (IS) field. AR studies of IS phenomena are now beginning to be published in the IS research literature. However, the rigour of many AR studies in IS can be improved. When AR has been published, the findings have frequently been emphasised at the expense of the process. In this article, we look at the process in AR projects, and look at some of the key choices and alternatives in controlling AR. We discuss three aspects of control: the procedures for initiating an AR project, those for determining authority within the project, and the degree of formalisation. We analyse seven recent AR projects in IS and from this analysis distil recommendations for determining these control structures.",0
Leveraging Information Technology to Support Agents of World Benefit,,0
Measuring Process Innovations and Improvements,"A major challenge in process improvement is to understand process innovation and improvement efficiency and use. How do we know that process innovations and improvements give organizational benefits? We need a mechanism for measuring. In this paper, we report from a longitudinal action research study at the telecom company Ericsson where a measurement mechanism was designed and successfully used in practice to understand, learn, and measure process efficiency. In the concrete, the measurement mechanism was built through empirical testing combined with using a goalquestionmetrics (GQM) approach. The resulting measurement mechanism consists of four correlated metrics that indicate process use, process commitment, process learning, and process improvement. The same measurement mechanism can also be used to obtain feedback and evaluation, thereby allowing the organization to determine process efficiency and use, and to determine the success of the process improvements. Full Text at Springer, may require registration or fee",0
Use of Appreciative Inquiry in Successful Process Improvement,"Traditionally, software processes improvement (SPI) has been approached. from a problem-oriented perspective, focusing on
diagnosing and solving problems using methods such as the IDEAL model and DMAIC. In contrast, appreciative inquiry is an approach
that focuses on what is best in an organization in order to further develop this to create a better future. It is, therefore,
interesting to explore if and how software organizations familiar with problem-solving approaches can benefit from using appreciative
inquiry. In this paper, we present an action research study conducted at the telecom company Ericsson in Sweden. Appreciative
inquiry was used to facilitate an SPI initiative implementing a new process and tool for requirements and test case management.
While the SPI initiative was considered successful, important lessons were learned regarding the application of appreciative
inquiry. We conclude that the use of appreciative inquiry does not eliminate the dependence of other well-known key factors
for SPI success. Also, the study indicates that the preference and satisfaction of problem-solving among individuals familiar
with problem-oriented approaches may impede the use of appreciative inquiry.",0
Crossing the Chasm in Software Process Improvement,"Software process improvement (SPI) is a well-known approach to enhance software quality and business efficiency. The approach has been widely used, discussed, adopted, and criticized within the software community since Watts Humphreys introduction of SPI in 1989. SPI is a particular instance of diffusion of innovations. One challenging difficulty within diffusion of innovations is crossing the chasm between early adopters and early majority. To explore this issue in relation to SPI, we have studied an initiative implementing a new change request process and tool at the telecom company Ericsson AB in Gothenburg, Sweden. An action research approach was adopted with the double purpose of supporting the SPI initiative toward success while at the same time learning about tactics that SPI change agents can adopt to successfully cross the chasm. The study identifies a tactic, the guerrilla tactic, that SPI change agents can use to successfully cross the chasm and it discusses lessons from practicing this tactic in relation to the SPI and diffusion of innovation literature. Full Text at Springer, may require registration or fee",0
Organisational Dynamics in the Software Process Improvement: The Agility Challenge,"It is a challenge to keep up momentum in Software Process Improvement (SPI) during organizational changes. SPI initiatives get interrupted, are sidetracked and progress slowly when changes occur in the target organization. This paper explores this crucial relation between SPI initiatives and the dynamics of the organization to be changed. The study builds on longitudinal data from the introduction of a new approach to requirements management into a software unit within Ericsson. Our focus is on the challenges involved in managing the SPI initiative as a sequence of organizational changes occurs in software development. We discuss the findings from this study in relation to the SPI literature and the literature on organizational agility and software agility. Our research indicates that SPI can benefit from agility ideas if the innovations are integrated well with other agility initiatives within the software organization. We therefore suggest that there is a need to coordinate and align the software agility movement with SPI issues to arrive at a comprehensive and holistic understanding of how software organizations can respond effectively to dynamics in their environment. Full Text at Springer, may require registration or fee",0
Improving software organizations: agility challenges and implications,"Purpose
The paper seeks to explore the impact of events in Software Process Improvement (SPI) environments based on a longitudinal study of a requirements management initiative at Ericsson.

Design/methodology/approach
The paper presents the initiative from three perspectives – the improvement initiative, the targeted software practices, and the environment.

Findings
SPI initiatives easily get interrupted, are side‐tracked, and progress slowly due to changing environments. While most practitioners are painfully aware of this, the SPI literature has so far only touched on the issue. Agility principles would have helped Ericsson respond more effectively to events that impacted the initiative. Development of agile SPI practices requires coordination and alignment with other initiatives to develop agile software organizations.

Originality/value
SPI has been adopted by many organizations to help them to deliver quality software. However, its success is a matter of debate and this paper deals with the issues involved.",0
Agile improvement practices in software organizations,"Inspired by the chasm between early adopters and early majority in diffusion of technological innovations, this paper investigates how agile improvement practices can help software organizations successfully implement new processes. An action research-based improvement initiative implemented a new change-request process and tool at the telecom company Ericsson AB in Gothenburg, Sweden. The study identifies a 'guerilla tactic' that change agents can use in software organizations to cross the chasm, and it discusses lessons learned in relation to literature on diffusion of innovation and software agility. The contribution of the study is that the guerrilla tactic supports agile improvement practices and facilitates successful implementation.",0
Appreciating Lessons Learned,"Although lessons-learned activities aid software process improvement, few IT industry organizations regularly and adequately conduct them. Recent studies explain why, identifying 19 barriers for conducting lessons learned. The Postmortem Evaluation theory proposes that organizations almost only focus on what went wrong. 4ALL, a new lessons-learned method based on the appreciative inquiry approach, aims to facilitate learning. It was developed and evaluated in close collaboration with Ericsson. Through attentive moderating and careful timing, the 4ALL method emphasizes the importance of balancing excellences and challenges. It radically increases the identification of excellences and how to learn from what went right, enhancing participants' pride, and significantly increasing the appreciation of lessons-learned workshops at Ericsson.",0
Reflective Technology Assimilation: Facilitating Electronic Health Record Assimilation in Small Physician Practices,"Effectively incorporating complex technology into organizational practices requires moving beyond initial plateaus of postadoption usage. However, achieving this is especially challenging for small businesses because competing priorities in addition to resource and attention constraints may lead to technology assimilation satisficing. With this context in mind, we conducted a four-year action research project in which we supported electronic health record (EHR) assimilation in 10 small physician practices by facilitating reflections to help these small organizations move beyond an initial plateau of postadoption EHR usage. Drawing from these results, we theorize reflective technology assimilation (RTA) as an emergent process of facilitating deeper learning and reflection within and across small resource- and attention-constrained organizations to enable ongoing technology assimilation. In addition, we articulate the foundational principles for reflective action research (RAR) as an approach in which researchers facilitate reflective problem solving while advancing theoretical knowledge.",0
Software Process Improvement Based on the Method Engineering Principles,"While it used to be a common belief that the use of rigorous methods in software development is beneficial if not compulsory
to assure success of software development projects, the investigations in practice reveal developers often avoid to follow
prescribed methods and that there is a wide gap between the organizations’ official methods and the work actually performed
by their developers in IT projects. According to the literature, there are many reasons contributing to this rather undesirable
situation. The two of them are rigidity of methods and their social inappropriateness. In the MasterProc project we have addressed these issues by developing a framework and tool-support for the reengineering of software development
methods. Using the framework an organisation can reengineer its existing ways of working into a method that is organisation-specific and auto-adjustable to specifics of its projects. The evaluation that was performed in five partner companies is motivating, as it shows the
framework can be very useful in improving software development practice. This paper describes the framework philosophy and
its main components.",0
Practice-driven approach for creating project-specific software development methods,"Both practitioners and researchers agree that if software development methods were more adjustable to project-specific situations, this would increase their use in practice. Empirical investigations show that otherwise methods exist just on paper while in practice developers avoid them or do not follow them rigorously. In this paper we present an approach that deals with this problem. Process Configuration, as we named the approach, tells how to create a project-specific method from an existing one, taking into account the project circumstances. Compared to other approaches that deal with the creation of project-specific methods, our approach tends to be more flexible and easier to implement in practice as it introduces few simplifications. The proposed approach is practice-driven, i.e. it has been developed in cooperation with software development companies.",0
A Framework and Tool-Support for Reengineering Software Development Methods,"The purpose of the research described in this paper is to propose a framework and sup- porting tools that will help software companies to establish formalised methods that will be tech- nically and socially sound with their needs. Following the framework the companies can asses and improve their existing ways of working, capture them into formalised methods and continuously enrich them based on the past development experiences. Furthermore, the formalised methods that are designed based on the suggested framework are flexible and can be automatically adjusted by the supporting tools to suite circumstances of a particular project or team. This paper describes the framework philosophy and its tool support.",0
Adoption of {UX} Evaluation in Practice: An Action Research Study in a Software Organization,"This paper describes an action research study focusing on adoption of UX and UX evaluation methods in a software organisation. The aim of adopting UX was to exceed a traditional approach to design of banking applications. The action research study involved collaboration over several months between the researchers and a group of developers with no prior knowledge of UX. The study demonstrates how UX methods can be introduced in an IT organisation and how UX decisions can be prioritised in the software industry. Focusing on understanding, supporting and improving the practice of the development team, we employed several adoption activities of UX evaluation methods by presenting these in a visual form (video records) and a practical form (workshops). Our results show that specific UX materials have been adopted in the development process of the IT department. Based on the study, we present our experience with adopting UX in an IT organisation with focus on the collaboration process, working with the UX definition, and the obstacles that occurred during the collaboration.",0
Software Service Innovation Through Release Management: An Action Research Study,,0
Applying service-dominant logic to recurrent release of software: an action research study,,0
Fashion Waves in Information Systems Research and Practice,"Building on neo-institutional theory and theories of innovation and diffusion, recent work in the field of management has suggested that management research and practice is characterized by fashions. A management fashion is a relatively transitory belief that a certain management technique leads rational management progress. Using bibliographic research, we apply Abrahamson's management fashion theory to information systems research and practice. Our findings reveal that information systems research and practice, like management research and practice, is indeed characterized by fashions. These ""IS fashion waves"" are relatively transitory and represent a burst of interest in particular topics by IS researchers and practitioners. However, while our findings show that IS research closely parallels practice, we suggest that a more proactive engagement of IS academics is needed in the IS fashion-setting process.",0
Clinical research from information systems practice,"An increasing presence of practitioners with doctoral degrees in Information Systems and related disciplines holds promise to advance Information Systems research. The prospect is to gain more knowledge from the practical experience of developing, using, and managing information systems in context. To scientifically capitalise on this opportunity, this EJIS special issue introduces the research genre of “Information Systems Clinical Research”. The genre presents knowledge generated from practitioner-researcher interventions to achieve desired outcomes in information systems development, use, and management practice contexts. In this editorial, we introduce and conceptualise the genre; we present a research framework that defines its four key elements; and we discuss how to address its key challenges in research projects. As a result, we derive ten criteria for rigorous Information Systems Clinical Research and provide examples on how the articles published in the special issue have addressed these criteria. We conclude with a call to further advance clinical research as an important part of the Information Systems discipline.",0
Scrum for Product Innovation: A Longitudinal Embedded Case Study,,0
On governance for re-engineering city infrastructure,"Given the challenge of re-engineering the infrastructure of a city so that it may become a force for good in the environment, what structure of governance might promote/stifle any associated technological and technical innovations? How might the 'quality' of the sought-for governance be gauged and improved? Cultural theory is introduced to address these questions and briefly elaborated. In particular, it is shown how cultural theory can be used to refurbish Dahl's theory of pluralist democracy and provide a simple (and visual) metric of deliberative quality in governance. Matters of re-engineering the water-nutrient infrastructures of the city of Atlanta within the Chattahoochee watershed in the southeastern USA provide the primary setting for eventually applying the resulting conceptual framework. Drawing together a somewhat eclectic mix of past experience and prospective approaches - ranging from practical resolutions of water conflicts in Nepal, lessons learned from previous community engagement in the Atlanta-Chattahoochee system, and two stagings of the sustainability agora of the International Water Association - a cultural theory-inspired programme of work is developed to explore and assemble those elements of governance that should, in practice, enable the re-engineering needed for a city to become a force for good in its environment.",0
Data Governance as a Collective Action Problem,"While governing data as an organizational asset has clear benefits, mobilizing an organization to implement data governance remains elusive for practitioners. On that account, this paper examines why governing data is difficult in local government organizations. Based on a literature review and an empirical case study, we establish the inherent challenges and build on the notion of collective action to theorize the problem of data governance. Following an engaged scholarship approach, we collect empirical material through six group interviews with 34 representatives from 13 different Danish municipalities. We extend existing data governance research with our problem triangle that identifies and explicates the complex relations between six distinct challenges: value, collaboration, capabilities, overview, practices, and politics. We demonstrate the value in theorizing data governance as a collective action problem and argue for the necessity of ensuring researchers and practitioners achieve a common understanding of the inherent challenges, as a first step towards developing data governance solutions that are viable in practice.",0
Data Governance as a Collective Action Problem,"While governing data as an organizational asset has clear benefits, mobilizing an organization to implement data governance remains elusive for practitioners. On that account, this paper examines why governing data is difficult in local government organizations. Based on a literature review and an empirical case study, we establish the inherent challenges and build on the notion of collective action to theorize the problem of data governance. Following an engaged scholarship approach, we collect empirical material through six group interviews with 34 representatives from 13 different Danish municipalities. We extend existing data governance research with our problem triangle that identifies and explicates the complex relations between six distinct challenges: value, collaboration, capabilities, overview, practices, and politics. We demonstrate the value in theorizing data governance as a collective action problem and argue for the necessity of ensuring researchers and practitioners achieve a common understanding of the inherent challenges, as a first step towards developing data governance solutions that are viable in practice.",0
Nine Challenges for e-Government Action Researchers,"Action research is widespread in many of the background disciplines that underpin the e-Government field and is beginning to take root as a legitimate e-Government research method. Canonical Action Research (CAR) is the most widely used form of action research; however it relies on premises that can be problematic in the e-Government context. This article details some of those underlying assumptions, and shows the difficulties that result when applied to a relatively typical e-Government case study: the implementation of an advanced email system in Danish public administration. The empirical experience calls many of the standard premises into question, and these are categorised. The authors summarize the resulting experience as nine challenges for action researchers working in the e-Government field, and investigate some possible responses.",0
Groupware Integration in Virtual Learning Teams,"In this paper we apply Davis Technology Acceptance Model (TAM) in a qualitative fashion to analyze and interpret the chronological sequence of events leading to the acceptance of the Groupware technology, BSCW, in a virtual learning team. The research question investigated is: What are the factors influencing the integration process of Groupware technology in virtual learning teams in part-time adult education? The data were gathered through an in-depth qualitative action research study of one virtual learning team doing problem-oriented project work within a master education program. We find that one important factor influencing the integration process of Groupware is: How the technology provides support for social perspective awareness. In the case investigated the technology BSCW supported social awareness, which influenced both the ease-of-use and the perceived-usefulness of the Groupware technology, thus being an important condition that influenced the positive outcome of the integration process. Full Text at Springer, may require registration or fee",0
Boundary factors and contextual contingencies: configuring electronic templates for healthcare professionals,"In this paper, we propose an approach to balance the legitimate and yet conflicting perspectives between standardization and reconfiguration embedded within hospital information systems (HIS) design activities. We report on an action research study of the customization process of an electronic triage and tracking system that was reconfigured to be used in eight Canadian emergency departments. We argue that during HIS design activities, it is essential for both practitioners and system designers to articulate and identify which aspects can be standardized without constraining important local flexibility and which aspects require local reconfiguration to function in a particular work context. To identify these differences, we suggest an analytical distinction between boundary factors and contextual contingencies, which can be used in a design and reconfiguration process. We argue that the process of designing shared electronic templates should be perceived as a common design process, where multiple stakeholders articulate, identify, and negotiate boundary factors and contextual contingencies. Boundary factors are then represented within the shared electronic system, whereas contextual contingencies form the basis for constructing localized versions of the shared application. All local versions include both boundary factors and the reconfigured contextual contingencies.",0
Building Efficient Assessment Applications with Personalized Feedback,"The aim of this chapter is to provide a model for requirement specification, useful in developing efficient e-assessment applications with personalized feedback, which is enhanced by calling a recommender engine. The research was done in the context of using educational technology to facilitate learning processes. The data used to build the requirement model was collected from a set of interviews with the users and creators of an e-assessment application in project management. Requirement analysis assumes human effort and thus introduces uncertainties. To minimize the subjective factor, the data extracted from interviews with the users and the developers of the existing e-assessment application are clustered using a fuzzy logic solution into classes of requirements. These classes are the units of the model. The connections between classes are also mentioned: relations such as ""if-then,"" ""switch,"" or"" contains"" are explained. The requirements analysis conducts a smart set of specifications, obtained in a collaborative manner, useful for the design of e-assessment applications in project management or other similar domains.",0
Educating the Global Maritime Professional{\textemdash}a case of collaborative e-learning,,0
Making {SPI} happen: the {IDEAL} distribution of effort,Software process improvement (SPI) has become one of the most widely used approaches to increase the capability of software organisations. Many organisations experience a successful start on their SPI initiatives only to realise that the commitment to change weakens significantly after a first phase of initial excitement. This paper explores this problem based on experiences from Ericsson. Two quite similar SPI initiatives situated within the same organisational context are compared and contrasted. Both initiatives were carefully planned and managed following the IDEAL process; they got of to a successful start; and they both developed new or improved processes. But only one of the initiatives led to improvements of engineering practices while the other had little or no effect on the software operation at Ericsson. Our research shows that the effort of the two SPI initiatives is distributed quite differently between the phases of the IDEAL model and between generic actions and actions dedicated to particular software projects. The paper explores this phenomenon both as an indicator and possible explanation of differences in implementation success. Interpretations relating to key issues in SPI are offered together with a discussion of implications for research and practice.,0
Improve by improving software process improvers,"With business environments constantly changing, organisations and individuals must execute and learn in parallel to ensure they can solve today's problems and plan for tomorrow's. This action research explores how action learning can improve Software Process Improvement (SPI) success by 'improving the improvers'. The strategy is to engage SPI teams in theory studies and relate these studies to daily work to help them critically reflect on practice improvements. SPI change agents at Ericsson AB in Gothenburg, Sweden, took on this challenge, participating in a year-long action learning effort. This study presents detailed data about that effort and its impact on the organisation's SPI success rate. Four action-learning activities literature studies, workshop participation, SPI project meetings, and one-on-one coaching serve as a lens to understand and assess the effort's value. The data suggests that action learning is a useful approach for improving SPI change agents' understanding and reflection capabilities, thereby increasing the SPI success rate.",0
Aligning {IT} Strategy with Business Strategy through the Balanced Scorecard in a Multinational Pharmaceutical Company,"In this article, we look at the use of the balanced scorecard and how it can be used to align business and IT strategies. In particular, we have made a study of how the pharmaceutical company AstraZeneca (AZ) uses their method called the business performance management (BPeM). We have related this to the balanced scorecard and compared how they have broken down strategies, objectives, targets and measurements on both the business and IT sides of the company to see if they have alignment between business and IT. We have analysed the results of the case study in two parts firstly, a review against Henderson's and Venkatraman's strategic alignment mode (1999) and secondly, against a balanced scorecard as defined by Kaplan and Norton (1996). From these results, we appraise the level of alignment between business and IT by implementing a simple comparison process",0
Distributed Problem Solving in Software Development,"This paper describes the study of the distribution and integration of knowledge in a small control system development project called the Automation System for Agricultural Implements (AGRIX). The activity of integrating socially distributed knowledge is called knowledge networking. We distinguish between three modes of knowledge networking - modular, integral and translational - and argue that the project team's task-specific selection of a knowledge networking mode depends on the nature of the problem to be solved. We propose that groups tend to select different kinds of knowledge networking strategies, depending on whether the problem is perceived as well- or ill-defined. We found that the AGRIX team worked with well-defined problems in modular and translational ways, while treating ill-defined problems with integral knowledge networking. We also observed that, in the absence of major constraints, the networking mode co-evolved dynamically with the problem structure, even though the organizational core of the project remained unchanged. This suggests that our proposal is plausible and should be investigated more systematically.",0
{BRIDGING} {DESIGN} {THINKING} {AND} {ENTRECOMP} {FOR} {ENTREPRENEURSHIP} {WORKSHOPS}: A {LEARNING} {EXPERIENCE},"Design Thinking (DT) is commonly used in Entrepreneurship Education, however it's capacity to support entrepreneurial competencies has not been explored sufficiently. In this study, we used a multi-method approach to gain an in-depth understanding of participants' learning journeys in two early entrepreneurship events. These were structured around DT and specifically IDEO's implementation of Human Centred Design (HCD). Through semi-structured interviews and non-participant observation we were able to link the stages of HCD to specific competencies and identify competencies that manifest across the wider process. We draw conclusions on the contribution of DT in the development of these competencies and make suggestions for using EntreComp to add nuance to DT interventions. Finally we discuss the impact of facilitation, professionalism, customization and logistical factors on the success of DT interventions.",0
Managing Information Systems Integration in Corporate Mergers and Acquisitions,"In this chapter, we focus the role of information systems (IS) integration in the context of corporate mergers and acquisitions (M&As). We address the domain from a management perspective and especially target the consequences IS integration has for the acquisition initiative. Based on a literature review, the chapter presents a framework for describing, explaining and managing IS integration in M&As. The framework is suitable both for academics conducting scientific research on IS in M&As as well as business professionals considering an acquisition or merger. The usefulness and validity of the framework is shown by a case study: the Trelleborg Industrial Hose acquisition and IS integration. Based on the framework, the case and relevant literature lessons learned and future research needs are presented and discussed.",0
Advancing Qualitative {IS} Research Methodologies: Expanding Horizons and Seeking New Paths,"The purpose of the special issue is to foster and contribute to methodological advances of qualitative research, including new philosophical approaches and innovative research designs and methods that enable more profound, critically engaged, practically relevant, and reflexive insights into information systems and organizing in the digital era. With this special issue, we seek to reignite the debate about methodological questions and invite information systems (IS) scholars to think differently about emerging and increasingly intertwined social and technological phenomena and explore bold visions and methodological innovations in conducting IS inquiries.",0
A Model-Driven Approach for the Design and Implementation of Software Development Methods,"The Situational Method Engineering (SME) discipline emerged two decades ago to address the challenge of the in-house definition of software development methods and the construction of the corresponding supporting tools. Unfortunately, current SME approaches still have limitations that are hindering their adoption by industry. One of these limitations is that most approaches do not properly encompass two phases of the SME lifecycle, which refer to the method design and the method implementation. To address this limitation, this paper demonstrates how Model-Driven Development (MDD) techniques can contribute to successfully cover both phases. The proposal is illustrated by a real case study that is currently being used at the Valencian Regional Ministry of Infrastructure, Territory and Environment.",0
An integrated framework for service engineering,"Service engineering, the application of engineering disciplines to develop service-oriented enterprise systems (service systems) with predicable results, has faced a brand new array of challenges in recent years. Existing development approaches that might help addressing these challenges are scattered in separate research fields or in different units of an organization, just like the ""blind men and the elephant."" This article presents a 3-year action research case study with a Fortune 50 company in the financial services industry, validating an integrated service-oriented business-IT alignment framework, called the BITAM-SOA Framework, to shed light on complex service engineering issues, including the interplay between business-IT alignment approaches (alignment via architecture, via governance and via communication) and Service Oriented Architecture adoption as well as methodological challenges of service engineering. The importance of the social dimension of service engineering is illuminated. The results yield lessons learned, managerial insights and integrated methods for effective service engineering.",0
From Software Architecture Analysis to Service Engineering: An Empirical Study of Methodology Development for Enterprise {SOA} Implementation,"This paper presents an integrated service-oriented enterprise system development framework (called the BITAM-SOA Framework) as well as an instantiated design process model (called the Service Engineering Schematic) that was a result from a three-year action research case study with a Fortune 50 company in the financial services industry. The BITAM-SOA Framework and Schematic advance are both business-IT alignment and software architecture analysis techniques supporting the engineering of enterprise-wide service-oriented systems-that is, service engineering.",0
Big Data System Development: An Embedded Case Study with a Global Outsourcing Firm,,0
Agile Big Data Analytics for Web-Based Systems: An Architecture-Centric Approach,"This article contributes an architecture-centric methodology, called AABA ( A rchitecture-centric A gile B ig data A nalytics), to address the technical, organizational, and rapid technology change challenges of both big data system development and agile delivery of big data analytics for Web-based Systems (WBS). As the first of its kind, AABA fills a methodological void by adopting an architecture-centric approach, advancing and integrating software architecture analysis and design, big data modeling and agile practices. This article describes how AABA was developed, evolved and validated simultaneously in 10 empirical WBS case studies through three CPR (Collaborative Practice Research) cycles. In addition, this article presents an 11th case study illustrating the processes, methods and techniques/tools in AABA for cost-effectively achieving business goals and architecture agility in a large scale WBS. All 11 case studies showed that architecture-centric design, development, and operation is key to taming technical complexity and achieving agility necessary for successful WBS big data analytics development. Our contribution is novel and important. The use of reference architectures, a design concepts catalog and architectural spikes in AABA are advancements to architecture design methods. In addition, our architecture-centric approach to DevOps was critical for achieving strategic control over continuous big data value delivery for WBS.",0
Agile Big Data Analytics Development: An Architecture-Centric Approach,,0
Pluralist action research: a review of the information systems literature,"Abstract Action research (AR) has for many years been promoted and practised as one way to conduct field studies within the information systems (IS) discipline. Based on a review of articles published in leading journals, we explore how IS researchers practise AR. Our review suggests that AR lends itself strongly towards pluralist approaches which facilitate the production of both theoretical and practical knowledge. First, on the level of each study we analyse how research and problem-solving activities are mixed, in three ways: the research dominant, the problem-solving dominant and the interactive approaches. Second, in the context of the wider research programme in which the study is situated, we analyse how AR is mixed with other research methods, in two ways: the dominant and the sequential approaches. We argue that these pluralist practices of mixing types of research activities and types of research methods provide IS action researchers with a rich portfolio of approaches to knowledge production. This portfolio helps them address the risks involved in AR to ensure their efforts contribute to the literature as well as to practical problem-solving.",0
Challenges and Opportunities Related to Remote Diagnostics,"Remote diagnostics is expanding the business scope of vehicle manufacturers, ranging from products to services. In this paper, the authors focus on investigating the business challenges and opportunities related to the remote diagnostics of vehicles from an IT-based resource perspective. Remote diagnostics involves technology, human skills and intangibles. IT-based resources consist of physical IT infrastructure, human IT skills and IT-enabled intangibles. In this study, the authors find that remote diagnostics not only faces challenges in these three categories of IT-based resource, but also creates opportunities. One contribution of this paper is to provide an overview of the challenges and opportunities for business related to the technology. The paper also makes a contribution to information systems by shedding light on the discussion of digital infrastructure. It also highlights the application of IT-based resource perspective to find out the business challenges and opportunities of an emerging technology like remote diagnostics.",0
Exploring Opportunities with Experimental Use of Communicative Spaces to Overcome Defensive Routines and Increase Information Systems Utilization,"Both organizations and the information technology (IT) community have long worked to overcome the common problem of dissatisfaction with IT investments’ outcomes in multiple ways. Much attention has been on users’ involvement in IT design, while users’ engagement in later further utilization of IT is less explored. This paper reports on action research (AR) that sought to stimulate local learning processes and increase the exploitation of a case-handling system. The experiment is done in a county administration where the senior management has, for some time, felt that the IT is not fully utilized. The local intervention was based on an awareness of a need to overcome defensive routines to establish communicative spaces to facilitate communication between various units with strong local identities. The AR project was carried out in three local interventions and presented as an experimental approach. We could not guarantee that the design could overcome the issues identified after the first round of interviews with senior management and department managers. The intervention process espoused various defensive routines, even some that the communicative space approach could not overcome. The outcomes from the three experiments are, therefore, mixed. The results indicate that creating communicative spaces is a viable approach to engaging users in systems development. Nevertheless, defensive routines, reluctant managers, and communities of practices hamper the development of communicative spaces.",0
Exploring Opportunities with Experimental Use of Communicative Spaces to Overcome Defensive Routines and Increase Information Systems Utilization,"Both organizations and the information technology (IT) community have long worked to overcome the common problem of dissatisfaction with IT investments’ outcomes in multiple ways. Much attention has been on users’ involvement in IT design, while users’ engagement in later further utilization of IT is less explored. This paper reports on action research (AR) that sought to stimulate local learning processes and increase the exploitation of a case-handling system. The experiment is done in a county administration where the senior management has, for some time, felt that the IT is not fully utilized. The local intervention was based on an awareness of a need to overcome defensive routines to establish communicative spaces to facilitate communication between various units with strong local identities. The AR project was carried out in three local interventions and presented as an experimental approach. We could not guarantee that the design could overcome the issues identified after the first round of interviews with senior management and department managers. The intervention process espoused various defensive routines, even some that the communicative space approach could not overcome. The outcomes from the three experiments are, therefore, mixed. The results indicate that creating communicative spaces is a viable approach to engaging users in systems development. Nevertheless, defensive routines, reluctant managers, and communities of practices hamper the development of communicative spaces.",0
Mobilising knowledge: an action design research case study of using technology to safeguard an endangered nature-based tourism attraction,"This paper considers how an Action Design Research (ADR) research methodology can contribute to impactful research in sustainable tourism. ADR arguably combines the best of Action Research with Design Science, by solving an applied problem within its contextual setting (a feature of Action Research) and drawing wider lessons or universal principles from the solution (a feature of Design Science). It argues that approaches like ADR are required to address what is a fundamentally goal-oriented (through the very definition of sustainable tourism) area of research, and bridge the academic-practitioner divide. The paper presents an ADR case study on using technology to build the eco-literacy of tourists visiting Australia’s Great Barrier Reef. This natural attraction represents a highly complex ecosystem, in an educationally challenging (underwater) environment, surrounded by political and scientific controversy. The case study involves the creation of a virtual reality interpretive game (the artefact) to illustrate the four stages of ADR, namely, Problem Formulation; Build, Intervene, Evaluate; Reflect and Learn; Formalise Learning. The case study highlights the importance of ADR’s principles of “reciprocal shaping”, “mutually influencing roles” and “authentic and concurrent evaluation” to bridge the gap between practice and theory, and build impactful research that can support more sustainable tourism.",0
Bridging the Research-Practice Gap in Requirements Engineering through Effective Teaching and Peer Learning,"In this paper, we introduce the concept of the research-practice gap as it is perceived in the field of software requirements engineering. An analysis of this gap has shown that two key causes for the research-practice gap are lack of effective communication and the relatively light coverage of requirements engineering material in University programmes. We discuss the design and delivery of a masters course in software requirements engineering (SRE) that is designed to overcome some of the issues that have caused the research-practice gap. By encouraging students to share their experiences in a peer learning environment, we aim to improve shared understanding between students (many of whom are current industry practitioners) and researchers (including academic staff members) to improve the potential for effective collaborations, whilst simultaneously developing the requirements engineering skill sets of the enrolled students. Feedback from students in the course is discussed and directions for the future development of the curriculum and learning strategies are given.",0
An Investigation of Competing Values in Development of a Voluntary Organization,"Competing Values Framework (CVF) has attracted attention in the organization literature but little is known about how competing values can inform development of voluntary organizations. Against this backdrop, we present an action research study into Right in the Community (RitC), a voluntary agency which provides services to developmentally disabled in Cobb County, Georgia. Collaborating with researchers and agency management, staff, and board, the study had a dual purpose: 1) develop agency’s identity, organization, management practices, and ability to plan for the future, and 2) adapt CVF to support development of voluntary organizations. Thus, we demonstrate the value of CVF for developing voluntary organizations by revealing how its dimensions of organizational focus, structural preference, and managerial concern positively informed the efforts at RitC. Also, tensions between heart and head were important and, therefore, in the context of voluntary organizations we propose to extend the CVF with a dimension of motivational trait.",0
The need for systems development capability in design science research: enabling researcher-systems developer collaboration,"Information systems as an artefact-oriented discipline require a strong interaction between researchers, developers and users regarding design of, development of, and the study of the use of digital artefacts in social settings. During recent years, performing research in a design science research spirit has gained increasing interest. In larger scale design research endeavours, access to systems development capabilities becomes necessary. Such a unit, InnovationLab, was established in 2006 in a university setting in Sweden. In this paper we are investigating the five years’ experience of running this InnovationLab. Our findings point to an innovation lab being valuable for research in general and especially for design science research. However, in order to balance the business of an innovation lab, it will be necessary to provide services for other stakeholders (such as administrative units, teachers, and students) as a means for developing systems development capability aimed at supporting researchers.",0
The need for systems development capability in design science research: enabling researcher-systems developer collaboration,"Information systems as an artefact-oriented discipline require a strong interaction between researchers, developers and users regarding design of, development of, and the study of the use of digital artefacts in social settings. During recent years, performing research in a design science research spirit has gained increasing interest. In larger scale design research endeavours, access to systems development capabilities becomes necessary. Such a unit, InnovationLab, was established in 2006 in a university setting in Sweden. In this paper we are investigating the five years’ experience of running this InnovationLab. Our findings point to an innovation lab being valuable for research in general and especially for design science research. However, in order to balance the business of an innovation lab, it will be necessary to provide services for other stakeholders (such as administrative units, teachers, and students) as a means for developing systems development capability aimed at supporting researchers.",0
Action design research: integration of method support,,0
Communication between Developers and Testers in Distributed Continuous Agile Testing,,0
Principles of canonical action research,"Despite the growing prominence of canonical action research (CAR) in the information systems discipline, a paucity of methodological guidance contin- ues to hamper those conducting and evaluating such studies. This article elicits a set of five principles and associated criteria to help assure both the rigor and the relevance of CAR in information systems. The first principle relates to the devel- opment of an agreement that facilitates collaboration between the action researcher and the client. The second principle is based upon a cyclical process model for action research that consists of five stages: diagnosis, planning, inter- vention, evaluation and reflection. Additional principles highlight the critical roles of theory, change through action, and the specification of learning in terms of impli- cations for both research and practice. The five principles are illustrated through the analysis of one recently published CAR study.",0
{\textquotedblleft}Let's not reinvent the wheel{\textquotedblright}: A qualitative investigation of collaboration in the Australian {GP} education and training sector,"Introduction: E-learning collaboration in the Australian GP education and training sector represents one way to improve sustainability, innovation and reuse of existing data sources. However, few collaborative e-learning projects are currently undertaken within the sector, with previous joint ventures resulting in variable success. The purpose of this study was to investigate the potential of increased e-learning collaboration, with specific focus on exploration of the beliefs and perceptions of key stakeholders within the GP education and training sector.",0
The Current State of Social Media Research for {eParticipation} in Developing Countries: A Literature Review,,0
Cooperative method development,"The development of methods tools and process improvements is best to be based on the understanding of the development practice
to be supported. Qualitative research has been proposed as a method for understanding the social and cooperative aspects of
software development. However, qualitative research is not easily combined with the improvement orientation of an engineering
discipline. During the last 6 years, we have applied an approach we call ‘cooperative method development’, which combines
qualitative social science fieldwork, with problem-oriented method, technique and process improvement. The action research 
based approach focusing on shop floor software development practices allows an understanding of how contextual contingencies
influence the deployment and applicability of methods, processes and techniques. This article summarizes the experiences and
discusses the further development of this approach based on several research projects in cooperation with industrial partners.",0
Cooperative method development,"The development of methods tools and process improvements is best to be based on the understanding of the development practice
to be supported. Qualitative research has been proposed as a method for understanding the social and cooperative aspects of
software development. However, qualitative research is not easily combined with the improvement orientation of an engineering
discipline. During the last 6 years, we have applied an approach we call ‘cooperative method development’, which combines
qualitative social science fieldwork, with problem-oriented method, technique and process improvement. The action research 
based approach focusing on shop floor software development practices allows an understanding of how contextual contingencies
influence the deployment and applicability of methods, processes and techniques. This article summarizes the experiences and
discusses the further development of this approach based on several research projects in cooperation with industrial partners.",0
Researching cooperation and communication in continuous software engineering,"Continuous Software Engineering (CSE)---continuous development and deployment of software---and DevOps---the close cooperation or integration of operations and software development---is about to change how software is developed. Together with the tighter integration of development and operations also with usage this will change coordination and collaboration both between IT professionals and between developers and users. In this short paper, we discuss the CHASE dimension of three core research themes that begin to crystallize in literature. This position paper is intended as a `call to arms' for the CHASE community to study CSE.",0
Cooperation between knowledge-based institutions and business: empirical studies and network theories,,0
Management of analytics-as-a-service - results from an action design research project,"The ability to generate business-relevant information from data and to exploit it to improve business processes, decision-making, products, and services (business analytics) is a key success factor for businesses today. Answering the call for further research on success-relevant practices and instruments for managing business analytics, we report on the results of a three-year action design research (ADR) project at a global car manufacturer. Drawing on the socio-technical systems theory, we identify seven meta-requirements and specify four principles for the design of an instrument to manage Analytics-as-a-Service (AaaS) portfolios. Our results reinforce the importance of coordinating different socio-technical components in business analytics initiatives and demonstrate how concrete management instruments, such as a proposed portfolio management tool, contribute to socio-technical alignment. For practitioners, the documented design components provide guidance on how to design and implement similar instruments that support the systematic management of AaaS portfolios.",0
Competing values in software process improvement: a study of cultural profiles,,0
Pluralist Theory Building: A Methodology for Generalizing from Data to Theory,,0
Solution Prototype: A Composed Artifact as Innovation Carrier,"This paper outlines an artifact building and evaluation proposal. Design Science Research (DSR) studies usually consider encapsulated artifact that have relationships with other artifacts. The solution prototype as a composed artifact demands for a more comprehensive consideration in its systematic environment. The solution prototype that is composed from blending product and service prototype has particular impacts on the dualism of DSR's ""Build"" and ""Evaluate"". Since the mix between product and service prototyping can be varied, there is a demand for a more agile and iterative framework. Van de Ven's research framework seems to fit this purpose. Van de Ven allows for an iterative research approach to problem solving with flexible starting point. The research activity is the result between the iteration of two dimensions. This framework focuses on the natural evaluation, particularly on ex-ante validation. A correlation between Hevner's and Van de Vens framework is analyzed, and finally the proposal is presented.",0
Researching Dynamic Phenomena in Complex Organizations: Collaborative Practice Research with Theory Triangulation,"In this paper, we present a practice research strategy for collaboration with practitioners to execute valid and reliable research in the field while providing valuable, theory-based insight to practitioners who sponsor the research. This approach addresses the dual needs of researchers, who must gather data in real time and meet requirements of academic rigor, while maximizing the value and relevance of the work for practitioner collaborators. We demonstrate the approach with a case study of a Fortune 30 company undertaking an extensive organizational change initiative. During our 18-month research engagement with the company, we used a theory triangulation approach to guide our inquiry and analysis, iterating on emergent findings to articulate actionable recommendations for the practitioners working on the phenomena of interest. By describing our research design, we offer one method for framing 'real world' research in a way that maximizes the benefit to researchers and practitioners.",0
"Multi-institutional, multi-national studies in {CSEd} Research","One indication of the maturation of Computer Science Education as a research-based discipline is the recent emergence of several large-scale studies spanning multiple institutions. This paper examines a ""family"" of these multi-institutional, multi-national studies, detailing core elements and points of difference in both study design and the organization of the research team, and highlighting the costs and benefits associated with the different approaches.",0
Assessing Improvements of Software Metrics Practices,"There is an extensive literature on design and implementation of software metrics programs, but our knowledge on how to improve and sustain metrics programs that are already implemented is limited. This paper reports from an action research effort to improve metrics practices in a large software organization. We adopt a comprehensive organizational change model to compare and contrast metrics practices before and after the intervention. Our analysis views the metrics program in its organizational context emphasizing management practices, organizational structures, people, technical systems, and underlying metrics rationale. The paper provides insights into tactics for improving software metrics practices, it provides a specific approach to assess such improvements, and it leads to suggestions for how to make software metrics improvements sustainable. Full Text at Springer, may require registration or fee",0
Diagnosing Metrics Practices in a Software Organization,"The conventional wisdom within software engineering is that metrics are useful in managing and improving software organizations and the literature on software engineering is rich on advice and experiences on how to successfully design and implement metrics programs. But we know relatively little about the opportunities and challenges related to practical use of such programs in managing and improving software operations. The paper reports from a software organization that has implemented elaborate metrics programs. A comprehensive action research effort has been established 1) to evaluate and develop approaches to support systematic diagnosis of metrics practice, and 2) to learn about challenges and possibilities related to improvement of current metrics practices. We present and discuss insights from the initial diagnosis in the light of theoretical views on information systems for management and improvement of software organizations.",0
Information-Centric Assessment of Software Metrics Practices,"This paper presents an approach to enhance managerial usage of software metrics programs. The approach combines an organizational problem-solving process with a view on metrics programs as information media. A number of information-centric views are developed to engage key stakeholders in debating current metrics practices and identifying possible improvements. We present our experiences and results of using the approach at Software Inc., we offer comparisons to related approaches to software metrics, and we discuss how to use the information-centric approach for improvement purposes.",0
A Contextual Approach to Improving Software Metrics Practices,,0
Design matters for decision makers: Discovering {IT} investment alternatives,"The literature has traditionally focused on how decision makers choose among alternatives based on rational behaviors, organizational politics, and organized anarchies. However, there is little research on decision making as a creative process where managers discover and evaluate alternatives. We address this gap by proposing a design approach to transform decisions in organizations. The approach views decision making as a creative and adaptive process in which managers recursively collect and interpret heterogeneous evidence, explore and test different ideas, and discover and evaluate alternatives. While the approach is rooted in the know-how of the involved stakeholders, its underpinning design attitude invites managers to better understand possible alternatives based on analyses of structured as well as unstructured data. To assess its utility, we applied the approach to IT investment evaluations through a Collaborative Practice Research project involving Swedish public organizations. Building on the project findings, we discuss the proposed approach and spell out its implications for transforming decision making in organizations.",0
Evaluation of Information System Investments: A Value Dials approach to closing the theory-practice gap,"Failed or partially failed information systems (IS) investments continue to be a problem in both public and private sectors. Although there are many causes of such failure, lack of clarity about the goals and benefits expected and how they are to be realized is one of the major contributors. This is particularly so in the public sector where the purpose of IS investment is not to increase profits, but to accomplish social and political goals. One way of reducing failure and wastage rates is to have ex-ante evaluation. Over the past three decades IS research has proposed a plethora of new theoretical approaches to improving ex-ante evaluation, but with a few exceptions, these have had little impact on practice. This paper presents a way to address this gap between theory and practice. It proposes a way in which managers can improve IS investment evaluation by changing perspective from a focus on traditional analytic tools towards a design attitude that seeks to develop multi-criteria IS evaluation approach based on contextual experience and prior knowledge. The proposed approach enables organizations to design and develop a value case using value dials as a common language that defines what constitutes the value of particular IS investments for a specific context. To assess its effectiveness, this approach was applied using a multilevel dialogical action research project within a Swedish public organization. The findings show that managers in this organization significantly improved the effectiveness of their evaluation of IS investments.",0
Improving the use of analytics and big data by changing the decision-making culture,"Purpose

Evolving digital technologies continue to enable new ways to collect and analyze data and this has led some researchers to claim that skillful use of data analytics and big data can radically improve a company’s performance, but that in order to achieve such improvements managers need to change their decision-making culture and to increase the degree of collaboration in the decision-making process. The purpose of this paper is to create an increased understanding of how a decision-making culture can be changed by using a design approach.

Design/methodology/approach

The paper presents an action research project in which the authors use a design approach.

Findings

By adopting a design approach organizations can change their decision-making culture, increase the degree of collaboration and also reduce the influence of power and politics on their decision-making.

Research limitations/implications

This paper proposes a new approach to changing a decision-making culture.

Practical implications

Using data analytics and big data, a design approach can support organizations change their decision-making culture resulting in better and more effective decisions.

Originality/value

This paper bridges design and decision-making theory in a novel approach to an old problem.",0
The Role of Conventional Research Methods in Information Systems Action Research,"Action research has for many years been promoted and practiced as one way to conduct empirical research within the Information Systems discipline. While the approach can lead to highly relevant contributions, researchers are warned against the many risks involved in action research.Based on successful cases of Information Systems action research we explore the role played by conventional research methods in developing and presenting research contributions. The cases suggest that action research lends itself strongly toward multi-method approaches and facilitates the creation of multicontribution projects. We identify two approaches to mixing action research and conventional research methodsthe planned and the emergent approachesand we argue that action research can be adopted in ways that are no more risky than other conventional approaches to Information Systems research. Full Text at Springer, may require registration or fee",0
Pragmatism $\less$i$\greater$vs$\less$/i$\greater$ interpretivism in qualitative information systems research,"Qualitative research is often associated with interpretivism, but alternatives do exist. Besides critical research and sometimes positivism, qualitative research in information systems can be performed following a paradigm of pragmatism. This paradigm is associated with action, intervention and constructive knowledge. This paper has picked out interpretivism and pragmatism as two possible and important research paradigms for qualitative research in information systems. It clarifies each paradigm in an ideal-typical fashion and then conducts a comparison revealing commonalities and differences. It is stated that a qualitative researcher must either adopt an interpretive stance aiming towards an understanding that is appreciated for being interesting; or a pragmatist stance aiming for constructive knowledge that is appreciated for being useful in action. The possibilities of combining pragmatism and interpretivism in qualitative research in information systems are analysed. A research case (conducted through action research (AR) and design research (DR)) that combines interpretivism and pragmatism is used as an illustration. It is stated in the paper that pragmatism has influenced IS research to a fairly large extent, albeit in a rather implicit way. The paradigmatic foundations are seldom known and explicated. This paper contributes to a further clarification of pragmatism as an explicit research paradigm for qualitative research in information systems. Pragmatism is considered an appropriate paradigm for AR and DR.",0
Design Science in the Field: Practice Design Research,"There exist different types or genres of design science research (DSR) in information systems, like laboratory-oriented and practice-oriented DSR. This paper investigates arguments for a practice-oriented approach to DSR. It uses the research approach of practice research as a starting point to elaborate on a practice-oriented DSR approach we label Practice Design Research (PDR). In doing so, we address two unresolved issues in IS DSR: Theorizing and evaluation. PDR consists of two inter-related sub-activities: theorizing and situational design inquiry. The conduct of situational design inquiry is described as iterative cycles of (1) pre-evaluate, (2) plan & design, (3) test & intervene and (4) post-evaluate. We justify the foundations of these iterative sub-activities/cycles through a theoretically informed argument based on pragmatist philosophy and practice theory.",0
Competing Values Framework Application to Organizational Effectiveness in Voluntary Organizations,"Although the widely used Competing Values Framework (CVF) has attracted considerable attention in the literature and has proven useful as an approach to organizational effectiveness, we know little about how it applies to voluntary organizations. We therefore combined CVF with rigorous action research methodology to analyze the organizational effectiveness of Right in the Community (RitC), a voluntary agency serving the developmentally disabled. As our results show, CVF’s three dimensions of organizational focus, structural preference, and managerial concern helped us improve the organization’s management of scarce resources, organizational structure and governance, and innovative capabilities. During the collaboration, we also observed tensions between heart and head that were particularly relevant for improving organizational effectiveness at RitC. We therefore propose extending CVF for voluntary organizations with a fourth dimension: motivational trait.",0
Ambidexterity and Entrepreneurship Studies: A Literature Review and Research Agenda,,0
Work-Integrated Learning as an Outcome of Using Action Design Research in Practice,"This paper highlights Work-Integrated Learning (WIL) as an outcome of using Action Design Research (ADR) in practice. We argue that ADR is a subtype of Design Science Research (DSR) and a prominent method for facilitating mutually beneficial collaboration between academia and practice. Subsequently, we tie our work around ADR and WIL to the Scandinavian school of IS-research and worker participation, by emphasizing reflective practice on both researcher and practitioner side. We demonstrate this through two empirical cases and four case episodes. Consequently, the cases highlight building, intervention, and evaluation in the areas of civic orientation and county administration. The narrative around each case focuses on ADR-activities that mediate reflection and learning through iterative cycles. Outcomes from the cases are reported as WIL-outcomes and finally, we conclude this paper by briefly suggesting two implications for future relevant research.",0
Digitizing Information Management From paper forms to electronic information system,"This research focuses on the change process that led to a digitized information system in academia. The development was carried out in a project where the participants represented their universities. The biggest issue to manage was to define the electronic process that was to be coded to support student mobility between universities. Action research was chosen as the research method because of the strong involvement of the researcher in the case. The output was evaluated satisfied, even excellent by the users and the goal was achieved despite minor knowledge about designing information systems in the project group.",0
Action learning with an information system project: subjective reflections,"This paper discusses the growth process during which a researcher grew to become a project manager. Besides being a description of the growth process of the researcher, this article considers the change that was seen in the process of student mobility. The breeding ground of this growth process was an information system implementation that was carried out by several universities, and by their student affairs offices in particular. The research method in this study is action research with a case study. Due to the subjective nature of the research goal, action learning is emphasised. The research material is mainly gathered from a personal diary written by the researcher. This real diary, detailing the project’s ups and downs, encapsulates the reflections of the researcher. Furthermore, the outcome of the information system project proves that there have also been changes in the process of student mobility managed by the student affairs officials.",0
Knowledge Mapping: A Technique for Identifying Knowledge Flows in Software Organisations,"Knowledge is a key parameter for software companies’ survival, as the ability to continuously become better at producing services
relies on the organisation’s abilities to develop and utilise the intellectual competencies, which its employees possess.
These abilities depend highly on the organisation’s capability to share knowledge and thus on the way knowledge flows in the
organisation. In this paper we present a knowledge management perspective on software process improvement, and describe a
technique for mapping the organisational knowledge flows in a software company. The results show that the technique successfully
helps the organisation to select relevant focus areas for planning future improvement initiatives. The study further explains
four distinct critical situations, which can be identified in a knowledge map; Hubs, Black Holes, Springs, and Missing Links.
Each covers potential problems in the organisational flows and therefore can provide guidance for organisational process improvements.",0
{IT} project portfolio governance practice: An investigation into work design problems,"As organizations increasingly invest in IT-enabled innovation, practitioners become dependent on IT project portfolio management to mitigate risks generated from multiple projects. However, our knowledge about IT project portfolio governance practices and how interactions between different structural arrangements enable or hinder effective portfolio management is limited. Against that backdrop, we report a case study of IT project portfolio governance in a Danish municipality. Drawing on work design theory (WDT), we identify three types of governace problems—hierarchical decomposition, modularity, and complex network problems—and we uncovencr the network of observed governance problems in the municipality’s portfolio management practices. As a result, we offer two contributions: a detailed empirical account of IT project portfolio governance, and a demonstration of how WDT can help explain problems in IT project portfolio governance practices. In conclusion, we discuss how these results may inform future research and help organizations improve governance practices in similar contexts.",0
{\textquotedblleft}E-discussion{\textquotedblright}: a group support system for co-present knowledge sharing,"Purpose
This paper aims to inform the design of competence development systems for project management, based on a situated learning design framework.

Design/methodology/approach
An interpretive action research study of a group support system (GSS) (“e‐discussion”) for co‐present knowledge sharing, applied in a corporate context to promote the development of project management competence.

Findings
An in‐depth qualitative description finds the way that “e‐discussion” supported and structured group interaction.

Research limitations/implications
Broader findings pertaining to the underlying situated learning design framework are not presented.

Practical implications
The paper offers a practical method to support development of project management competence and thoughts about possible modifications in its implementation.

Originality/value
The paper addresses research needs for improved understanding of competence development systems; design frameworks and design concepts based on situated learning theory; approaches to improve information technology project management practices through competence development; and interpretive research about GSSs.",0
Mind the Gap: A Collaborative Competence E-learning Model between University and Industry,"This article departure from the effects that inter-organizational collaboration brings for the participating partners, specifically from design-related activities of e-learning courses and co-production. The research focus is on critical factors for inter-organizational collaborative e-learning and co-production between university and industry. We describe the process of a six-year longitudinal collaborative action research project including six cases and three phases, initialization, implementation and dissemination. The analysis is conducted from a multi-stakeholder perspective; managers, teachers, and practitioners. Overall aim is to reach for a sustainable collaborative competence e-learning model (CCeM) that will increase industrial employees’ competences. Main contribution is that co-production of knowledge entails three levels of activities among actors; to have insight into the purposes and practices of others, the capacity to transform the problems of a practice and together build common knowledge and finally the capacity of mutually co-produce knowledge acted upon in practice towards transformations in the workplace.",0
Action Research in New Product Development,"This chapter explores the nature of action research in new product development. Characterized by pressures associated with product concept effectiveness and process performance, new product development is a challenging but rewarding setting for action research. By re-assessing a previously reported action research study in the automotive industry, we identify and analyze characteristics of managing such research in new product development. On the basis of this assessment, the chapter complements previous research on managing action research projects with specific insights applicable to settings in which new technologies are being built and tried out.",0
Resource Dependencies in Socio-Technical Information Systems Design Research,,0
Strategizing for the bottom of the pyramid: an action research into a Mexican agribusiness,,0
Building {IT} Risk Management Approaches,"This chapter shows how action research can help practitioners develop IT risk management approaches that are tailored to their organization and the specific issues they face. Based on literature and practical experience, the authors present a method for developing risk management approaches to use in real-world innovation projects. The chapter illustrates the method by presenting the results of developing a risk management approach for software process improvement projects in a software organization.",0
Appreciative inquiry in software process improvement,"Traditionally, software process improvement (SPI) has been approached from a problem-oriented perspective commonly using models such as the IDEAL and the DMAIC. In contrast, appreciative inquiry is a strength-based approach focusing on bringing forward the best in people and organizations to achieve successful change. While there is a significant research on SPI initiatives and the use of problem-oriented approaches there is limited knowledge about the way in which SPI initiatives unfolds when adopting a strength-based approach. Therefore, it is interesting to explore how software organizations familiar with problem-solving approaches experience the use of a strength-based approach. We present an action research study conducted at the Swedish telecom company Ericsson using appreciative inquiry to facilitate an SPI initiative implementing a new process and tool for the requirements and test case management. While the SPI initiative was considered successful, important lessons were learned regarding the use of appreciative inquiry. We conclude that the use of appreciative inquiry does not eliminate the dependence on other well-known key factors for SPI success. Also, our study indicates that the problem-solving mind-set, i.e. the satisfaction of identifying and solving problems, found among many software engineers familiar with problem-oriented approaches may impede the use of appreciative inquiry. Copyright © 2008 John Wiley & Sons, Ltd. All authors have made an equal contribution to the paper.",0
Agility Through Implementation: A Case from a Global Supply Chain,"This case is based on sharing empirical experiences and results from several years of collaborative research. The focus is on implementation projects with solutions for spare parts distribution in the automotive industry.
The origin is a Volvo initiative with a Web portal for selling spare parts over the Internet. The journey will start with the creation of a platform for distribution of spare parts and continue with the process of introducing Web services and building new relations.
The new structure relies on the development of integration between legacy and a new information technology platform. The study followed the development of the platform as well as innovations that emerged in the new business structure. The paper describes the difficulty of creating a new platform and the even-more difficult establishment of new relations. However, the case also illustrates that continuous implementation projects deliver innovation in new relations and new channels, thereby displaying the unprecedented agility with which IT enables business value. The leverage for this is high and it is easier to roll out the new channels after the first implementation. Agility is achieved by working continuously with scenario development and by keeping implementation projects comprehensive, involving both technology and relations between supply chain actors.",0
`{SMART} {GOODS}' {AND} {MOBILE} {RFID} A {CASE} {WITH} {INNOVATION} {FROM} {VOLVO},"This paper presents a case from Volvo that explores an innovative RFID solution that leverages the exiting infrastructures of mobile usage. 'Smart goods' is used to explain features applied through Radio Frequency IDentification, utilization of cellular networks (GSM/GPRS) and web technology together with collaboration among supply chain actors. This has reduced traditional barriers of entry and an empirical case provide basis for evaluation from the perspectives of operational reliability, usability and productivity.",0
Agility through scenario development and continuous implementation: a global aftermarket logistics case,"Abstract This paper,examines,a business,and,IS/IT initiative at Volvo that involves managing,the development,and implementation,of an agile aftermarket,supply chain. The case is based on Volvo’s global initiative to create a platform, Web services, and a Web portal for selling spare parts over the Internet. Creating and integrating a new platform is difficult, and establishing new relations in global aftermarket,logistics is even,more,challenging. Agility relates to an organisa- tion’s ability to sense and,respond,rapidly to unpredictable,events in order to satisfy changing,customer,demands.,Volvo’s effort illustrates agility as achieved by working,continuously,with scenario development,and,keeping,implementa- tion projects to a comprehendible,size in order to nurture learning. The effort involved,direct actions,to manage,both,the,technology,and,the,relations among supply chain actors. As this case shows, continuous implementation projects can deliver innovation,in new,relations and,through,new,channels,–",0
Mobile {RFID} {\&}amp$\mathsemicolon$amp$\mathsemicolon${\#}8212$\mathsemicolon$ A Case from Volvo on Innovation in {SCM},"Utilization of Radio Frequency Identification (RFID) is often presented as improving supply chain management even though there are still few in-depth studies that support the hype. In this work, the feasibility of a mobile RFID solution in the automotive business-to-business of Volvo has been studied. Currently, due to costs of fixed infrastructure installations, many RFID solutions can only be financially justified in a setup with high volumes and high value items. In this setup, an innovative mobile RFID solution, utilizing cellular networks with data package communication (GSM/GPRS), web technology and integration has been evaluated. This is done from the perspectives of operational reliability, usability and productivity. The empirical evidences come from more than 3.000 readings that together with qualitative research explore a unique context of mobility in which existing infrastructure is leveraged. The advantages and disadvantages of the solution are summarized into a business case feasibility. Recommendations include design constrains and development strategies.",0
Green {IS},"In this chapter, we investigate the role of ICT in dealing with environmental challenges facing contemporary industrial organizations. Green IS research can essentially be divided into two groups, focusing on technology per se or on providing tools that decreases environmental impact. Building on a planned research project we propose innovation of ICT-based services, and especially collaborative services, as useful strategies for providing firms with sense and respond capabilities in relation to environmental challenges. We also argue research that research relevance and multi-disciplinary competencies are key themes that IS researcher needs to acknowledge in order to contribute to practitioners efforts.",0
"Enablers, challenges and relationships between research impact and theory generation","Purpose
– Perceptions drawn from the construction management research (CMR) community regarding research impact (RI) and its relationship to theory generation (TG) are examined. Investigative emphasis is on RI and TG enablers and challenges (within an academic context). The paper aims to discuss these issues.

Design/methodology/approach
– Qualitative narrative data accrued from open-ended questions within a structured questionnaire survey are analysed using frequency, quantitative content analysis, and graphical methods. A model of the RI/TG interface is presented and discussed.

Findings
– Principal RI enablers are “facilitation” (industry engagement, time); while principal constraints include “internal factors” (the academic, the university) and “external factors” (collaboration, funding). Respective TG enablers are “resources” (competence, time, funding) and corresponding challenges include “external factors” (market forces, compliance). RI is considered a minor challenge to TG.

Research limitations/implications
– The study adds empirical evidence to the ongoing RI debate within the UK generally and with regard to the CMR discipline more specifically.

Originality/value
– RI research is relatively sparse, while the findings in regard to CMR are entirely novel.",0
Developing a participatory consultation process for quality reviews: The initial stage of the European University Associations Quality Review of the Dublin Institute of Technology.,,0
The Total Picture {\textendash} A Framework for Control of {IT} Investments,"Evaluation of IT investments is a difficult and complicated issue. This chapter presents a framework for control of IT investments
with the aim of providing decision-makers with a clear picture of individual IT investments as well as an aggregated level
where all IT investments are combined into a total picture. The framework has been developed using an action–research approach.In
a number of workshops intermediate results have been presented, and reactions from practitioners have influenced the development.
Participants in the project come from different EU countries all directly concerned with IT investments. The framework, that
is being tested by authorities in different EU countries, is considered by participants to have the potential to improve the
decision-making processes. The framework can also potentially be used in academic teaching in IT economics. The framework
is based on a lifetime perspective in which established investment models can be applied. A main dimension is to consider
interrelations between different IT investments through aggregation into a total picture, in order to control total spending
on IT in organisations.",0
Enterprise Architecture Design Principles and Business-Driven {IT} Management,"The strategic role of IT and its significance throughout the organization increases in environments characterized by complexity,
variety and change. Hence IT management must deal with uncertainties and with different, conflicting and ever changing demands.
In this sense Enterprise Architecture is playing an increasingly important role in improving IT management practice. This
paper presents architectural design principles that strive to create and maintain alignment in a dynamic and uncertain business
environment. Two crucial architectural aspects will be highlighted: (1) the delineation of the information systems, (2) the
choice of interoperability principle. A case from Swedish Industry is used to demonstrate the application of the principles.
In the paper we argue that the choice of principles has an significant impact on operational as well as strategic alignment.
The larger, heterogeneous, and dynamic the business are, the more crucial are the issues of information systems delineation
and interoperability.",0
Operational and Structural Business {IT} Alignment,"In recent years, Enterprise Architecture has gradually emerged as the preeminent means to change and transform large organizations. By employing Architectural Principles, organizations strive to master the complexity inherent in business processes and IT system and their harmonious alignment. Unfortunately, very rarely has the coevolutionary and emergent nature of alignment been taken into consideration in IS research. Even if different approaches focus on business IT alignment, most of them have a tendency to focus on alignment as a state or an outcome. In this paper we argue that a dynamic approach is necessary in order to achieve business IT alignment in a long-term perspective. Furthermore we demonstrate that the choice of architectural principles has an impact on the ability to achieve and maintain operational as well as structural alignment. A case study is used as a basis for the analysis. The conclusion is that an Enterprise-centric architecture can create freedom of action for dynamic operational alignment, and that Business-oriented IT management can keep the IS Architecture aligned with the Business Architecture in a long term perspective.",0
Organization Innovation and Its Implications for the Implementation of Information Systems,,0
Cultivation and engineering of a software metrics program,"This paper reports from a case study of an organization that implements a software metrics program to measure the effects of its improvement efforts. The program measures key indicators of all completed projects and summarizes progress information in a quarterly management report. The implementation turns out to be long and complex, as the organization is confronted with dilemmas based on contradictory demands and value conflicts. The process is interpreted as a combination of a rational engineering process in which a metrics program is constructed and put into use, and an evolutionary cultivation process in which basic values of the software organization are confronted and transformed. The analysis exemplifies the difficulties and challenges that software organizations face when bringing known principles for software metrics programs into practical use. The article discusses the insights gained from the case in six lessons that may be used by Software Process Improvement managers in implementing a successful metrics program.",0
Managing Risk in Software Process Improvement: An Action Research Approach,"Many software organizations engage in software process improvement (SPI) initiatives to increase their capability to develop quality solutions at a competitive level. Such efforts, however, are complex and very demanding. A variety of risks makes it difficult to develop and implement new processes. We studied SPI in its organizational context through collaborative practice research (CPR), a particular form of action research. The CPR program involved close collaboration between practitioners and researchers over a three-year period to understand and improve SPI initiatives in four Danish software organizations. The problem of understanding and managing risks in SPI teams emerged in one of the participating organizations and led to this research. We draw upon insights from the literature on SPI and software risk management as well as practical lessons learned from managing SPI risks in the participating software organizations. Our research offers two contributions. First, we contribute to knowledge on SPI by proposing an approach to understand and manage risks in SPI teams. This risk management approach consists of a framework for understanding risk areas and risk resolution strategies within SPI and a related process for managing SPI risks. Second, we contribute to knowledge on risk management within the information systems and software engineering disciplines. We propose an approach to tailor risk management to specific contexts. This approach consists of a framework for understanding and choosing between different forms of risk management and a process to tailor risk management to specific contexts.",0
Semi-automatic improvement of software development methods: Doctoral consortium paper,"Empirical studies show that the use and adoption of software development methods (SDMs) in practice is still low. Not just that developers often avoid to follow what is prescribed in their organisations, very often the organisations don't even have prescribed and documented methods. This situation is recognized as one of the main reasons for failures in IT projects and a contributor to the low quality of software. In this paper we describe a PhD thesis that addresses this problem. We introduce an innovative approach and supporting tool that will semiautomatically monitor in-action methods during project performance, and capture the gained knowledge with only negligible involvement of the developers. Our expectation is that since the prescribed methods will be in this way based on the practice that is accepted in a certain organisation, its users will not perceive it as something imposed by their managers and will follow it much more rigorously. Furthermore, we intend to show that it is possible to establish a continuous software process improvement lifecycle with just a marginal user involvement.",0
Technologies for value creation: an exploration of remote diagnostics systems in the manufacturing industry,"With firms increasingly relying on ubiquitous computing to implement major business initiatives, it is becoming ever more necessary to understand the technological aspects of business developments. This paper analyzes the use of remote diagnostics systems in the manufacturing industry and discusses the opportunities and challenges for the early adopters. It pays specific attention to the impact on business aspects such as the value creation process consisting of relationships, roles, and architecture and the value proposal consisting of a business offer and customer value. The study shows how ubiquitous computing allows manufacturers to become remote service providers while customers can either become co-creators of value or passive receivers of created value. Ubiquitous computing also creates possibilities for the manufacturing industry to design new kinds of business offers based on remote presence. Studying remote diagnostics systems shows that ubiquitous computing creates value when deployed in products, and not just in relation to individuals. Moreover, the design of the value-creation process should not be limited to the single supplier or customer organization, as ubiquitous computing applications take no notice of organizational boundaries.",0
User Experience: Consumer Understandings of Virtual Product Prototypes,"In this paper, we focus on users’ evaluations of virtual product prototypes designed by furniture companies. Our study is
the first step towards design research in the context of physical products. We study virtual prototypes of physical products
via the concept of user experience as a subjective issue, not technology-driven as in most user experience studies. To get
an idea of users’ subjective experience, we conducted an empirical study using, as our research approach, phenomenography,
which allows outlining the differences in users’ technological understandings. In our results, the user experience of virtual
product prototypes is understood as a unique combination of various elements, the focus varying from technology to the user’s
taste and from a part of a product to a product in its environment.",0
Multi-Grounded Action Research in Method Engineering: The {MMC} Case,"There appears to be two schools of information systems development methods research that largely pursue their own agendas
without many cross-references. On the one hand there is the method engineering research and on the other hand there is the
method-in-action research. There seems to be much to be gained from integrating these two schools, developing knowledge that
both has the formality (rigor) and reflects its enactment in practice. To achieve this, the research approach adopted has
to embrace this duality. In this paper we explore how Multi-Grounded Action Research (MGAR) can contribute to achieving this
aim. MGAR has been used in the development of a Method for Method Configuration, a research product that integrates the strengths
of both schools.",0
Method configuration: adapting to situational characteristics while creating reusable assets,"The world of systems engineering methods is changing as rigorous ‘off-the-shelf’ methods gain popularity. The need for configuration of such methods is increasing accordingly. In this paper, method configuration is treated as a kind of method engineering, focusing on adaptation of a base method. A meta-method based on the concepts of Configuration Packages and Configuration Templates is proposed. Configuration Packages are pre-made reusable configurations of a base method suitable for a specific characteristic of a development situation. Configuration Templates with different characteristics can be related to different Configuration Packages and used as a base for reaching a situational method efficiently. The paper presents experiences from two empirical studies in which the Method for Method Configuration was developed and validated. These studies indicate that this meta-method eases the burden of the method engineer in configuring a method for particular project characteristics. Specifically it helped in deciding what in the base method to omit and to make sure that omissions made were congruent with the overall situational method.",0
Combining method engineering with activity theory: theoretical grounding of the method component concept,"The complex and demanding business of developing information systems often involves the use of different systems development methods such as the Rational Unified Process or the Microsoft Solution Framework. Through these methods the development organisation can be viewed as a collective of actors following different rules in the form of prescribed actions in order to guide a work process in accord with activity theory. Very often standardised systems development methods need tailoring for unique projects and strategies for this process have been labelled method engineering. Method configuration, a sub-discipline to method engineering, is applicable in situations where a single base method is used as a starting point for the engineering process. A meta-method (method for method configuration) has been developed addressing these issues. A fundamental part of this meta-method is the method component construct as a means to facilitate efficient and rationally motivated modularisation of systems development methods. This paper is an exploration of possible benefits of combining activity theory and method engineering as theoretical grounding of the method component concept.",0
Method Configuration {\textemdash} A Systems Development Project Revisited,"Method engineering is a design research discipline with a focus on providing support for method engineers and systems developers.
(1996) defines it as ‘the engineering discipline to design, construct and adapt methods, techniques and tools for the development
of information systems.’ Such support is provided in the form of frameworks (e.g. Agerfalk and Wistrand, 2003), methods (e.g. Yourdon, 1989), meta-methods (e.g. Harmsen, 1997), and computerized tool support (e.g. Rossi, 1998). Subsequently, as a design science discipline we attempt to support human actions (March and Smith, 1995). Since design is about the artificial (Dahlbom, 2002) it consists of a duality involving both construction and evaluation. However, within the field of method engineering the
attention is often given to the former and often with a theoretical focus.",0
Towards Structured Flexibility in Information Systems Development,"Method configuration is a specific type of Method Engineering (ME) that takes an existing organization-wide Information Systems Development Method (ISDM) as its point of departure. Existing assembly-based ME approaches are not well suited to this task. As an alternative, this article suggests a metamethod approach to tailoring organization-wide ISDMs. We refer to this approach as the Method for Method Configuration (MMC). MMC takes into account the need to combine structure, which is one reason for choosing an organization-wide ISDM in the first place, with flexibility, which is essential for making the chosen ISDM fit actual projects. The metamethod is built using a three-layered reuse model comprising method components, configuration packages, and configuration templates. These concepts are combined efficiently to produce a situational method and thereby to facilitate the work of method engineers. Purchase this article to continue reading all 25 pages >",0
{MC} Sandbox: Devising a tool for method-user-centered method configuration,,0
"Evaluation: Emergence, Mode of Inquiry, Theory {\&}amp$\mathsemicolon$ Practice","The aim of this paper is to present the reader with an accessible and practical account of the evaluation as a mode of inquiry within the broad domain of social science. The starting point will be to present a general outline of the main milestones relating to the emergence of evaluation as a mode of inquiry and some of the prominent advocates of comtemporary evaluation. Particular attention will be directed towards what is termed as 'programme evaluation'. Then I will endeavour to explore whether evaluation as a mode of inquiry is practice or theory lead. A definitive answer to this question will not be presented here in this short paper; I will instead make assumptions based on my interpretation of the reviewed discourse within the field and personal reflection from practice. The case of the European University Association (EUA) Quality Review of the seven Irish universities and the Dublin Institute of Technology will be cited as an example of evaluation in practice in the Irish Higher Education sector. Issues such as the politics and power, decision making, and the use, misuse or non-use, of findings of evaluations will be briefly introduced.",0
Mentality patterns: recurring turns of mind as first-class concerns in software projects,"The increasing adoption of agile software development methodologies is amplifying the message that people are a first-order success factor of software projects. In this paper we describe a means to make certain people characteristics a first-class concern in software development projects. In particular, we present a systematic way of capturing, making explicit and effectively communicating human attitudes, beliefs and ways of thinking that influence individual and team work in software projects. Moreover, we provide an organised way to supplement and enhance software development methods, processes and project practice in order to explicitly take into account such human factors.",0
Mentality patterns: recurring turns of mind as first-class concerns in software projects,"The increasing adoption of agile software development methodologies is amplifying the message that people are a first-order success factor of software projects. In this paper we describe a means to make certain people characteristics a first-class concern in software development projects. In particular, we present a systematic way of capturing, making explicit and effectively communicating human attitudes, beliefs and ways of thinking that influence individual and team work in software projects. Moreover, we provide an organised way to supplement and enhance software development methods, processes and project practice in order to explicitly take into account such human factors.",0
The Project Strategy Matrix: Systematizing the Design and Management of an Explicit Project Strategy,,0
Transforming local government by project portfolio management,,0
Information and Communication Technology As Key Infrastructure for Sustainable Cities,"The ‘Sustainable cities’ initiative has been widely accepted as a participatory development initiative to achieve environmental and social goals. In the cities in developing countries with a severe constraint in their capacity for participatory planning, a potentially effective way to build ‘sustainable city’ initiative is to use an e-government portal designed to support citizens’ participation in planning and monitoring processes and knowledge sharing among participating cities. In the Nigeria Delta region, 23 local governments were chosen to pilot this initiative. This region has been suffering from weak local governance and protracted youth unemployment caused by ‘youth bulge’ that led to severe social unrest. In such circumstances, this pilot had a strong focus on enhancing local governance and job-creation among young people in knowledge-intensive industries, particularly using information and communication technologies. This chapter investigates positive and negative sides of this approach using the cross-country and city-level survey data.",0
Open innovation and control: a case from Volvo,,0
Six Issues in Which {IS} and {CSCW} Research Communities Differ,"Computer-Supported Collaborative Work (CSCW) has become increasingly positioned as a subfield of human-computer interaction (HCI). Earlier, CSCW has had a closer connection to the Information Systems (IS) field, but this relationship has seemed to become more distant. In this paper we reflect on the distinct characteristics of the research communities of CSCW and IS. We identify similarities, but also stark differences between the two. The six identified issues of difference are the roles of theory, context, methodology, organizational layer, socio-technicality, and power-alignment. Our contribution is in making these differences visible. We hope this paper will promote diplomacy and understanding between these research communities, so that scholars may consider cross-disciplinary IS-CSCW publication strategies.",0
Collaboration Between Academics and Practitioners Using Action Research,"There is much discussion among IS academics in general and those who belong to IFIP WG 8.2 in particular of appropriate research methods and their underlying philosophical foundations. Discussion on research methods has tended to focus on the debate between those who advocate empirical methods based on validating models, frameworks, and hypotheses by means of surveys buttressed by an array of statistical tests, and the advocates of interpretive, qualitative research based on observation, interviews, and case studies. The debate has resulted in the publication of a comprehensive literature, part of which questions the validity of one or other of the approaches, but part of which attempts to define under what circumstances each is appropriate. Yet other discussants suggest the virtues of pluralistic approaches.",0
Designing and Orchestrating Embedded Innovation Networks: An Inquiry into Microfranchising in Bangladesh,,0
Accumulating Design Knowledge with Reference Models: Insights from 12 Years' Research into Data Management,,0
Roles in the {ISD} process: a collaborative approach,,0
Regional {IT} innovation: a living lab approach,"The paper provides an integrated view of value creation in the development of new products and services related to IT. We argue that customer and end-user integration into the development process as a whole is a key for enhanced innovation processes. Building on experiences from two regional IT innovation projects conducted with a living lab approach, we ask how this approach can help organisations utilise important resources in an open innovation system and guide universities  as driving engines in regional innovation systems  to improve their environments for research and education. Exploring the outcome from the projects and how customers are integrated into value creation processes during the course of IT design and use, we argue that innovation systems management and customer integration are important assets not only to increased efficiency and quality, but also for enhanced innovation.",0
Managing research and innovation networks: Evidence from a government sponsored cross-industry program,"Important innovations are increasingly produced based on research engagement and fertilization across industries. However, we know little about the challenges associated with managing innovation networks in specific contexts that involves researchers in cross-industry collaboration. Against this backdrop, we draw on theory on design and orchestration of innovation networks to analyze a large-scale government sponsored program, “ProcessIT Innovations” that was designed to increase competitiveness and accelerate economic growth in Northern Sweden. The program was initiated and led by firms from the traditionally strong local process industry and engaged local researchers and firms from the emerging IT industry. Based on our analyses, we offer two contributions. First, we provide a detailed analysis of the challenges related to configuration of the network, orchestration of partnerships between participants, and facilitation of innovation in dedicated development projects. Second, we propose a model of managing research and innovation networks through fertilization across industries and between firms and research institutions.",0
Design Science Research for Business Process Design: Organizational Transition at Intersport Sweden,"Business processes need to be aligned with business strategies. This paper elaborates on experiences from a business process
design effort in an action research project performed at Intersport Sweden. The purpose with this project was to create a
solid base for taking the retail chain Intersport into a new organizational state where the new process design is aligned
with strategic goals. Although business process modeling is concerned with creating artifacts, traditionally information systems
design science research has had little impact on research on business process models. In this paper, we address the question
of how design science research can contribute to business process design. Three heuristic guidelines for creating organizational
commitment and strategic alignment in process design are presented. The guidelines are derived from the successful actions
taken in the research project. The development of these guidelines is used as a basis to reflect upon the contribution of
design science research to business process design.

KeywordsDesign science research-business process design-action research-co-design",0
Multi-Layered Process Modeling for Business and {IT} Alignment,"In information systems research, significant attention has been paid to the discrepancy between organizational context and technology. In the IS discourse this is, among other initiatives, expressed as the need to create alignment between business and IT. Translated into the domain of business process management (BPM), this will put demand on achieving alignment between used models in process modeling. An action research approach has been adopted to explore a multi-layered thinking in process modeling, which has been validated through the development and application of a multi-layered framework with a consultancy firm. Applying the multi-layered framework has addressed three areas of concern related to managing alignment 1) focal areas, 2) abstraction levels, and 3) degree of formalism. In this setting, a multi-layered thinking during process modeling and design has facilitated managing alignment of business and IS/IT. Further research however concerns the application of the framework in other settings.",0
Design Principles for Competence Management Systems: A Synthesis of an Action Research Study,"Even though the literature on competence in organizations recognizes the need to align organization level core competence with individual level job competence, it does not consider the role of information technology in managing competence across the macro and micro levels. To address this shortcoming, we embarked on an action research study that develops and tests design principles for competence management systems. This research develops an integrative model of competence that not only outlines the interaction between organizational and individual level competence and the role of technology in this process, but also incorporates a typology of competence (competence-in-stock, competence-in-use, and competence-in-the-making). Six Swedish organizations participated in our research project, which took 30 months and consisted of two action research cycles involving numerous data collection strategies and interventions such as prototypes. In addition to developing a set of design principles and considering their implications for both research and practice, this article also includes a self-assessment of the study by evaluating it according to the criteria for canonical action research.",0
A Core-Periphery-Legality Architectural Style for Open Source System Development,"Despite the rapid rise of open source systems (OSS), it is unclear what architectural patterns enable the success of these systems. There is little guidance on architectural patterns for OSS development. Consequently the creators of OSS projects have often come to their own solutions intuitively, via trial-and-error and design iterations. To fill this void we study the architectural challenges encountered by OSS projects and identify architectural patterns that address these challenges. We propose an integrated architectural style that addresses two challenges for OSS success: 1) what architectural principles and patterns enable the active participation of a large, distributed community, and 2) how to manage OSS licensing issues that prohibit open source (and proprietary) software to mix freely. It is critical to address these issues together as architectural decisions impact on licensing issues, which have an impact on the long-term survival of the system. We contribute to OSS development by identifying, integrating and advancing existing work on OSS patterns and offer an integrated architectural style that addresses these challenges simultaneously thus guiding future OSS development. We validate our approach via empirical studies of successful OSS systems that have evolved to use this style, and report on a case study using the proposed architectural style for a new OSS project.",0
Managing Cultural Variation in Software Process Improvement: A Comparison of Methods for Subculture Assessment,"The scale and complexity of change in software process improvement (SPI) are considerable and managerial attention to organizational culture during SPI can therefore potentially contribute to successful outcomes. However, we know little about the impact of variations in organizational subculture on SPI initiatives. On this backdrop, we present an exploratory study of a large-scale SPI project in a Danish high-technology company, Terma. Two of its business units-integrated systems (ISY) and airborne systems (ASY)-followed similar approaches over a three-year period, but with quite different outcomes. While ISY reached capability maturity model integration (CMMI) level 2 as planned, ASY struggled to implement even modest improvements. To help explain these differences, we analyzed the underlying organizational culture within ISY and ASY using two different methods for subculture assessment. The study demonstrates how variations in culture across software organizations can have important implications for SPI outcomes. Furthermore, it provides insights into how software managers can practically assess subcultures to inform decisions about and help prepare plans for SPI initiatives.",0
Political Maneuvering During Business Process Transformation: A Pluralist Approach,"For years, managers have tried to improve organizational performance through business process transformation (BPT), and their experiences have informed IS research and practice. Although extant theory acknowledges the political nature of these dynamic transformation initiatives, researchers have yet to empirically investigate and theorize how organizational politics impacts BPT behaviors and outcomes. Drawing on a pluralist methodology, we present an embedded case study of a company-wide BPT project across four business units at the high-tech firm Terma. First, we apply different perspectives on organizational politics to develop detailed accounts of each business unit's response to the transformation initiative, which reveals four distinct patterns of BPT politics: “applying the hammer”, “struggling to engage”, “walking the talk”, and “keeping up appearances”. Next, we combine the empirical findings with extant literature to theorize how transformation agents and process users engage in politics during BPT implementation. As a result, our research leverages a pluralist approach to show how alternative political perspectives and forms of politics can help managers maneuver BPT initiatives in their roles as transformation agents and process users.",0
Pluralist Theory Building: A Methodology for Generalizing from Data to Theory{\ast},"We propose Pluralist Theory Building as a methodology that leverages the power of multiperspective inquiry to develop new theory from data. The chapter presents the rationale for the methodology, its combination of generalization and pluralism, and the process involved in its application. When researchers use Pluralist Theory Building, they move between description and theory and between single and multiple perspectives through four iterative steps with specific deliverables: Create Perspective Accounts, Synthesize Multiperspective Account, Create Theory Fragments, and Synthesize Pluralist Theory. Drawing on a study that served as experiential background for developing the methodology, we offer insights into the challenges involved in using the methodology and the activities in which researchers may engage to address these challenges. In conclusion, we argue that Pluralist Theory Building offers a novel and practically useful approach to empirically based theorizing that leverages Mingers’ pragmatic approach to pluralism (2001) and extends Lee and Baskerville’s (Generalizing generalizability in information systems research. Information Systems Research, 14(3), 221–243, 2003) generalization framework into a detailed iterative process with steps, deliverables, challenges, and activities.",0
Relationship Management at the Operational Level in Outsourcing,"Research suggests that achievement of a successful outsourcing relationship requires a tremendous amount of detailed management.
In this paper we draw on relationship theory to understand the management practices of a particular outsourcing setup. An
empirical study of a Danish company operating an off shore development centre with 400 employees located in India identified
a host of practices that form a seemingly complex and ambiguous picture. To make sense of the studied practice we develop
a framework that consists of four relationship management strategies coined select-a-friend, develop-a-friend, control-a-person,
and control-of-output. We provide illustrative examples of each strategy; reflect upon the alignment between the type of outsourcing
setup and the identified portfolio of practices; and outline theoretical and practi cal implications. Key findings are that
all four strategies are used, play an important role and that continuous improvement of the portfolio of relationship management 
practices is paramount to ensure effectiveness.",0
Knowledge transfer planning and execution in offshore outsourcing: An applied approach,"In this paper, we report from a longitudinal project about knowledge transfer conducted in a major financial company headquartered in Denmark and an offshore development center located in Bangalore, India. We identify the main knowledge transfer challenges experienced by the case company. The challenges inform the conceptual design of a systematic five-step approach to the company’s knowledge transfer. Our main contribution is to illustrate how extant research can be applied to understand and solve the knowledge transfer challenges of a particular company in a way that fits with the outsourcing setup and the company culture. We also draw attention to the fact that client side managers play a crucial role in determining how and with what priority knowledge transfer can take place. Our research indicates that a first, important step towards ensuring successful knowledge transfer in outsourcing is to focus on the training and support of client side managers.",0
Incumbents and Challengers: Conflicting Institutional Logics in {SaaS} {ERP} Business Models,"With a shift in the architecture for the design and delivery of information systems (IS), new business models are emerg-ing. Professional analysts predict that by the end of 2012, a majority of all enterprise-wide information systems will be delivered by a business model dominated by services rather than by on-site installations. This paper reports on a re-search project conducted between 2009 and 2011 that involved case studies of Enterprise Resource Planning (ERP) systems delivered according to a Software as a Service (SaaS) logic. Using a business model ontology, 10 case studies in the Swedish ERP market were conducted and analyzed. After constructing generic business models that explain two types of vendors in the market—the Incumbents (the traditional ERP vendors) and the Challengers (the new SaaS ERP vendors)—a discussion follows, based on institutional logic, which examines how these two groups of vendors adapt the dominant institutional logic. As the results show, both vendor groups hybridize their business models using the other's institutional logic. At the same time, the vendors differentiate themselves as they try to establish the dominance of their own logic.",0
Industry-Academia research collaboration in software engineering: The Certus model,,1
Industry{\textendash}Academia Research Collaboration and Knowledge Co-creation: Patterns and Anti-patterns,"Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.",0
The Role of Networks and Networking in Bringing Software Methods to Practice,"The complex and problematic relationship between software development methods and practices is well documented. Methods are difficult to adopt, there are several barriers towards successfully bringing methods to practice, and practices are by the end of the day quite different from method prescriptions. Methods are, however, continually developed and organizations spend considerable resources trying to improve practices through adoption of new methods. We know relatively little about the long-term dynamics involved in such adoption efforts. This research reports from a three-year effort within an IT department of a large multinational company in which a new method was first adopted, then used to support projects organization wide, and subsequently extended based on emerging practices. The study applies two complementary knowledge management perspectives, those of networks and networking, to interpret the experiences from the case. The study reveals how method perceptions and approaches shift radically through different stages of bringing software development methods to practice.",0
Service Provision in a Software Technology Unit,"Large software organizations establish software technology units for managing the methods and tools aimed at supporting their software engineers. This division between software development and new technologies for software development establishes specialized competencies, supports standardization across software projects and departments and provides dedicated resources for innovation. However, such software technology units are faced with complex diffusion projects that are difficult and challenging to manage and that in many cases lead to unsatisfactory results. This paper reports from attempts to improve diffusion practices within a technology unit in a large software organization. Two complementary roles for software technology units, i.e. technology supplier and service provider, are presented and used for interpreting the experiences. The research suggests that technology units in large software organizations can improve their diffusion practices by complementing the traditional role as a technology supplier with that of a service provider. The paper offers lessons on how software organizations can take steps in that direction.Journal of Information Technology 2003 18, 195209. doi:10.1080/0268396032000122150",0
Managing knowledge in a software organization,"This paper explores the practical usage of insights on knowledge management (KM) to support innovation in a software organization. The organization has for some time engaged in software process improvement (SPI) initiatives to improve its operation. The paper applies two complementary approaches to KM, the codified and the personalized, to evaluate current KM practices and to improve its SPI practices. Based on the insights from the case we review key principles within SPI and evaluate the applied KM approaches. We conclude that it is advisable for SPI efforts to explicitly address KM issues. Each software organization has to find its own balance between personalized and codified approaches, this balance needs to be dynamically adjusted as the organization matures, and the adopted KM approach should differentiate between different types of SPI services.",0
Managing knowledge in software method adoption,"The complex and problematic relationship between software development methods and practices is well documented. Methods are difficult to adopt. There are several barriers toward successfully bringing methods to practice, and practices are, by the end of the day, quite different from method prescriptions. Methods are, however, continually developed, and organisations spend considerable resources trying to improve practices through adoption of new methods. We know relatively little about the long-term dynamics involved in such adoption efforts. This research reports from a three-year effort within an IT department of a large multinational company in which a new method was first introduced, then used to support organisation-wide projects, and subsequently extended based on emerging practices. The study applies two complementary knowledge management perspectives networks and networking to interpret the experiences from the case. The study reveals how method perceptions and approaches shift radically through different stages of software method adoption.",0
Knowledge creation and sharing in a systems development project,"Systems development projects are complex collaborative efforts in which actors create and share knowledge across organisational boundaries and over time. We know, however, little about how knowledge is created and shared in systems development projects and how adopted development approaches shape knowledge management practices. This research draws upon concepts from knowledge management and organisational learning to investigate the complex dynamics between knowledge creation and sharing in a systems development project. Based on an analysis of both quantitative and qualitative data from the project, the research shows that the adopted approach rely on simplified notions of knowledge creation and sharing that do not take into account the dynamic relationships between the two, and neglect the factors that facilitates or inhibits them. These findings suggest important lessons on how to balance knowledge creation and sharing in systems development and they suggest that we need to critically rethink contemporary approaches to systems development.",0
Managing Uncertainty in Organic Development Projects,,0
Style Composition in Action Research Publication,"Examining action research publications in leading Information Systems journals as a particular genre of research communication, we develop the notion of style composition to understand how authors structure their arguments for a research contribution. We define style composition as the activity through which authors select, emphasize, and present elements of their research to establish premises, develop inferences, and present contributions in publications. Drawing on this general notion, we identify a set of styles that is characteristic of how IS action researchers compose their argument. Premise styles relate to the dual goals of action research through practical or theoretical positioning of the argument; inference styles combine insights from the problem-solving and the research cycles through inductive or deductive reasoning; and contribution styles focus on different types of contributions--experience report, field study, theoretical development, problemsolving method, and research method. Based on the considered sample, we analyze the styles adopted in selected publications and show that authors have favored certain styles while leaving others underexplored; further, we reveal important strengths and weaknesses in the composition of styles within the IS discipline. Based on these insights, we discuss how action research practices and writing can be improved, as well as how to further develop style compositions to support the publication of engaged scholarship research.",0
How a professionally qualified doctoral student bridged the practice-research gap: a confessional account of Collaborative Practice Research,"Information Systems (IS) is a profession-based discipline that constantly seeks new ways to bridge the practice-research gap. These efforts include enacting scholar-practitioner roles across institutional boundaries, developing and disseminating new knowledge, and engaging professionally qualified doctoral students. Against this backdrop, we provide a confessional account of 10 years of Collaborative Practice Research (CPR) between Anna, an IS practitioner, and Lars, an IS researcher. The collaboration was initiated when Anna, while working full-time, engaged as doctoral student with Lars as supervisor. Combining social process modeling with theories of change and learning, we show how Anna and Lars responded to the experienced challenges and opportunities, how Anna's action strategies developed as she grew into becoming a practitioner-researcher, how the collaboration impacted the practice context, and, how the research resulted in traditional publication outcomes. On the basis of these analyses, we discuss how to engage professionally qualified doctoral students within the IS discipline. In addition, we offer lessons on how CPR can help bridge the practice-research gap as a path towards becoming a practitioner-researcher.",0
Complementary Technology Traces in Software Practice: A Retrospective Reflection over Sixteen Years of Evolution at Ericsson,"To advance knowledge about evolution of practices within a software organisation, we offer a retrospective reflection based on several years of research into a software unit at Ericsson AB. Covering 16 years of evolution, we developed multiple publications from continuously expanding sources of software technology implementation data. While these publications report from specific junctures of software practice evolution at the unit, our retrospective reflection allows us to consider the impacts of the unit’s investments into two technology paradigms over the sixteen-year period: first into CMM-RUP with a focus on discipline and structured practices and years later into Agile-Lean with a focus on flexibility and responsive practices. Hence, we adopt retrospective reflection to investigate how imprints from the two paradigms, despite considerable timespan between the related technology implementations, eventually complemented each other in the unit’s software practices. Because one paradigm focuses on discipline and structured practices and the other on flexibility and responsive practices, our retrospective reflections consider how the two paradigms together impacted the software unit’s ambidextrous capability. As a result, we advance the idea that as software organisations over time invest in complementary technology paradigms they leave important technology traces with sustainable impacts on their software practices.",0
Software requirements change taxonomy: Evaluation by case study,"Although a number of requirements change classifications have been proposed in the literature, there is no empirical assessment of their practical value in terms of their capacity to inform change monitoring and management. This paper describes an investigation of the informative efficacy of a taxonomy of requirements change sources which distinguishes between changes arising from `market', `organisation', `project vision', `specification' and `solution'. This investigation was effected through a case study where change data was recorded over a 16 month period covering the development lifecycle of a government sector software application. While insufficiency of data precluded an investigation of changes arising due to the change source of `market', for the remainder of the change sources, results indicate a significant difference in cost, value to the customer and management considerations. Findings show that higher cost and value changes arose more often from `organisation' and `vision' sources; these changes also generally involved the co-operation of more stakeholder groups and were considered to be less controllable than changes arising from the `specification' or `solution' sources. Overall, the results suggest that monitoring and measuring change using this classification is a practical means to support change management, understanding and risk visibility.",0
Action in action research,,0
{CERSE} - Catalog for empirical research in software engineering: A Systematic mapping study,"**Context:** Empirical research in software engineering contributes towards developing scientific knowledge in this field, which in turn is relevant to inform decision-making in industry. A number of empirical studies have been carried out to date in software engineering, and the need for guidelines for conducting and evaluating such research has been stressed.

**Objective:** The main goal of this mapping study is to identify and summarize the body of knowledge on research guidelines, assessment instruments and knowledge organization systems on how to conduct and evaluate empirical research in software engineering.

**Method:** A systematic mapping study employing manual search and snowballing techniques was carried out to identify the suitable papers. To build up the catalog, we extracted and categorized information provided by the identified papers.

**Results:** The mapping study comprises a list of 341 methodological papers, classified according to research methods, research phases covered, and type of instrument provided. Later, we derived a brief explanatory review of the instruments provided for each of the research methods.

**Conclusion:** We provide: an aggregated body of knowledge on the state of the art relating to guidelines, assessment instruments and knowledge organization systems for carrying out empirical software engineering research; an exemplary usage scenario that can be used to guide those carrying out such studies is also provided. Finally, we discuss the catalog’s implications for research practice and the needs for further research.",0
A hybrid {RSA}-{DH} cipher for Signed Encrypted Messages,,0
Insights into Practitioner Design Science Research,"Building on two previous papers that focused on the concept of Practitioner Design Science Research [1, 2], this paper: (i) presents the Practitioners Design Science Research (PDSR) Canvas, a visual guide for practitioners undertaking DSR, and (ii) utilises it as a lens to analyse the insights of 48 practitioners on their DSR journey. Data is primarily gathered from 48 practitioners, of which, 34 have completed a 12-month Design Science Research study, with the other 14 in the final stages of their journey. This unique practitioner perspective further develops the novel concept of PDSR which enables practitioners to engage with the academic community and not the other way around. Key findings show that practitioners have challenges with the practical (relevance) aspects of DSR as well as the research (rigour) aspects. Nonetheless, the analysis indicates that with a clear depiction of DSR, the gap between practice and research may not be as difficult to bridge as previously thought. However, this requires the IS community to rethink their definition of engaged scholarship from one that solely focuses on the academic as the researcher to one that also includes the practitioner.",0
Mentoring Programs for Knowledge Convey in a Small Software Industries,"Small programming consultancy organizations need to use their position in the market to remain in front of their rivals. Keeping in mind the end goal to survive, the arrangements gave by their experts must be of such quality that makes their clients come back to the organization when they require help with another venture, and the arrangements ought to guarantee a decent notoriety for the organization that draws in new clients. To guarantee high caliber in the frameworks created, organizations are subject to a decent programming improvement process. The principle parts of this procedure can be arranged out ahead of time and utilized on the whole in a firm with a specific end goal to guarantee quality, yet in each venture you will most likely keep running into circumstances where it is imperative to have the capacity to extemporize so as to keep the venture on tracks. This is particularly valid for little programming escalated organizations in turbulent conditions.",0
Software process re-engineering: a model and its application to an industrial case study,"Many software organizations engage in software process improvement (SPI), but process descriptions may soon become outdated especially if the organization, for a while, has given low priority to SPI. As a result, software organizations may need to re-engineer process descriptions that are inconsistent with desired process practices. While the literature addresses how organizations can re-engineer business processes and legacy systems, no guidance exists on re-engineering legacy process descriptions. Software process re-engineering (SPR) is a transitional activity that helps organizations effectively re-engage in SPI by assessing legacy process descriptions; selecting process descriptions that need to be removed, innovated, or implemented; and defining a plan to align process descriptions with desired process practices. SPR results in a repository of managed process descriptions and a plan for disciplined software process management. In this article, we derive principles for SPR, use these principles to propose a model for re-engineering legacy process descriptions, and present an industrial case study to demonstrate the effectiveness of the model. In the presented case, SPR had several benefits: it leveraged earlier investments in SPI; it engaged key stakeholders in revitalizing improvement efforts; it created a shared understanding of the organization's desired process practices; and, it established a solid platform for continued SPI. Copyright © 2008 John Wiley & Sons, Ltd.",0
Combining Perceptions and Prescriptions in Requirements Engineering Process Assessment: An Industrial Case Study,,0
Building contextual ambidexterity in a software company to improve firm-level coordination,"Software organizations increasingly face contradictory strategic choices as they develop customized and packaged solutions for the market. They need to improve efficiency of development processes while at the same time adapting to emerging customer needs; they need to exploit software products in relation to existing customers while simultaneously exploring new technology and market opportunities; and, they need to consider both incremental and radical innovations. While the integration of such opposing strategies requires software organizations to become ambidextrous, there is limited actionable advice on how managers can develop such capability. Against this backdrop, we report from a two-year action research study into a small software firm, TelSoft. Based on Pettigrew's contextualist inquiry, we develop a framework that integrates existing theory on contextual ambidexterity with a generic process for improving software organizations, and we apply this framework to analyze how TelSoft improved its coordination of products, projects, and innovation efforts. As a result, we offer principles for how software managers can build ambidextrous capability to improve firm-level coordination.",0
A Critical Assessment of Information Systems Action Research,"The debate between rigor and relevance in information systems research has motivated methodological pluralism in the information
systems field. In the recent years IS researchers have applied various methodologies; one such method that is gaining prominence
is action research. As qualitative method that emphasis collaboration between researchers and practitioners’ action research
has been applied to study IS in various organizational settings. In this chapter we address the issues associated with action
research. In doing this we develop a set of criteria to assess the quality of information systems action research. We then
provide recommendations to improve both the incidence and the quality of action research in the field.",0
Resource Optimisation in Cloud Computing: Comparative Study of Algorithms Applied to Recommendations in a Big Data Analysis Architecture,"Recommender systems (RS) have emerged as a means of providing relevant content to users, whether in social networking, health, education, or elections. Furthermore, with the rapid development of cloud computing, Big Data, and the Internet of Things (IoT), the component of all this is that elections are controlled by open and accountable, neutral, and autonomous election management bodies. The use of technology in voting procedures can make them faster, more efficient, and less susceptible to security breaches. Technology can ensure the security of every vote, better and faster automatic counting and tallying, and much greater accuracy. The election data were combined by different websites and applications. In addition, it was interpreted using many recommendation algorithms such as Machine Learning Algorithms, Vector Representation Algorithms, Latent Factor Model Algorithms, and Neighbourhood Methods and shared with the election management bodies to provide appropriate recommendations. In this paper, we conduct a comparative study of the algorithms applied in the recommendations of Big data architectures. The results show us that the K-NN model works best with an accuracy of 96%. In addition, we provided the best recommendation system is the hybrid recommendation combined by content-based filtering and collaborative filtering uses similarities between users and items.",0
Energy and utility management maturity model for sustainable manufacturing process,,0
Software process improvement with weak management support: an analysis of the dynamics of intra-organizational alliances in {IS} change initiatives,"Software Process Improvement (SPI) projects are large-scale, complex organization-wide change initiatives. They require considerable investments in personnel, time and money and impact just about every aspect of software firms. The group charged with conducting an SPI project has, however, little formal authority to influence or force software professionals to engage in SPI work or to define and implement changes. The SPI literature suggests that successful SPI initiatives depend on strong commitment from top management. But what should the SPI group do if management support is weak? In this paper, we present an analysis of how an SPI group can use alliances to obtain influence and succeed when management support is weak. Our study is based on a 3-year longitudinal field study of SPI change initiatives at Denmark Electronics. Our findings show that a lack of top management support is not necessarily incompatible with success. This research opens an important new area of research on intra-organizational alliances and information system (IS) implementation. It has the potential to offer new theories and practical advice on how IS implementation projects can be more effectively managed.",0
Using organizational influence processes to overcome {IS} implementation barriers: lessons from a longitudinal case study of {SPI} implementation,"A fundamental tenet of the information systems (IS) discipline holds that: (a) a lack
of formal power and influence over the organization targeted for change, (b) weak
support from top management, and (c) organizational memories of prior failures
are barriers to implementation success. Our research, informed by organization
influence, compellingly illustrates that such conditions do not necessarily doom a
project to failure. In this paper, we present an analysis of how an IS implementation
team designed and enacted a coordinated strategy of organizational influence to
achieve implementation success despite these barriers. Our empirical analysis also
found that technology implementation and change is largely an organizational
influence process (OIP), and thus technical-rational approaches alone are
inadequate for achieving success. Our findings offer managers important insights
into how they can design and enact OIPs to effectively manage IS implementation.
Further, we show how the theory of organizational influence can enhance
understanding of IS implementation dynamics and advance the development of a
theory of effective IS change agentry.",0
Is Action Research and Its Criteria,"There is little agreement on which criteria should be used in the design and evaluation of IS action research. Much action
research is not at all explicit about the applied criteria. This chapter seeks to remedy this by eliciting from twenty odd
years of action research six criteria. The epistemology of action research has traces back to pragmatism and with this as
background the six criteria are presented and illustrated through a piece of recent action research. The contributions of
the chapter are the six criteria, how to model these in their context of research activities and research contributions, and
how to understand these criteria in a pragmatist view.",0
Mapping Social Networks in Software Process Improvement: An Action Research Study,"Software process improvement in small, agile organizations is often problematic. Model-based approaches seem to overlook problems. We have been seeking an alternative approach to overcome this through action research. Here we report on a piece of action research from which we developed an approach to map social networks and suggest how it can be used in software process improvement. We applied the mapping approach in a small software company to support the realization of new ways of improving software processes. The mapping approach was found useful in improving social networks, and thus furthers software process improvement. Full Text at Springer, may require registration or fee",0
Social networks in software process improvement,"Software process improvement in small organisation is often problematic and communication and knowledge sharing is more informal. To improve software processes we need to understand how they communicate and share knowledge. In this article have studied the company SmallSoft through action research. In the action research we have applied the framework of social network analysis and we show this can be used to understand the underlying structures of communication and knowledge sharing between software developers and managers. We show in detail how the analysis can be done and how the management can utilise the findings. From this we conclude that social network analysis was a useful framework together with accompanying tools and techniques. Copyright © 2009 John Wiley & Sons, Ltd.",0
{IT} Business Cases in Local Government: An Action Research Study,"Effective management of value creation with information technology (IT) is increasingly important for local governments (e.g., municipalities). The business case is a tool that has increased popularity in both the public and private sector to support the management of value creation with IT. However, experiences from local government reveal difficulties in developing effective IT business cases beyond simple cost savings. Based on collaborative action research with Danish municipalities we present insights on contemporary IT business case practices. Based on these insights we formulate lessons for business case practices in local government that we have incorporated into a business case method, that has subsequently been evaluated by IT managers in local government. These lessons have been synthesized into the four principles: minimal contents, benefits ownership, dynamic utility, and social commitment. We argue that these principles improve the content, development, and use of IT business cases in local government.",0
Engaged Problem Formulation in {IS} Research,"“Is this the problem?”: the question that haunts many information systems (IS) researchers when they pursue work relevant to both practice and research. Nevertheless, a deliberate answer to this question requires more than simply asking the involved IS practitioners. Deliberately formulating problems requires a more substantial engagement with the different stakeholders, especially when their problems are ill structured and situated in complex organizational settings. On this basis, we present an engaged approach to formulating IS problems with, not for, IS practitioners. We have come to understand engaged problem formulation as joint researching and as the defining of contemporary and complex problems by researchers and those practitioners who experience and know these problems. We used this approach in investigating IS management in Danish municipalities. In this paper, we present the approach to formulating problems in an engaged way. We discuss it in relation to ideas and assumptions that underpin engaged scholarship, and we discuss the implications for IS action research, design science research, and mixed approaches.",0
Useful business cases: value creation in {IS} projects,"Business cases have become popular as part of managing value creation in IS projects. Nevertheless, business cases are often poorly linked to value creation activities and organizations struggle to develop business cases that are useful and express more than simple cost savings. This action research study seeks to improve the usefulness of business cases in IS projects. We used collaborative action research with Danish municipalities to improve their practices when developing and using business cases and to change their perceptions of what constitutes a good business case that is useful during implementation and value creation. This article presents lessons learned from our action research, lessons that we incorporated into a business case method and subsequently evaluated with IS managers. There are three lessons on: (1) improving the content of business cases, (2) how to develop business cases, and (3) the use of business cases in subsequent value creation. These lessons summarize our findings and the contributions are that we in the business case method propose to: (1) include minimal contents, (2) develop social commitment, and (3) structure for dynamic use during value creation. We discuss the lessons and contributions related to research on IS business cases and value creation.",0
Problematizing in {IS} Design Research,"This paper is based on the interest to see how problems are addressed in information systems design research. Problems addressed by design research are often implicit, sometimes open, and sometimes even underdeveloped. Problem-solving processes, action research and in a broader sense, engaged scholarship all encompass the explicit addressing of problems and investigation problem situations. Such a problem-orientation is to a lesser degree part of design research. In this paper, we will investigate how we can provide a better understanding of problematizing in design research; and in particular what we may learn from other approaches with a stronger problem-orientation.",0
Assessing the effects of introducing a new software development process: a methodological description,"In this article, we report from a 22-months long action research study in which we evaluate the usefulness of a set of software development tools in an industrial setting, a small software company. We focus on how developers in the industry use and adopt these tools, what expectations they have on them, how the tools can be improved, and how the adoption process itself can be improved. We describe these change processes from a methodological perspective, how we monitored the processes, how we reviewed the outcomes, and the strategies that we applied. We show how the processes evolved, intermediate results, and the steps that were taken along the way based on the outcomes. We believe that the described study may inspire other tool-developers and/or researchers to organize similar studies to further our understanding of the complex processes involved in the adoption of software development tools in industry.",0
{IT} Project Alignment in Practice,"IT projects live in dynamic and interorganizational settings. As the project context changes, IT projects run the risk of not delivering intended utility to the organization, despite delivering according to the project plan. There is a need for IT projects to continuously align themselves with their surrounding context in order to stay relevant. In this chapter, a pragmatic model for IT project alignment is presented and demonstrated. Results show how the model can be used as a support to traditional IT project management methods. The chapter is concluded with a presentation of three projects to further the understanding of IT project alignment in practice.",0
Insider as Action Researcher,"Usually, the action researcher is someone who is external to the organization, provides expertise in an organizational intervention,
and systematically evaluates the intervention to gain knowledge from the action. The responsibility for the research role
by researcher and practitioner within action research can vary along a continuum from where the researcher takes full responsibility
for research-oriented tasks to where the researcher coaches the practitioner in fulfilling research-oriented tasks. This chapter
explores the end of the continuum where the inside practitioner is provided with the theory and research structure to fulfill
more of the research-oriented tasks. The ill-structured problem domain of business planning is used to illustrate. Executives,
who are students within an Executive MBA Program and are also participants in organizational interventions, fulfill the role
of insider-as-researcher. Results indicate that insider action researchers can provide sensitive data to which outsider action
researchers may not have access and are capable of systematically evaluating organizational interventions.",0
The action research$\less$i$\greater$vs$\less$/i$\greater$design science debate: reflections from an intervention in {eGovernment},"As Design Science (DS) establishes itself as an acceptable approach to Information Systems research, many have commented on the similarity, or otherwise, between DS and Action Research (AR). Most of the writing on this topic has been conceptual, and not grounded in practice. In this paper, we present a piece of completed research that was perceived and executed as AR, but also reflected upon as DS. The research produced a new method for diagramming electronic workflows and creating the associated digital signatures, within the domain of eGovernment. Our conclusion is that AR that produces an artefact can be quite easily, and perhaps superficially, presented as DS. Epistemologically, there is little to separate the two methodologies. However, there are some subtle differences in practice, especially with regard to the role of the artefact, the structuring of the process, the focus of evaluation of the intervention and research, and the emphasis on learning and knowledge. We provide guidance to researchers contemplating either approach, and also consider the role of pluralist attempts to combine the approaches.",0
Process Control with {IEC} 61499: Designers{\textquotesingle} Choices at Different Levels of the Application Hierarchy,"The IEC 61499 enables different approaches for application development, and this can undermine the emerging open knowledge economy. Developers typically try to use an approach that resembles their previous programming experience, and this can result in the new features of IEC 61499 to be overlooked. Even when designers are able to turn out working software, the various components are often incompatible because they incorporate diverse design principles. In this research, we look at the different levels of the application hierarchy, in order to understand the design decisions that need to be made. We have organized a laboratory experiment with professional designers and researchers, and we use qualitative research methods to understand the design choices that participants with different backgrounds make.",0
Sustainable Alignment in Enterprise Architecture: A Case Study of Architectural Principles,"Enterprise Architecture (EA) has emerged as the preeminent means to change and transform large organizations. By employing architectural principles, organizations strive to master the complexity inherent in business processes and information system and their alignment. Despite the fact that Business-IT alignment has been a top concern for practitioners and researchers for years, the emergent nature of alignment in EA has rarely been taken into consideration. Even if different approaches focus on business IT alignment, most of them have a tendency to focus on alignment as a state or a process by focusing on strategy or organizational issues. Moreover, very few existing EA Frameworks give clear guidance on how to design and manage these alignment issues. In this paper we argue that the choice of architectural principles has an impact on the ability to achieve and maintain sustainable EA alignment in a dynamic business context. A case study is used as a basis for the analysis.",0
A research framework for building {SPI} proposals in small organizations: the {COMPETISOFT} experience,"Establishing a research strategy that is suitable for undertaking research on software engineering is vital if we are to guarantee that research products are developed and validated following a systematic and coherent method. We took this into account as we carried out the COMPETISOFT research project, which investigated software process improvement (SPI) in the context of Latin American small companies. That experience has enabled us to develop a research strategy based on the integrated use of action research and case study methods. This paper introduces the proposed research strategy and provides extensive discussion of its application for: (1) developing the Methodological framework of COMPETISOFT for SPI, (2) putting this framework into practice in eight small software companies, and (3) refine the Methodological framework due to the practice feedback. The use of this research strategy allowed us to observe that it was suitable for developing, refining, improving, applying, and validating COMPETISOFT’s Methodology framework. Furthermore, having seen it applied, we believe that this strategy offers a successful integration of action research and case study, which can be useful for conducting research in other software engineering areas which address needs of small software companies.",1
An Approach to Institutionalisation of Software Processes,"Software Process Improvement (SPI) has been shown to be a useful approach for improving an organisation’s software capabilities. One great challenge for organisations wrestling with SPI is how to institutionalise the newly created software processes in the whole organisation. Institutionalisation of soaftware processes is a matter of cultivating organisation-wide change, which has proven to be no small challenge for many organisations. Different factors such as the complexity of organisational change and culture, the human factor (resistance to change) and lack of a supporting organisation for change have caused problems in making change happen in organisations. These problems may cause delays, poor quality, cost overruns in software projects and even resistance to using new created software processes. This paper presents the results of a collaborative research study in which an institutionalisation model was created and implemented and analysed on the basis of a framework of organisational change management.",0
"Creating Sustainable Education Projects In Roat, Honduras Through Continuous Process Improvement","The investigators worked together with permanent residents of Roatán, Honduras on sustainable initiatives to help improve the island’s troubled educational programs. Our initiatives focused on increasing the number of students eligible and likely to attend a university. Using a methodology based in continuous process improvement, we developed tutoring programs, college preparation workshops, long-term plans for a local school, and solicited involvement by an island educational coalition. Lessons learned from these initiatives may be used to expand other efforts on the island and can be generalized to other programs in Central America.",0
Appreciative Inquiry,,0
Mediating boundaries between knowledge and knowing,"This article reflects critically on the use of a wiki as a data repository for knowledge transfer and as a mediating technical platform for social learning in the context of a multi-country programme of agricultural research for development. The wiki was designed to foster sustainable social learning and an emergent community of practice among biophysical and social researchers acting for the first time as co-researchers. Over time, the technologically mediated element of the learning system was judged to have failed. The article is based on an inquiry that asked ‘How can learning system design cultivate learning opportunities and respond to learning challenges in an online environment to support research for development practice?’ The article also considers the wider context and institutional setting in which the knowledge work took place.",0
Mediating boundaries between knowledge and knowing,"This article reflects critically on the use of a wiki as a data repository for knowledge transfer and as a mediating technical platform for social learning in the context of a multi-country programme of agricultural research for development. The wiki was designed to foster sustainable social learning and an emergent community of practice among biophysical and social researchers acting for the first time as co-researchers. Over time, the technologically mediated element of the learning system was judged to have failed. The article is based on an inquiry that asked ‘How can learning system design cultivate learning opportunities and respond to learning challenges in an online environment to support research for development practice?’ The article also considers the wider context and institutional setting in which the knowledge work took place.",0
A case study of industry{\textendash}academia communication in a joint software engineering research project,,1
Grounded Design - a praxeological {IS} research perspective,"In this paper, we propose Grounded Design – a particular design research (DR) approach rooted in a practice-theoretical tradition. It assesses the quality of information technology (IT) design through evaluation of emerging changes in social practices, which result from the appropriation and use of IT artifacts. The paper starts with a systematic analysis of the reasons for persistent limitations of traditional information systems DR, specifically in coping with problems of contingency and self-referentiality. Following this critique, the principles of Grounded Design are presented. Grounded Design is applied in case studies where we reconstruct the social practices observed before and during the design and appropriation of innovative IT artifacts. We call these context-specific research endeavors ‘design case studies.’ In conducting these case studies, Grounded Design builds upon well-established research methods such as ethnographical field studies, participatory design and action research. To support the transferability of its situated findings, Grounded Design suggests documenting increasing numbers of design case studies to create an extended, comparative knowledge base. Comparing cases allows for the emergence of bottom-up concepts dealing with the design and appropriation of innovative IT artifacts in social practice.",0
An Integrated Model for Strategizing with the Base of the Pyramid: An Action Research into a Mexican Agribusiness,,0
An Integrated Model for Strategizing with the Base of the Pyramid: An Action Research into a Mexican Agribusiness,,0
Identifying Opportunities for {IT}-Enabled Organizational Change,,0
Accumulating Design Knowledge: A Mechanisms-Based Approach,"We develop an empirically-grounded understanding of how design knowledge accumulates over time. Drawing from theory on knowledge creation, we conceptualize accumulation along the goals and scope of knowledge in DSR as a distinct knowledge creation problem. Through two empirical studies, we theorize knowledge accumulation in DSR by unpacking (a) three knowledge creation mechanisms and (b) explaining how their interplay forms different patterns of knowledge creation over time. We contribute a theoretical framework conducive to integrating knowledge produced through different methods by introducing knowledge creation processes as distinct unit of analysis in DSR and by pointing out that extant procedural models may need revision to account for the continuous knowledge creation occurring in potentially multi-year DSR projects.",0
Cultivating Recalcitrance in Information Systems Research,"ABSTRACT There is an ongoing debate about how to improve the quality of empirical research efforts in information systems One of the persistent issues within the debate concerns the rela - tive importance of social and technical aspects of an informa - tion system and how to study these different elements Contem - porary research within science and technology studies suggests that social science inquiries can learn from empirical enquiries within the natural sciences through the notion of recalcitrance in experimental subjects The aim of this article is to conduct an initial exploration of the usefulness of these ideas in the con - text of empirical information systems research The following three research methods are subjected to a first theoretical analysis: (1) longitudinal, interpretive case study; (2) quan - titative case study; and (3) laboratory experiments For each of the three methods, an example is studied together with reflec - tions from the researchers conducting the particular study It is concluded that although this does not represent a solution to all methodological problems, adopting the perspective of cultivating recalcitrance and designing research methods to",0
Cultivating Recalcitrance in Information Systems Research,"ABSTRACT There is an ongoing debate about how to improve the quality of empirical research efforts in information systems One of the persistent issues within the debate concerns the rela - tive importance of social and technical aspects of an informa - tion system and how to study these different elements Contem - porary research within science and technology studies suggests that social science inquiries can learn from empirical enquiries within the natural sciences through the notion of recalcitrance in experimental subjects The aim of this article is to conduct an initial exploration of the usefulness of these ideas in the con - text of empirical information systems research The following three research methods are subjected to a first theoretical analysis: (1) longitudinal, interpretive case study; (2) quan - titative case study; and (3) laboratory experiments For each of the three methods, an example is studied together with reflec - tions from the researchers conducting the particular study It is concluded that although this does not represent a solution to all methodological problems, adopting the perspective of cultivating recalcitrance and designing research methods to",0
Cultivating Recalcitrance in Information Systems Research,"ABSTRACT There is an ongoing debate about how to improve the quality of empirical research efforts in information systems One of the persistent issues within the debate concerns the rela - tive importance of social and technical aspects of an informa - tion system and how to study these different elements Contem - porary research within science and technology studies suggests that social science inquiries can learn from empirical enquiries within the natural sciences through the notion of recalcitrance in experimental subjects The aim of this article is to conduct an initial exploration of the usefulness of these ideas in the con - text of empirical information systems research The following three research methods are subjected to a first theoretical analysis: (1) longitudinal, interpretive case study; (2) quan - titative case study; and (3) laboratory experiments For each of the three methods, an example is studied together with reflec - tions from the researchers conducting the particular study It is concluded that although this does not represent a solution to all methodological problems, adopting the perspective of cultivating recalcitrance and designing research methods to",0
Explicit as Enabler for Understanding the Tacit,"Knowledge that can be expressed in words and numbers (i.e., explicit knowledge) only represents the tip of the iceberg in
organizational knowledge. Explicit knowledge may be communicated in formal, systematic language, using standard notations.
This paper reviews how explicit knowledge is used within software engineering, and has found that this tip is important to
store organizational knowledge, discuss improvements, and communicate competences. We further discuss how the tip can be viewed
as a facilitator for understanding tacit knowledge, such as context dependent actions, commitments, and involvement. To support
these arguments, we have studied software engineering units within Ericsson AB during the period 2005–2007 to learn more about
software engineering process descriptions and notations in practice. Findings indicate that unambiguous process descriptions
are dependent on obvious software process notations and that the explicit nature of described software processes serve as
a vital catalyst in initiating discussions of tacit knowledge.",0
Agile Collaborative Research: Action Principles for Industry-Academia Collaboration,"Both the software industry and academia promote collaboration to solve challenges together that neither can solve alone. Collaboration brings opportunities to understand and improve in ways not possible when working apart, but it succeeds only if both parties are contributing. A collaboration model developed from eight years' experience setting up and managing a research center explicitly focused on industry needs is based on five success factors enabling research results (need orientation, industry goal alignment, deployment impact, industry benefit, and innovativeness), five success factors enabling research activities (management engagement, network access, collaborator match, communication ability, and continuity), and 10 action principles for industry-academia collaboration management.",0
Academia{\textendash}Industry Collaboration: Getting Closer is the Key!,,0
Meeting Industry-Academia Research Collaboration Challenges with Agile Methodologies,,1
"Innovation Processes in Indigenous Communities in the North - Cultural, Psychological and Technological Knowledge in Practice","The paper addresses psychological knowledge in innovation processes in rural areas in the North. The empirical base is the introduction of an innovation program realized through the University of the Arctic, a cooperative network of universities, colleges and other organizations committed to higher education and research in the North. We attempted to stimulate innovation in the rural villages of Northern Russia using workshops centred on building social capital through psychological knowledge. Our analysis shows that good family health and psychological knowledge among villagers is important for sustaining the innovation process in the North. We also found that technological infrastructure is a crucial but often lacking component in this process.",0
Governing nonprofit platform ecosystems {\textendash} an information platform for refugees,"The number of refugees arriving in Europe increased dramatically in 2015. Following arrival at the host country, refugees need access to information on various topics such as applying for asylum, medical care, educational offerings, jobs, or social activities. As many different parties using different channels provide this information, refugees struggle to access relevant information at the right time. Our goal in addressing this information deficit is to support a digital information platform for refugees by developing a governance strategy for the ecosystem of information providers. Within an action research study based on a nonprofit project, we evaluate the implementation of governance mechanisms derived from platform and community governance literature. Our results show that governance mechanisms are implemented differently for nonprofit platform ecosystems than for commercial platform ecosystems. These results enhance the societal impact of the information platform developed in the project. The study contributes to theory on governance of platform ecosystems and IT-enabled collaboration by evaluating established governance mechanisms in the context of nonprofit platforms.",0
Enterprise Modeling and Enterprise Architecture,"Several scholars have argued for the need to integrate both the IT perspective and the business perspective during development of enterprises and IS/IT architectures. In this process, it is necessary to be able to deal with a number of sub-areas to succeed with the transformation. One challenge is the need to move beyond a narrow focus on one tradition or technology, as well as to use and integrate different concepts within an enterprise. This integrated view also includes the use and development of guidelines (methods, tools, etc.), in addition to research methodologies and human aspects. Therefore, enterprise modeling and enterprise architecture must treat all slices in a comprehensive alignment context. In this paper, the author presents a conceptualization of the research area Enterprise Modeling and Enterprise Architecture with a focus on transformation and alignment of business and IT.",0
Action Design Research,"Design research (DR) positions information technology artifacts at the core of the Information Systems discipline. However, dominant DR thinking takes a technological view of the IT artifact, paying scant attention to its shaping by the organizational context. Consequently, existing DR methods focus on building the artifact and relegate evaluation to a subsequent and separate phase. They value technological rigor at the cost of organizational relevance, and fail to recognize that the artifact emerges from interaction with the organizational context even when its initial design is guided by the researchers' intent. We propose action design research (ADR) as a new DR method to address this problem. ADR reflects the premise that IT artifacts are ensembles shaped by the organizational context during development and use. The method conceptualizes the research process as containing the inseparable and inherently interwoven activities of building the IT artifact, intervening in the organization, and evaluating it concurrently. The essay describes the stages of ADR and associated principles that encapsulate its underlying beliefs and values. We illustrate ADR through a case of competence management at Volvo IT.",0
The Impact of {ERP} System on Academic Performance: A Case Study Approach,"Enterprise Resource Planning (ERP) system is a very powerful solution to many academic and non-academic institutions in case it has been implemented and used effectively. Otherwise, the system will interrupt several business processes. This research paper investigates the impact of ERP system on academic performance at Sohar University. A survey questionnaire is distributed to several academic stakeholders to investigate the impact of ERP system on academic performance within the University context. A total of 110 questionnaires was received from the key academic stakeholders to examine the relationship between the three core ERP modules i.e. the students’ information module, the financial module, and human resource module. The research outcomes indicate that there is a relationship between the three modules and the academic performance. However, only students’ information module and financial management module demonstrate a significant impact on academic performance, though the human resource module shows no impact on the academic performance at Sohar University. This study is a single case study approach, which might limit the findings to be generalized on other education institutes, but it gives a chance to other researchers to do multiple case studies in other Universities in the region.",0
{IT}-Based Revenue Cycle Management: An Action Research into Relational Coordination,,0
{IT}-Enabled Revenue Cycle Transformation in Resource-Constrained Hospitals: A Collaborative Digital Options Inquiry,"Although hospitals increasingly consider solutions based on information technolgy (IT) for revenue cycle management, contextual constraints and numerous IT investment alternatives make it difficult to identify and realize appropriate solutions. Thus far, however, health IT theory has been silent on how IT can support financial and administrative purposes within hospitals, focusing instead on IT for clinical support. Against this backdrop, we report on an action research project involving IT-enabled revenue cycle transformation in a financially strapped rural hospital. Our research contributes to health IT theory by expanding the discourse to include revenue cycle transformation and by demonstrating how resource-constrained hospitals can improve their financial performance through selective investments in low-cost IT solutions across the revenue cycle. We also contribute to action research methodology by generalizing our interventions to propose digital options inquiry—a systematic approach to business process transformation that combines digital options theory with diagnostic process mapping—to help researchers and practitioners jointly understand and transform business processes.",0
Scientific collaboration,,0
Towards Sustainable {IT} by Teaching Governance Practices for Inter-Organizational Dependencies,"The issue of sustainability has been among the top concerns of IT practitioners for some time now. Although sustainability of and through IT can only be reached if all stakeholders work together, current teaching and on-the-job training approaches do not provide the required understanding of how to govern the cooperation. Furthermore, there is a general gap between IS academia and practice regarding skill teaching, stakeholder informing and contributions towards sustainable business practices. In this paper, we adopt a design science research methodology to develop and evaluate a first approach to close this threefold gap.",0
Control Software Reuse Strategies with {IEC} 61499,"The IEC 61499 gives developers considerable freedom and offers several features that support reuse. Although this can help the adoption of the standard into an organization's development process, the range of design decisions can also harm the reusability of software, if components are developed with incompatible design principles. Guidelines are needed, but the unique backgrounds and market positions of industrial players must be respected. The paper analyzes some alternative solutions that were developed by automation designers using IEC 61499; although the solutions differ considerably, it is very difficult to rate their reuse potential absolutely. The factors that must be addressed in a reuse strategy are discussed, concluding with the suggestion that it is not possible to present detailed guidelines that would apply to the entire industry",0
Control Software Reuse Strategies with {IEC} 61499,"The IEC 61499 gives developers considerable freedom and offers several features that support reuse. Although this can help the adoption of the standard into an organization's development process, the range of design decisions can also harm the reusability of software, if components are developed with incompatible design principles. Guidelines are needed, but the unique backgrounds and market positions of industrial players must be respected. The paper analyzes some alternative solutions that were developed by automation designers using IEC 61499; although the solutions differ considerably, it is very difficult to rate their reuse potential absolutely. The factors that must be addressed in a reuse strategy are discussed, concluding with the suggestion that it is not possible to present detailed guidelines that would apply to the entire industry",0
Professional designers{\textquotesingle} adaptations of {IEC} 61499 to their individual work practices,"The IEC 61499 standard enables a number solutions to the same application development problem, and this can result in components that are incompatible even though they are standards based. IEC 61499 underpins a vision for an open object-oriented knowledge economy, so the application of component-based software development principles needs further research. Such principles are not broadly used in the industry, so our goal is to understand how industrial practice needs to be changed. What are the practices that need to be replaced before the object-oriented, component-based paradigm can be accepted? We organized an intensive course on IEC 61499, where professionals and researchers automated a process in teams. Our results show that the background of a designer has a strong impact on the choice of the problem solving approach, and that this can prevent the use of many new and progressive features in IEC 61499",0
Analysis and Design Web Based System in {LPPM} {UMN},"Institute for Research and Community Service, or called LPPM is a forum for researchers to conduct studies with internal and national scales. LPPM UMN is one of the institutions that provide the container for UMN researchers. However, in the LPPM UMN itself still does not have a webbased system that can be accessed anywhere. This website will be able to share knowledge amongst lecturers by downloading study results that have been done before. After collecting all the requirements, an application is designed using the Rapid Application Development for a limited time spent. The application is built by designing a website and applying MySQL database and PHP programming language with CodeIgniter framework 2.2.2. This website is divided into 3 parts; admins, reviewers, and researcher. Admins are able to see the whole proposal which is sent and appoint a reviewer for one of the proposals. Reviewers have some facilities to review research proposals that have been uploaded. Researchers are able to upload a research proposal. Index Terms - LPPM, Knowledge Management, Research, Website.",0
A step-by-step performance assessment and improvement method for {ERP} implementation: Action case studies in Chinese companies,"The implementation of enterprise resource planning (ERP) is a complex process, and the failure rate remains very high. The literature has reported over 80 critical success factors for ERP implementation, but companies typically do not know to exploit them. In this article, a step-by-step assessment and improvement method for ERP implementation is proposed and applied in three companies. First, a five-stage ERP implementation model is proposed. Second, about 80 critical success factors (CSFs) from the literature are elaborated into key performance indices (KPIs), which are associated with each stage of ERP implementation by ten local ERP experts. Third, the weights of the KPIs are calculated using the Dumpster–Shafer method and the evaluation of ten experts. During the implementation process, performance is measured at each stage and remedial actions are identified if the performance is below expectation. An implementation flowchart is developed based on a five-stage model and the philosophy of continuous improvement. Three action cases in Chinese manufacturing companies are conducted to illustrate the effects of the assessment model, which is also currently being used by a consulting company specialising in ERP implementation. With further evaluation by local experts, the model has the potential to serve as a guideline for ERP implementation in other countries.",0
Applying Options Thinking to Shape Generativity in Digital Innovation: An Action Research into Connected Cars,"Although extant research convincingly argues that managers can change product innovation practices by exploiting new forms of generativity afforded by digital technology, the literature has so far been silent on how incumbent firms may conceive of and implement requisite generative capability. Against this backdrop, we report from an action research study into a digital innovation initiative aimed at developing connected cars. The managers in charge of the initiative engaged us as they faced considerable skepticism and push-back from the organization. To help the firm embrace new innovation norms and practices, we therefore infused innovation theory and options thinking into the group of managers as a means to conceive of and implement generative capability. As a result, we present and validate an integrative theoretical model of how incumbent firms may leverage digital options thinking to shape their organizational and technological resources into requisite generative capability. In conclusion, we dis-cuss the contributions of the model and the empirical results to extant literature on generative capability in digital innovation.",0
Embracing Digital Innovation in Incumbent Firms:  How Volvo Cars Managed Competing Concerns,"Past research provides instructive yet incomplete answers as to how incumbent firms can address competing concerns as they embrace digital innovation. In particular, it offers only partial explanations of why different concerns emerge, how they manifest, and how firms can manage them. In response, we present a longitudinal case study of Volvo Cars’connected car initiative. Combining extant literature with insights from the case, we argue that incumbent firms face four competing concerns—capability (existing versus requisite), focus (product versus process), collaboration (internal versus external), and governance (control versus flexibility)—and that these concerns are systemically interrelated. Firms must therefore manage these concerns cohesively by continuously balancing new opportunities and established practices.",0
Leading by Metaphors {\textendash}A Case Study of a Mega {IT} Project in a Danish Bank,"Contrary to the existing literature and studies of large-scale IT projects, empirical data from a mega IT project in mid-sized Danish Bank, Jyske Bank, demonstrates a successful implementation of a highly complex IT platform transition. Linguistic representations and especially extensive use of metaphors by executive management to form and shape the megaproject appeared to have significant impact on guidance of individual and collective action, and thereby presumably one of the important factors for the successful implementation. To learn from this case study, we investigate the metaphorical use in the megaproject and discuss how leading by metaphors are enacted. Our findings are that (1) metaphorical storytelling can act as backbone for communication, (2) metaphors can set direction for technical capabilities, and finally (3) metaphors can be used to emphasize emotional intelligence.",0
The Danish agenda for rethinking project management,"Purpose
The purpose of this paper is to analyze the similarities and differences between the Danish rethinking project management (RPM) initiative named Project Half Double (PHD) and the RPM research stream. The paper furthermore discusses how PHD and RPM can inspire each other in research and practice.

Design/methodology/approach
This is an empirical paper based on collaborative research between industry and researchers. PHD has developed principles and practices driven by industry consisting of ten leading stars and the impact, leadership and flow (ILF) method. The ten leading stars and ILF method are compared to RPM research. The comparative analysis is then used in a broader discussion about how the research-driven RPM initiative can enrich the industry-driven PHD initiative and vice versa depicted in a theoretical understanding of translations between global ideas and local implementations.

Findings
RPM and PHD share a focus on value creation, social processes, learning and complexity while PHD also focusses on lean thinking, agile thinking, front-end loading and leadership, which are largely topics beyond the RPM research stream.

Originality/value
The paper presents how stakeholders from Danish industry interpret the actuality in projects and how they want to move forward with a radically different project paradigm. This is expressed in the ten leading stars and ILF method, which is compared and contrasted to the existing RPM literature providing a foundation for further development of both RPM and PHD.",0
Release Cycle Management: A Contextualist Inquiry into Recurrent Software Development,,0
Participatory design,"This paper provides an overview of approaches to Participatory Design (PD) of computer applications, and briefly outlines how PD overviews are important in tackling PD's current challenges.",0
Information Technology Governance in Practice,"This paper compares implementation frameworks for Information Technology IT governance and functions of a Project Management Office PMO. While there are commonalities, the relational mechanisms called for in IT governance frameworks are omitted from the PMO functions. The authors provide a case study of a PMO at a large municipal government organization where relational mechanisms are incorporated into the risk assessment process through the use of a risk profile spider chart. Drawing conclusions from collaborative practice research, the authors discuss the use and relational aspects of the risk profile spider chart and show how this tool enables boundary spanning between the PMO and other departments by functioning as a boundary object-in-use, increasing the likelihood of buy-in for IT governance decisions. The authors conclude that the tool has potential both as a risk assessment mechanism and a boundary object for building collaboration and thus may be useful for PMOs at other organizations.",0
Information Technology Project Risk Management: Bridging the Gap between Research and Practice,,0
Improvisation during Process-Technology Adoption: A Longitudinal Study of a Software Firm,"Most software firms struggle to take advantage of the potential benefits of software process improvement (SPI) as they adopt this technology into the complex and dynamic realities of their day-to-day operation. Such efforts are therefore typically fluctuating between management's attempt to control SPI technology adoption and events that causes the process to drift in unpredictable directions. To further understand how management's attempt to control the process is complemented by drifting, this article investigates the role of improvisation in adoption of SPI technology in a Danish software firm, SmallSoft, over a 10-year period (1996–2005). We found that micro-level and macro-level improvisations interacted, often in uncoordinated ways, to shape SPI technology adoption at SmallSoft. The improvisations enhanced employee creativity, motivation and empowerment, created momentum in the adoption process despite constrained resources, and, most importantly, helped adapt SPI technology to the everyday practices at SmallSoft. However, we also identified un-called for improvisations and outcomes that were uncoordinated with SmallSoft's goals. Based on these findings we discuss how management in small software firms can exploit improvisations to facilitate adoption of complex technologies like SPI.",0
Between control and drift: negotiating improvement in a small software firm,"Purpose
While the literature on software process improvement (SPI) offers a number of studies of small software firms, little is known about how such initiatives evolve over time. On this backdrop, this paper aims to investigate how adoption of SPI technology was shaped over a ten year period (1996‐2005) in a small Danish software firm.

Design/methodology/approach
The investigation is based on a longitudinal, interpretative case study of improvement efforts over a ten‐year period. To help structure the investigation, we focus on encounters that impacted engineering, management, and improvement practices within the firm. The study contributes to the SPI‐literature and the literature on organizational adoption of technology.

Findings
The paper finds the improvement effort fluctuating and shaped between management's attempt to control SPI technology adoption and events that caused the process to drift in unpredictable directions.

Practical implications
The experiences suggest that managers of small software firms remain flexible and constantly negotiate technology adoption practices between control and drift, creating momentum and direction according to firm goals through attempts to control, while at the same time exploring backtalk, options, and innovations from drifting forces inside and outside the firm.

Originality/value
Based on the research, the paper recommends substituting the “from control to drift” perspective on organizational adoption of complex technologies like SPI with a “negotiating control and drift” perspective.",0
Flipped healthcare for better or worse,"The medical profession is highly specialized, demanding continuous learning, while also undergoing rapid development in the rise of data-driven healthcare. Based on clinical scenarios, this study explores how resident physicians view their roles and practices in relation to informed patients and patient-centric digital technologies. The paper illustrates how the new role of patients alters physicians’ work and use of data to learn and update their professional practice. It suggests new possibilities for developing collegial competence and using patient experiences more systematically. Drawing on the notion of flipped healthcare, we argue that there is a need for new professional competencies in everyday data work, along with a change in attitudes, newly defined roles, and better ways to identify and develop reliable online sources. Finally, the role of patients, not only as consumers but also producers of healthcare, is a rather formidable and complex cultural change to be addressed.",0
Nine drivers of knowledge transfer between universities and industry R{\&}amp$\mathsemicolon$D partners in  South Africa,"This article presents part of the findings of the Research Marketing and Technology Commercialization Survey conducted in South Africa during 2005 and 2006. Part IV (Q4) of this survey was designed to examine nine drivers of knowledge transfer between South African universities in their research and development (R&D) collaborations with industry firms. Respondents from a judgemental sample ranked the knowledge transfer for R&D collaboration between university departments and industry as: (a) the need to extract appropriate knowledge at the right time to make critical decisions; (b) the perception that knowledge is a valuable resource; (c) the emphasis on getting a return on investment in research; (d) the need to protect knowledge for competitive advantage; (e) the need to close the knowledge gap; (f) international trade; (g) the need to protect intellectual property such as patents and trademarks; (h) geographic proximity between the knowledge source and recipient; and (i) war, terrorism and natural disasters.",0
Making sense of academia-industry gap in the evolving cloud service brokerage,"Two key elements to bridge the academia-industry gap are communication and collaboration. The purpose of any such effort is co-creation of knowledge and developing continually informed relationships. Cloud computing has got a significant interest from both academia and industry. It offers a myriad of possibilities for software engineering researchers to study the development of multilateral software. With cloud-based products and services growing exponentially in their popularity and usage, there grew a need for a business model to effectively manage cloud costs, resources, capacity, agility and flexibility [3]. Cloud Service Brokers (CSBs) have emerged as a solution to address this growing need and facilitate smooth cloud adoption, management, migration and maintenance for cloud users and providers [4] [5]. According to Gartner, the CSB sector is expected to grow to a whopping $ 100 Billion in revenue by the end of 2014 [1]. However, there is an evident void in the academic research space in the area of CSBs. For example, owing to the absence of a centralized registry of the CSB utilities, it is extremely difficult for cloud users to select a CSB. In this paper, we provide an analysis of industry and academia role in this area highlighting industry issues in which academia can participate.",0
Systematic Review of Action Research in Management Information Systems Field,,0
The Rise of the Phoenix: Methodological Innovation as a Discourse of Renewal,,0
Learning to be a Platform Owner: How {BMW} Enhances App Development for Cars,"Platform owners face multiple challenges such as on-boarding and orchestrating app developers as well as providing resources to enable the development of complementary apps. Information systems research considers digital platform governance as key to address these challenges. Thereby, the focus lies on the relationship of a platform owner and app developers. However, while there is evidence how app developers acquire skills through these interactions, there is limited knowledge of how platform owners benefit from interacting with app developers to improve their digital platforms. To address this gap, in this article, we study the emergence of a digital platform for automotive onboard apps within the BMW Group. Our results are grounded in 30 expert interviews that we conducted during a period of two years and are enriched by extensive secondary data. We identify transfer of perspective, transfer of knowledge, and transfer of artifacts as basic mechanisms that enable a platform owner to enhance its digital platform. The inherent improvements of the digital platform facilitate the app development. Our work extends the existing theory on platform emergence and provides insights into the learning process of an inexperienced platform owner. Our findings reveal valuable recommendations for organizations that are struggling to establish digital platforms.",0
On establishing the essential components of a technology-dependent framework,"A goal of evidence-based software engineering is to provide a means by which industry practitioners can make rational decisions about technology adoption. When a technology is mature enough for potential widespread use, practitioners find empirical evidence most compelling when the study has taken place in a live, industrial situation in an environment comparable to their own. However, empirical software engineering is in need of guidelines and standards to direct industrial case studies so that the results of this research are valuable and can be combined into an evidentiary base. In this paper, we present a high-level view of a measurement framework that has been used with multiple agile software development industrial case studies. We propose that this technology-dependent framework can be used as a strawman for a guideline of data collection, analysis, and reporting of industrial case studies. Our goal in offering the framework as a strawman is to solicit input from the community on a guideline for the essential components of a technology-dependent framework for industrial case study research.",0
On establishing the essential components of a technology-dependent framework,"A goal of evidence-based software engineering is to provide a means by which industry practitioners can make rational decisions about technology adoption. When a technology is mature enough for potential widespread use, practitioners find empirical evidence most compelling when the study has taken place in a live, industrial situation in an environment comparable to their own. However, empirical software engineering is in need of guidelines and standards to direct industrial case studies so that the results of this research are valuable and can be combined into an evidentiary base. In this paper, we present a high-level view of a measurement framework that has been used with multiple agile software development industrial case studies. We propose that this technology-dependent framework can be used as a strawman for a guideline of data collection, analysis, and reporting of industrial case studies. Our goal in offering the framework as a strawman is to solicit input from the community on a guideline for the essential components of a technology-dependent framework for industrial case study research.",0
Understanding the perpetration of employee computer crime in the organisational context,"While hackers and viruses fuel the IS security concerns for organisations, the problems posed by employee computer crime should not be underestimated. Indeed, a number of IS security researchers have turned their attention to the ‘insider’ threat. Of this group, several focus on the offender, either in terms of a series of attributes required for perpetration, or with reference to forms of safeguards aimed at negating such behaviour. These studies are complemented by those texts which examine the organisational context in which rogue employees commit computer crime. Currently, however, there has been a lack of insight into the relationship between the offender and the context, during the commission process. To address this deficiency, two criminological theories are advanced. This paper illustrates how the theories, entitled the Rational Choice Perspective and Situational Crime Prevention, can be applied to the IS domain, thereby offering a theoretical basis by which to analyse the offender/context relationship during perpetration. By so doing, practitioners may use these insights to inform and enhance the selection of safeguards in a bid to improve prevention programmes. Furthermore, the importation of the Rational Choice Perspective and Situational Crime Prevention into the IS field opens up potentially new areas for future research.",0
Practice-Based Computing: Empirically Grounded Conceptualizations Derived from Design Case Studies,"The introduction of IT has changed the way we live in many ways. Historically, it can even be argued that socially embedded applications of information technology challenge and change practices to an extent rarely seen before with any other type of technological artifacts. If these IT artifacts have strong and recurrent impacts on people’s lives, we need to reconsider design practice artifacts which allow for anticipating use practices and bring together inspirational creativity with evaluative methods.",0
Enabling Effective Operational Risk Management in a Financial Institution: An Action Research Study,"Action research (AR) is significant for its promise to bridge the chasm between rigor and relevance by seeking to solve real-world problems while building scientific knowledge. In this spirit, in our research project, we argue for a return to the essence of AR—that is, focusing on problem, action, and reflection. Adopting the style of AR known as dialogical AR, we address the issue of operational risk management as encountered by a financial institution in Taiwan. In this AR project, the researchers work collaboratively with workers in a bank to manage the knowledge creation process as part of an operational risk management program. Through three AR cycles, our findings demonstrate that ongoing knowledge creation facilitates the transformation of existing organizational culture and helps practitioners to identify different types of operational risks. We also highlight the conditions under which insights from reflective dialogues between practitioners and researchers can encourage managers to open themselves to new and different ways of thinking and acting. Finally, we offer principles for undertaking effective dialogical AR.",0
Inconsistent and Incongruent Frames During {IT}-enabled Change: An Action Research Study into Sales Process Innovation,,0
International Scientific Collaboration in Artificial Intelligence An Analysis based on Web Data,,0
Applying Action Design Research ({ADR}) to Develop Collaboration Virtual Programming Laboratory as Supporting System For Student Centered Learning,,0
Predicting coauthorship using bibliographic network embedding,"Coauthorship prediction applies predictive analytics to bibliographic data to predict authors who are highly likely to be coauthors. In this study, we propose an approach for coauthorship prediction based on bibliographic network embedding through a graph‐based bibliographic data model that can be used to model common bibliographic data, including papers, terms, sources, authors, departments, research interests, universities, and countries. A real‐world dataset released by AMiner that includes more than 2 million papers, 8 million citations, and 1.7 million authors were integrated into a large bibliographic network using the proposed bibliographic data model. Translation‐based methods were applied to the entities and relationships to generate their low‐dimensional embeddings while preserving their connectivity information in the original bibliographic network. We applied machine learning algorithms to embeddings that represent the coauthorship relationships of the two authors and achieved high prediction results. The reference model, which is the combination of a network embedding size of 100, the most basic translation‐based method, and a gradient boosting method achieved an F1 score of 0.9 and even higher scores are obtainable with different embedding sizes and more advanced embedding methods. Thus, the strengths of the proposed approach lie in its customizable components under a unified framework.",0
Making design research relevant for design practice: What is in the way?,"Knowledge from academic design research projects does not always help design professionals to actually strengthen their work. Based on a multi-case study, this paper describes how researchers view the impact of their design research projects on design practice and what they do to achieve this. Even in projects where impact on design practice is a stated ambition, several challenges can stand in the way, such as a lack of funding opportunities and unclarity on the needs of design practice. The paper provides tips for researchers and funding parties who want to inform design practice by research, including tips to operationalize design practice roles.",0
From Theory to Practice{\textemdash}When and How to Implement Service Value Agreement,,0
