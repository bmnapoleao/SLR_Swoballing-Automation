Title,Abstract,Relevance
A Guide To The Project Management Body Of Knowledge (PMBOK Guides),"Its hard to imagine a time when A Guide to the Project Management Body of Knowledge (PMBOK® Guide) wasnt around. Yet, just twenty years ago, PMI volunteers first sat down to distill the project management body of knowledge. Their hard work eventually became the PMBOK® Guide, now considered one of the most essential tools in the profession and is the de facto global standard for the industry. With more than a million copies of the PMBOK® Guide2000 Edition in use, PMI has received numerous positive comments and suggestions for improvements. Methodical updates occur on a four-year cycle to ensure PMIs commitment to continually improve and revise the information contained in this essential reference manual. Users will find a number of changes when they upgrade from the PMBOK® Guide2000 Edition. One of the most important changes is the criteria for included information, which evolved from generally accepted on most projects, most of the time to generally recognized as good practice on most projects, most of the time. Unique to the PMBOK® GuideThird Edition is the increased clarity and emphasis on processes, including highlighting that the five Process Groups are the key to the management of projects. As the updated official standard of the worlds leading project management organization, PMBOK® Guide Third Edition is an essential reference tool for every project management practitioners library.",0
Continuing Professional Development by Practitioner Integrated Learning,"To prevent skilled professionals from being phased out or forced into professions for which they are not talented, organized forms of lifelong learning are needed. Continuing professional development is an approach supporting lifelong learning. This approach is however criticized for being expensive and not providing the necessary knowledge. In response to this, we have executed a study in order to understand how universities can effectively support continuous professional development. By involving industry professionals as participants in university courses using problem based learning, we have designed what we call Practitioner Integrated Learning (PIL). This learning approach has shown positive effects in terms of level of learning, realism, knowledge diffusion, study load and costs. We present a 15-months action research project integrating 16 industry managers and 16 university students in a continuing professional development effort. Based on this study, we argue that PIL is a learning approach that effectively supports continuing professional development.",0
On a partnership between software industry and academia,"This paper discusses a role for industry in software engineering education, specifically presenting a university-industry partnership between the Cardiac Rhythm Management (CRM) organization at the Guidant Corporation and Embry-Riddle Aeronautical University (ERAU). The focus of the partnership is technology transition. The partnership involves fostering students' professional development, providing students experience solving realworld problems, and exploring modern directions of software engineering. The critical component of the partnership is a student-oriented research laboratory. After discussing the background and history of the project, we focus on the partnership's accomplishments. These include facilitating the transition of graduates from student to employee by developing in them extended software engineering skills and in-depth understanding of the application domain.",0
Network Analysis of a Large Scale Open Source Project,"One way to understand the structure of an open source community is by applying network analysis to its source code repositories. In this paper a new method for the analysis of committers' networks is proposed. The method deals with directed and weighted committers' networks. The method is then applied to the Android open source project. The analysis results show how a large, company sponsored, and industry backed open source project, i.e. An open source project with the majority of the community members affiliated with the industry, is structured. In particular, it shows that the involvement of an entire industry eco system within a company sponsored open source project does not imply more equal distribution of the participating community members' influences in terms of committers' networks.",0
Design Science in Information Systems Research,"Two paradigms characterize much of the research in the Information Systems discipline: behavioral science and design science. The behavioral-science paradigm seeks to develop and verify theories that explain or predict human or organizational behavior. The design-science paradigm seeks to extend the boundaries of human and organizational capabilities by creating new and innovative artifacts. Both paradigms are foundational to the IS discipline, positioned as it is at the confluence of people, organizations, and technology. Our objective is to describe the performance of design-science research in Information Systems via a concise conceptual framework and clear guidelines for understanding, executing, and evaluating the research. In the design-science paradigm, knowledge and understanding of a problem domain and its solution are achieved in the building and application of the designed artifact. Three recent exemplars in the research literature are used to demonstrate the application of these guidelines. We conclude with an analysis of the challenges of performing high-quality design-science research in the context of the broader IS community.",0
Some like It Hot: Automating an Electric Kettle Using PalCom,"In this demo we will show how devices from different vendors, using different protocols, can be combined and made to work together without detailed low-level programming by the user. The small example we have chosen uses a radio-controlled power socket from one vendor and a temperature sensor from another vendor. We use these to create a remotely controlled electric kettle, which keeps the water at the point of boiling, ready to make tea at any time. We also show how we very easy can use a mobile phone for remote control and monitoring of the kettle. It is all built with a simple-to-use graphical user interface offered by the PalCom middleware, and will be modified as part of the demo.",0
Factors Influencing Industrial Practices of Software Architecture Evaluation: An Empirical Investigation,"To support software architecture evaluation practices, several efforts have been made to provide a basis for comparing and assessing evaluation methods, document various best practices, and report the factors that may influence industrial practices. However, there has been no study to explore the experiences and perceptions of architects for determining the factors that influence architecture evaluation practices in a wide range of organizations. Hence, there is little empirically founded knowledge available on the factors that influence the industrial practices of software architecture evaluation. The goal of this paper is to report the results of an empirical study aimed at gaining an understanding of different factors involved in evaluating architectures in industry. The results of this study shed light on the factors that influence architecture evaluation practices based on the experiences and perception of architects who regularly evaluate architectures of various sizes of applications. It also discusses some of the strategies that practitioners apply to deal with the influence of the identified factors.",0
"Empirical research in software architecture: Opportunities, challenges, and approaches",,0
A decision support framework for metrics selection in goal-based measurement programs: GQM-DSFMS,"Software organizations face challenges in managing and sustaining their measurement programs over time. The complexity of measurement programs increase with exploding number of goals and metrics to collect. At the same time, organizations usually have limited budget and resources for metrics collection. It has been recognized for quite a while that there is the need for prioritizing goals, which then ought to drive the selection of metrics. On the other hand, the dynamic nature of the organizations requires measurement programs to adapt to the changes in the stakeholders, their goals, information needs and priorities. Therefore, it is crucial for organizations to use structured approaches that provide transparency, traceability and guidance in choosing an optimum set of metrics that would address the highest priority information needs considering limited resources. This paper proposes a decision support framework for metrics selection (DSFMS) which is built upon the widely used Goal Question Metric (GQM) approach. The core of the framework includes an iterative goal-based metrics selection process incorporating decision making mechanisms in metrics selection, a pre-defined Attributes/Metrics Repository, and a Traceability Model among GQM elements. We also discuss alternative prioritization and optimization techniques for organizations to tailor the framework according to their needs. The evaluation of the GQM-DSFMS framework was done through a case study in a CMMI Level 3 software company.",0
Countermeasure graphs for software security risk assessment: An action research,"Software security risk analysis is an important part of improving software quality. In previous research we proposed countermeasure graphs (CGs), an approach to conduct risk analysis, combining the ideas of different risk analysis approaches. The approach was designed for reuse and easy evolvability to support agile software development. CGs have not been evaluated in industry practice in agile software development. In this research we evaluate the ability of CGs to support practitioners in identifying the most critical threats and countermeasures. The research method used is participatory action research where CGs were evaluated in a series of risk analyses on four different telecom products. With Peltier (used prior to the use of CGs at the company) the practitioners identified attacks with low to medium risk level. CGs allowed practitioners to identify more serious risks (in the first iteration 1 serious threat, 5 high risk threats, and 11 medium threats). The need for tool support was identified very early, tool support allowed the practitioners to play through scenarios of which countermeasures to implement, and supported reuse. The results indicate that CGs support practitioners in identifying high risk security threats, work well in an agile software development context, and are cost-effective.",0
Prioritizing Countermeasures through the Countermeasure Method for Software Security (CM-Sec),"Software security is an important quality aspect of a software system. Therefore, it is important to integrate software security touch points throughout the development life-cycle. So far, the focus of touch points in the early phases has been on the identification of threats and attacks. In this paper we propose a novel method focusing on the end product by prioritizing countermeasures. The method provides an extension to attack trees and a process for identification and prioritization of countermeasures. The approach has been applied on an open-source application and showed that countermeasures could be identified. Furthermore, an analysis of the effectiveness and cost-efficiency of the countermeasures could be provided.",0
Improving software security with static automated code analysis in an industry setting,"Software security can be improved by identifying and correcting vulnerabilities. In order to reduce the cost of rework, vulnerabilities should be detected as early and efficiently as possible. Static automated code analysis is an approach for early detection. So far, only few empirical studies have been conducted in an industrial context to evaluate static automated code analysis. A case study was conducted to evaluate static code analysis in industry focusing on defect detection capability, deployment, and usage of static automated code analysis with a focus on software security. We identified that the tool was capable of detecting memory related vulnerabilities, but few vulnerabilities of other types. The deployment of the tool played an important role in its success as an early vulnerability detector, but also the developers perception of the tools merit. Classifying the warnings from the tool was harder for the developers than to correct them. The correction of false positives in some cases created new vulnerabilities in previously safe code. With regard to defect detection ability, we conclude that static code analysis is able to identify vulnerabilities in different categories. In terms of deployment, we conclude that the tool should be integrated with bug reporting systems, and developers need to share the responsibility for classifying and reporting warnings. With regard to tool usage by developers, we propose to use multiple persons (at least two) in classifying a warning. The same goes for making the decision of how to act based on the warning.",0
The Evolution of Information Technology: Implications for Curriculum,"Technological Evolution Since World War II, the performance capabilities of computers and telecommunications have been doubling every few years at constant cost. For example, a decade ago $3,500 could buy a new Apple II microcomputer. Today, $6,800 — the same amount of purchasing power (adjusted for 10 years of inflation) — can buy a new Macintosh II microcomputer. The Macintosh handles 4 times the information at 16 times the speed, preprogrammed and reprogrammable memory are both about 20 times larger, disk storage is about 90 times larger, and the display has 7 times the resolution and 16 times the number of colors. Comparable figures could be cited for other brands of machines.",0
Delay and Secrecy: Does Industry Sponsorship Jeopardize Disclosure of Academic Research?,"The viability of modern open science norms and practices depend on public disclosure of new knowledge, methods, and materials. Aggregate data from the OECD show a broad shift in the institutional financing structure that supports academic research from public to private sponsorship. This article examines the relationship between industry sponsorship and restrictions on disclosure using individual-level data on German academic researchers. Accounting for self-selection into extramural sponsorship, our evidence strongly supports the perspective that industry sponsorship jeopardizes public disclosure of academic research.",0
Alignment Practices Affect Distances in Software Development: A Theory and a Model,"Coordinating a software project across distances is challenging. Even without geographical and time zone distances, other distances within a project can cause communication gaps. For example, organisational and cognitive distances between product owners and development-near roles such as developers and testers can lead to weak alignment of the software and the business requirements. Applying good software development practices, known to enhance alignment, can alleviate these challenges. We present a theoretical model called the Gap Model of how alignment practices affect different types of distances. This model has been inductively generated from empirical data. We also present an initial version of a theory based on this model that explains, at a general level, how practices affect communication within a project by impacting distances between people, activities and artefacts. The presented results provide a basis for further research and can be used by software organisations to improve on software practice.",0
Challenges and practices in aligning requirements with verification and validation: A case study of six companies,"Weak alignment of requirements engineering (RE) with verification and validation (VV) may lead to problems in delivering the required products in time with the right quality. For example, weak communication of requirements changes to testers may result in lack of verification of new requirements and incorrect verification of old invalid requirements, leading to software quality problems, wasted effort and delays. However, despite the serious implications of weak alignment research and practice both tend to focus on one or the other of RE or VV rather than on the alignment of the two.We have performed a multi-unit case study to gain insight into issues around aligning RE and VV by interviewing 30 practitioners from 6 software developing companies, involving 10 researchers in a flexible research process for case studies. The results describe current industry challenges and practices in aligning RE with VV, ranging from quality of the individual RE and VVactivities, through tracing and tools, to change control and sharing a common understanding at strategy, goal and design level. The study identified that human aspects are central, i.e. cooperation and communication, and that requirements engineering practices are a critical basis for alignment. Further, the size of an organisation and its motivation for applying alignment practices, e.g. external enforcement of traceability, are variation factors that play a key role in achieving alignment. Our results provide a strategic roadmap for practitioners improvement work to address alignment challenges. Furthermore, the study provides a foundation for continued research to improve the alignment of RE with VV.",0
A systematic review on regression test selection techniques,"Regression testing is verifying that previously functioning software remains after a change. With the goal of finding a basis for further research in a joint industry-academia research project, we conducted a systematic review of empirical evaluations of regression test selection techniques. We identified 27 papers reporting 36 empirical studies, 21 experiments and 15 case studies. In total 28 techniques for regression test selection are evaluated. We present a qualitative analysis of the findings, an overview of techniques for regression test selection and related empirical evidence. No technique was found clearly superior since the results depend on many varying factors. We identified a need for empirical studies where concepts are evaluated rather than small variations in technical implementations.",0
Supporting Regression Test Scoping with Visual Analytics,"Background: Test managers have to repeatedly select test cases for test activities during evolution of large software systems. Researchers have widely studied automated test scoping, but have not fully investigated decision support with human interaction. We previously proposed the introduction of visual analytics for this purpose. Aim: In this empirical study we investigate how to design such decision support. Method: We explored the use of visual analytics using heat maps of historical test data for test scoping support by letting test managers evaluate prototype visualizations in three focus groups with in total nine industrial test experts. Results: All test managers in the study found the visual analytics useful for supporting test planning. However, our results show that different tasks and contexts require different types of visualizations. Conclusion: Important properties for test planning support are: ability to overview testing from different perspectives, ability to filter and zoom to compare subsets of the testing with respect to various attributes and the ability to manipulate the subset under analysis by selecting and deselecting test cases. Our results may be used to support the introduction of visual test analytics in practice.",0
Designing secure databases,"Security is an important issue that must be considered as a fundamental requirement in information systems development, and particularly in database design. Therefore security, as a further quality property of software, must be tackled at all stages of the development. The most extended secure database model is the multilevel model, which permits the classification of information according to its confidentiality, and considers mandatory access control. Nevertheless, the problem is that no database design methodologies that consider security (and therefore secure database models) across the entire life cycle, particularly at the earliest stages currently exist. Therefore it is not possible to design secure databases appropriately. Our aim is to solve this problem by proposing a methodology for the design of secure databases. In addition to this methodology, we have defined some models that allow us to include security information in the database model, and a constraint language to define security constraints. As a result, we can specify a fine-grained classification of the information, defining with a high degree of accuracy which properties each user has to own in order to be able to access each piece of information. The methodology consists of four stages: requirements gathering; database analysis; multilevel relational logical design; and specific logical design. The first three stages define activities to analyze and design a secure database, thus producing a general secure database model. The last stage is made up of activities that adapt the general secure data model to one of the most popular secure database management systems: Oracle9i Label Security. This methodology has been used in a genuine case by the Data Processing Center of Provincial Government. In order to support the methodology, we have implemented an extension of Rational Rose, including and managing security information and constraints in the first stages of the methodology.",0
Determining factors in the success of R&D cooperative agreements between firms and research organizations,"The purpose of this paper is to analyze the impact of a series of contextual and organizational factors on the success of 800 cooperative agreements between Spanish firms and research organizations, run between 1995 and 2000. Findings show that the most outstanding factors are, in the case of firms, commitment, previous links, definition of objectives and conflict, whereas for research organizations previous links, communication, commitment, trust and the partnersâ reputation are more relevant. These study not only provides a comprehensive theoretical model to analyze the success of these agreements but is useful both for improving management of cooperation and for fostering collaboration both at a national an international level.",0
Model-Based Test Suite Generation for Function Block Diagrams Using the UPPAAL Model Checker,"A method for model-based test generation of safety-critical embedded applications using Programmable Logic Controllers and implemented in a programming language such as Function Block Diagram (FBD) is described. The FBD component model is based on the IEC 1131 standard and it is used primarily for embedded systems, in which timeliness is an important property to be tested. Our method involves the transformation of FBD programs with timed annotations into timed automata models which are used to automatically generate test suites. Specifically we demonstrate how to use model transformation for formalization and model-checking of FBD programs using the UPPAAL tool. Many benefits emerge from this method, including the ability to automatically generate test suites from a formal model in order to ensure compliance to strict quality requirements including unit testing and specific coverage measurements. The approach is experimentally assessed on a train control system in terms of consumed resources.",0
MOS: An integrated model-based and search-based testing tool for Function Block Diagrams,"In this paper we present a new testing tool for safety critical applications described in Function Block Diagram (FBD) language aimed to support both a model and a search-based approach. Many benefits emerge from this tool, including the ability to automatically generate test suites from an FBD program in order to comply to quality requirements such as component testing and specific coverage measurements. Search-based testing methods are used to generate test data based on executable code rather than the FBD program, alleviating any problems that may arise from the ambiguities that occur while creating FBD programs. Test cases generated by both approaches are executed and used as a way of cross validation. In the current work, we describe the architecture of the tool, its workflow process, and a case study in which the tool has been applied in a real industrial setting to test a train control management system.",0
Reducing test effort: A systematic mapping study on existing approaches,"Context
Quality assurance effort, especially testing effort, is often a major cost factor during software development, which sometimes consumes more than 50% of the overall development effort. Consequently, one major goal is often to reduce testing effort.
Objective
The main goal of the systematic mapping study is the identification of existing approaches that are able to reduce testing effort. Therefore, an overview should be presented both for researchers and practitioners in order to identify, on the one hand, future research directions and, on the other hand, potential for improvements in practical environments.
Method
Two researchers performed a systematic mapping study, focusing on four databases with an initial result set of 4020 articles.
Results
In total, we selected and categorized 144 articles. Five different areas were identified that exploit different ways to reduce testing effort: approaches that predict defect-prone parts or defect content, automation, test input reduction approaches, quality assurance techniques applied before testing, and test strategy approaches.
Conclusion
The results reflect an increased interest in this topic in recent years. A lot of different approaches have been developed, refined, and evaluated in different environments. The highest attention was found with respect to automation and prediction approaches. In addition, some input reduction approaches were found. However, in terms of combining early quality assurance activities with testing to reduce test effort, only a small number of approaches were found. Due to the continuous challenge of reducing test effort, future research in this area is expected.",0
Action research—a scientific approach?,"The concept of action-research has been developed during the last decade, mainly at the Research Center for Group Dynamics, University of Michigan, Ann Arbor and at the Commission for Community Interrelations of the American Jewish Congress—centers founded by the late Kurt Lewin whose original and creative mind has made many contributions to social-psychological and sociological research. I owe my acquaintance with this new approach to the Research Center, particularly to Ronald Lippitt and Alvin Zander. Yet most of the following observations are based on my research experience during the last four years. The responsibility for what I am saying is, therefore, completely my own.",0
An Assessment of the Scientific Merits of Action Research.,"December 1978, volume 23 This article describes the deficiencies of positivist science for generating knowledge for use in solving problems that members of organizations face. Action research is introduced as a method for correcting these deficiencies. When action research is tested against the criteria of positivist science, action research is found not to meet its critical tests. The appropriateness of positivist science is questioned as a basis for judging the scientific merits of action research. Action research can base its legitimacy as science in philosophical traditions that are different from those which legitimate positivist science. Criteria and methods of science appropriate to action research are offered.",0
The push to make software engineering respectable,"A recognized engineering profession must have an established body of knowledge and skill that its practitioners understand and use consistently. After 30 years, there is still a wide gap between the best and the typical software engineering practices. To close this gap, we need a deeper partnership among industry, academia, and professional societies. We have spent some time considering the reasons for SE's immaturity. All of us are heavily involved in both industry and academia and have been active in professional societies that aim to promote SE as a profession. Promotion efforts are by no means limited to the US, but because our experience is primarily with US activities, that is our focus in this article. Our main goal is to explore, from a multifaceted perspective, why we are where we are now and how we can move forward.",0
Information Technology and the Future of Cities,"Will improvements in information technology eliminate face-to-face interactions and make cities obsolete? In this paper, we present a model where people make contacts and choose a mode of interaction: meeting face-to-face or communicating electronically. Cities are a means of reducing the fixed travel costs involved in face-to-face interactions. When telecommunications technology improves, there will be two opposing effects on cities and face-to-face interactions. First, some relationships that would have been face-to-face will be conducted electronically. Second, the increase in frequency of contact between individuals caused by improvements in telecommunications technology may result in more face-to-face interactions. If the second effect dominates, telecommunications improvements will complement both face-to-face interactions and cities. Our empirical work suggests that telecommunications may be a complement to, or at least not a strong substitute for, cities and face-to-face interactions.",0
The Anatomy of a Design Theory,"Design work and design knowledge in Information Systems (IS) is important for both research and practice. Yet there has been comparatively little critical attention paid to the problem of specifying design theory so that it can be communicated, justified, and developed cumulatively. In this essay we focus on the structural components or anatomy of design theories in IS as a special class of theory. In doing so, we aim to extend the work of Walls, Widemeyer and El Sawy (1992) on the specification of information systems design theories (ISDT), drawing on other streams of thought on design research and theory to provide a basis for a more systematic and useable formulation of these theories. We identify eight separate components of design theories: (1) purpose and scope, (2) constructs, (3) principles of form and function, (4) artifact mutability, (5) testable propositions, (6) justificatory knowledge (kernel theories), (7) principles of implementation, and (8) an expository instantiation. This specification includes components missing in the Walls et al. adaptation of Dubin (1978) and Simon (1969) and also addresses explicitly problems associated with the role of instantiations and the specification of design theories for methodologies and interventions as well as for products and applications. The essay is significant as the unambiguous establishment of design knowledge as theory gives a sounder base for arguments for the rigor and legitimacy of IS as an applied discipline and for its continuing progress. A craft can proceed with the copying of one example of a design artifact by one artisan after another. A discipline cannot.",0
Considering rigor and relevance when evaluating test driven development: A systematic review,"Context
Test driven development (TDD) has been extensively researched and compared to traditional approaches (test last development, TLD). Existing literature reviews show varying results for TDD.
Objective
This study investigates how the conclusions of existing literature reviews change when taking two study quality dimension into account, namely rigor and relevance.
Method
In this study a systematic literature review has been conducted and the results of the identified primary studies have been analyzed with respect to rigor and relevance scores using the assessment rubric proposed by Ivarsson and Gorschek 2011. Rigor and relevance are rated on a scale, which is explained in this paper. Four categories of studies were defined based on high/low rigor and relevance.
Results
We found that studies in the four categories come to different conclusions. In particular, studies with a high rigor and relevance scores show clear results for improvement in external quality, which seem to come with a loss of productivity. At the same time high rigor and relevance studies only investigate a small set of variables. Other categories contain many studies showing no difference, hence biasing the results negatively for the overall set of primary studies. Given the classification differences to previous literature reviews could be highlighted.
Conclusion
Strong indications are obtained that external quality is positively influenced, which has to be further substantiated by industry experiments and longitudinal case studies. Future studies in the high rigor and relevance category would contribute largely by focusing on a wider set of outcome variables (e.g. internal code quality). We also conclude that considering rigor and relevance in TDD evaluation is important given the differences in results between categories and in comparison to previous reviews.",0
Design science in information systems research,"Two paradigms characterize much of the research in the Information Systems discipline: behavioral science and design science. The behavioral-science paradigm seeks to develop and verify theories that explain or predict human or organizational behavior. The design-science paradigm seeks to extend the boundaries of human and organizational capabilities by creating new and innovative artifacts. Both paradigms are foundational to the IS discipline, positioned as it is at the confluence of people, organizations, and technology. Our objective is to describe the performance of design-science research in Information Systems via a concise conceptual framework and clear guidelines for understanding, executing, and evaluating the research. In the design-science paradigm, knowledge and understanding of a problem domain and its solution are achieved in the building and application of the designed artifact. Three recent exemplars in the research literature are used to demonstrate the application of these guidelines. We conclude with an analysis of the challenges of performing high-quality design-science research in the context of the broader IS community.",0
Heuristics for Thread-Level Speculation in Web Applications,"JavaScript is a sequential programming language, and Thread-Level Speculation has been proposed to dynamically extract parallelism in order to take advantage of parallel hardware. In previous work, we have showed significant speed-ups with a simple on/off speculation heuristic. In this paper, we propose and evaluate three heuristics for dynamically adapt the speculation: a 2-bit heuristic, an exponential heuristic, and a combination of these two. Our results show that the combined heuristic is able to both increase the number of successful speculations and decrease the execution time for 15 popular web applications.",0
The dual imperatives of action research,"Action research (AR) is not without its critics, and those who reject some of the paradigmatic assumptions embodied in AR maintain that AR is little more than consultancy, that it is impossible to establish causal relationships, that it is difficult to generalize from AR studies, that there is a risk of researcher bias, and that generally speaking, it lacks some of the key qualities that are normally associated with rigorous research. The authors are sensitive to such criticisms, for although they are committed action researchers, they have elsewhere voiced their concerns about the quality of AR practice in the field of information systems. The authors argue that part of the issue concerns the way in which we currently conceptualize AR. In this article, the argument for a deeper and more reflective analysis of the meaning and full implications of AR is developed, culminating in a model of AR being developed that explicitly includes both a problem solving interest cycle and a research interest cycle. Important implications of this new model are articulated, with examples to illustrate these points being drawn from a real‐life AR study.",0
Challenges in Flexible Safety-Critical Software Development - An Industrial Qualitative Survey,"Context. Development of safety-critical systems is mostly governed by process-heavy paradigms, while increasing demands on flexibility and agility also reach this domain. Objectives. We wanted to explore in more detail the industrial needs and challenges when facing this trend. Method. We launched a qualitative survey, interviewing engineers from four companies in four different industry domains. Results. The survey identifies human factors (skills, experience, and attitudes) being key in safety-critical systems development, as well as good documentation. Certification cost is related to change frequency, which is limiting flexibility. Component reuse and iterative processes were found to increase adaptability to changing customer needs. Conclusions. We conclude that agile development and flexibility may co-exist with safety-critical software development, although there are specific challenges to address.",0
"An Overview of the Demise of Nortel Networks and Key Lessons Learned : Systemic effects in environment , resilience and black-cloud formation","Nortel’s customers were clear: they did not want to switch suppliers. However, these same customers felt that Nortel had given them no choice but to switch. By 2006 customers said that Nortel was no longer the same company that they had come to trust and rely on, and they doubted that the company would survive beyond the next five or six years. As a result, they were unwilling to commit to Nortel for any longer-term related procurement. In June 2009, Nortel Networks, once Canada’s largest and most successful technology company, announced that it would sell all its business units and effectively end over 100 years of operations. While other companies in this industry, including Ericsson, Nokia, Siemens, Alcatel, Lucent and Cisco, had run into difficulties because of the massive changes sweeping across the competitive environment, each has found a way to survive to this day",0
Collaborations: closing the industry-academia gap,"When it comes to software engineering education, there is a gap between what industry needs and what universities offer. To close this gap, the authors propose a comprehensive collaboration between academic software engineering programs and industry. They offer a model for this collaboration and highlight three real-world ventures.",0
Applying and adjusting a software process improvement model in practice: the use of the IDEAL model in a small software enterprise,"Software process improvement is a demanding and complex undertaking. To support the constitution and implementation of software process improvement schemes the Software Engineering Institute (SEI) proposes a framework, the so-called IDEAL model. This model is based on experiences from large organizations. The aim of the research described was to investigate the suitability of the model for small software enterprises. It has therefore been deployed and adjusted for successful use in a small Danish software company. The course of the project and the application of the model are presented and the case is reflected on the background of current knowledge about managing software process improvement as organizational change.",0
Context in industrial software engineering research,"In order to draw valid conclusions when aggregating evidence it is important to describe the context in which industrial studies were conducted. This paper structures the context for empirical industrial studies and provides a checklist. The aim is to aid researchers in making informed decisions concerning which parts of the context to include in the descriptions. Furthermore, descriptions of industrial studies were surveyed.",0
"Worldviews, Research Methods, and their Relationship to Validity in Empirical Software Engineering Research","Background - Validity threats should be considered and consistently reported to judge the value of an empirical software engineering research study. The relevance of specific threats for a particular research study depends on the worldview or philosophical worldview of the researchers of the study. Problem/Gap - In software engineering, different categorizations exist, which leads to inconsistent reporting and consideration of threats. Contribution - In this paper, we relate different worldviews to software engineering research methods, identify generic categories for validity threats, and provide a categorization of validity threats with respect to their relevance for different world views. Thereafter, we provide a checklist aiding researchers in identifying relevant threats. Method - Different threat categorizations and threats have been identified in literature, and are reflected on in relation to software engineering research. Results - Software engineering is dominated by the pragmatist worldviews, and therefore use multiple methods in research. Maxwell's categorization of validity threats has been chosen as very suitable for reporting validity threats in software engineering research. Conclusion - We recommend to follow a checklist approach, and reporting first the philosophical worldview of the researcher when doing the research, the research methods and all threats relevant, including open, reduced, and mitigated threats.",0
An elicitation instrument for operationalising GQM+Strategies (GQM+S-EI),"Context: A recent approach for measurement program planning, GQM+Strategies, provides an important extension to existing approaches linking measurements and improvement activities to strategic goals and ways to achieve these goals. There is a need for instruments aiding in eliciting information from stakeholders to use GQM+Strategies. The success of GQM+Strategies highly depends on accurately identifying goals, strategies and information needs from stakeholders. Objective: The research aims at providing an instrument (called GQM+SEI), aiding practitioners to accurately elicit information needed by GQM+Strategies (capturing goals, strategies and information needs). Method: The research included two phases. In the first phase, using action research method, the GQM+S-EI was designed in three iterations in Ericsson AB. Thereafter, a case study was conducted to evaluate whether the information elicited with the designed instrument following the defined process was accurate and complete. Results: We identified that the industry requires elicitation instruments that are capable to elicit information from stakeholders, not having to know about the concepts (e.g. goals and strategies). The case study results showed that our proposed instrument is capable of accurately and completely capturing the needed information from the stakeholders. Conclusions: We conclude that GQM+S-EI can be used for accurately and completely eliciting the information needed by goal driven measurement frameworks. The instrument has been successfully transferred to Ericsson AB for measurement program planning.",0
Adapting the Lean Enterprise Self-Assessment Tool for the Software Development Domain,"Lean principles have attracted the attention of software development companies due to their potential to improve competitiveness. However, the application of such principles in the software domain is still in its infancy. This paper presents a proposal for adapting the Lean Enterprise Self-Assessment Tool (LESAT) to guide the transformation of software development companies toward Lean. LESAT, developed by the Lean Advancement Initiative (LAI) at the Massachusetts Institute of Technology (MIT), has been widely used in other domains. In this study, concepts and expressions of LESAT were analyzed and mapped to software development following the ISO/IEC 12207 standard. Seven assessment items concerning life-cycle processes were modified from the original LESAT. The modified LESAT for software was compared with a lean assessment approach called ""Lean amplifier, "" which has been developed and successfully used in practice by Ericsson R&amp;D in Finland. The results indicated that LESAT may complement lean assessment in the software domain at enterprise level, involving the entire value stream. Moreover, they clearly emphasized the role of leadership in the transformation.",0
On theory development in design science research: anatomy of a research project,"The common understanding of design science research in information systems (DSRIS) continues to evolve. Only in the broadest terms has there been consensus: that DSRIS involves, in some way, learning through the act of building. However, what is to be built – the definition of the DSRIS artifact – and how it is to be built – the methodology of DSRIS – has drawn increasing discussion in recent years. The relationship of DSRIS to theory continues to make up a significant part of the discussion: how theory should inform DSRIS and whether or not DSRIS can or should be instrumental in developing and refining theory. In this paper, we present the exegesis of a DSRIS research project in which creating a (prescriptive) design theory through the process of developing and testing an information systems artifact is inextricably bound to the testing and refinement of its kernel theory.",0
Experimental Software Engineering: A Report on the State of the Art,"The goal of this session is to make the software engineering community aware of the opportunities that exist to pursue such an experimental approach. In the remainder of the essay, we describe an emerging model for empirical work and the language for discussing it. We then focus on the current state of experimental software engineering, the road blocks barring effective progress, and what developers and researchers can do to remove them.",0
Concern Visibility in Base Station Development --- An Empirical Investigation,"Contemporary model driven development tools only partially support the abstractions occurring in complex embedded systems development. The paper presents an interpretive case study in which the concerns held by 7 engineers in a large product developing organization were compared to the concerns supported by the modeling tool in use. The paper's main finding is an empirically grounded catalogue of concerns, categorized with respect to visibility in models and other artefacts in use. In the studied case, 26% of the concerns were visible in the models, whereas 38% were visible elsewhere and 36% not visible at all. The catalogue has been presented to several stakeholders in the unit studied, with positive feedback: particularly appreciated were the notion of concern visibility as indicator of degree of implementation of model driven development, and that concerns have traceable connections to experiences of the unit's engineers.",0
Rigor and relevance in MIS research: Beyond the approach of positivism alone,"Benbasat and Zmud offer a diagnosis of ""why one tends today to observe a lack of relevance to practice in IS research"" and a prescription of guidelines that ""the IS academic community might follow to introduce relevance into their research efforts and articles."" I will comment, first, on the ramifications of their self-avowed positivist orientation; second, on their model-inuse of what relevant research is (i.e., the instrumental model); and third, on the need for the IS research community to take a broad approach to the matter of relevance. I will also refer to the respective commentaries offered by Applegate, by Davenport and Markus, and by Lyytinen",0
University-industry collaboration: Grafting the entrepreneurial paradigm onto academic structures,"Purpose – The paper aims to identify the requisite attributes and organisation to be displayed by a research university in order to engage successfully in collaborative research with industry partners. Design/methodology/approach – The conceptual framework contrasts the traditional public funding model against the requirements of the “triple helix” model of government-university-industry research funding. The framework supports the exploration of a case study of a long-standing and successful joint research partnership, the Dundee-Kinases Consortium, which links a world-class life sciences research centre and a group of global pharmaceutical companies. Research limitations/implications – The case study provides a starting point, and additional case examinations will confirm the role of resource competences and organisational capabilities in facilitating performance by way of knowledge generation and transfer between partners. Findings – The design and leadership of the consortium achieves vital performance outcomes, namely: accelerating the production of new knowledge about cell signalling processes relating to serious diseases; and faster transfer of new knowledge into drug development processes of pharmaceutical companies. The development of key enabling capabilities by the university, allied with routines for academic-industry researcher interface, are essential elements of the partnering design. Originality/value – The paper demonstrates that university-industry partnerships build on government-university funding, that university-industry relationships foster new university capabilities, and moreover, that academic publication is not displaced by the requirements of industry partners.",0
A Method for Evaluating Rigor and Industrial Relevance of Technology Evaluations,"One of the main goals of an applied research field such as software engineering is the transfer and widespread use of research results in industry. To impact industry, researchers developing technologies in academia need to provide tangible evidence of the advantages of using them. This can be done trough step-wise validation, enabling researchers to gradually test and evaluate technologies to finally try them in real settings with real users and applications. The evidence obtained, together with detailed information on how the validation was conducted, offers rich decision support material for industry practitioners seeking to adopt new technologies and researchers looking for an empirical basis on which to build new or refined technologies. This paper presents model for evaluating the rigor and industrial relevance of technology evaluations in software engineering. The model is applied and validated in a comprehensive systematic literature review of evaluations of requirements engineering technologies published in software engineering journals. The aim is to show the applicability of the model and to characterize how evaluations are carried out and reported to evaluate the state-of-research. The review shows that the model can be applied to characterize evaluations in requirements engineering. The findings from applying the model also show that the majority of technology evaluations in requirements engineering lack both industrial relevance and rigor. In addition, the research field does not show any improvements in terms of industrial relevance over time.",0
Technology transfer decision support in requirements engineering research: a systematic review of REj,"One of the main goals of an applied research field such as requirements engineering is the transfer of research results to industrial use. To promote industrial adoption of technologies developed in academia, researchers need to provide tangible evidence of the advantages of using them. This can be done through industry validation, enabling researchers to test and validate technologies in a real setting with real users and applications. The evidence obtained, together with detailed information on how the validation was conducted, offers rich decision support material for industrial practitioners seeking to adopt new technologies. This paper presents a comprehensive systematic literature review of all papers published in the Requirements Engineering journal containing any type of technology evaluation. The aim is to gauge the support for technology transfer, i.e., to what degree industrial practitioners can use the reporting of technology evaluations in the journal as decision support for adopting the technologies in industrial practice. Findings show that very few evaluations offer full technology transfer support, i.e., have a realistic scale, application or subjects. The major improvement potential concerning support for technology transfer is found to be the subjects used in the evaluations. Attaining company support, including support for using practitioners as subjects, is vital for technology transfer and for researchers seeking to validate technologies.",0
Implementing requirements engineering processes throughout organizations: success factors and challenges,"This paper aims at identifying critical factors affecting organization-wide implementation of requirements engineering (RE) processes. The paper is based on a broad literature review and three longitudinal case studies that were carried out using an action research method. The results indicate that RE process implementation is a demanding undertaking, and its success greatly depends on such human factors as motivation, commitment and enthusiasm. Therefore, it is essential that the RE process is useful for its individual users. Furthermore, the results indicate that organizations can gain benefits from RE by defining a simple RE process, by focusing on a small set of RE practices, and by supporting the systematic usage of these practices.",0
Using a qualitative research method for building a software maintenance methodology,"This article explains our experience of using Action Research to develop a software maintenance methodology involving two organizations: a group of university researchers and a software services organization. The concept of 'methodology' comprises a wide set of elements whose identification, definition and integration is not a trivial task, due to the magnitude of the project and to the different nature of the organizations. The use of Action Research was a key factor in the progress of the research and has been essential in the adoption of the methodology within the software services organization.",0
What makes good research in software engineering?,"Abstract.Physics, biology, and medicine have well-refined public explanations of their research processes. Even in simplified form, these provide guidance about what counts as “good research” both inside and outside the field. Software engineering has not yet explicitly identified and explained either our research processes or the ways we recognize excellent work. Science and engineering research fields can be characterized in terms of the kinds of questions they find worth investigating, the research methods they adopt, and the criteria by which they evaluate their results. I will present such a characterization for software engineering, showing the diversity of research strategies and the way they shift as ideas mature. Understanding these strategies should help software engineers design research plans and report the results clearly; it should also help explain the character of software engineering research to computer science at large and to other scientists.",0
Predicting weekly defect inflow in large software projects based on project planning and test status,"Defects discovered during the testing phase in software projects need to be removed before the software is shipped to the customers. The removal of defects can constitute a significant amount of effort in a project and project managers are faced with a decision whether to continue development or shift some resources to cope with defect removal. The goal of this research is to improve the practice of project management by providing a method for predicting the number of defects reported into the defect database in the project. In this paper we present a method for predicting the number of defects reported into the defect database in a large software project on a weekly basis. The method is based on using project progress data, in particular the information about the test progress, to predict defect inflow in the next three coming weeks. The results show that the prediction accuracy of our models is up to 72% (mean magnitude of relative error for predictions of 1 week in advance is 28%) when used in ongoing large software projects. The method is intended to support project managers in more accurate adjusting resources in the project, since they are notified in advance about the potentially large effort needed to correct defects.",0
Empirical assessment of using stereotypes to improve comprehension of UML models: A set of experiments,"Stereotypes were introduced into the Unified Modeling Language to provide means of customizing this general purpose modeling language for its usage in specific application domains. The primary role of stereotypes is to brand an existing model element with specific semantics, but stereotypes can also be used to provide means of a secondary classification of modeling elements. This paper elaborates on the influence of stereotypes on the comprehension of models. The paper describes a set of controlled experiments performed in academia and industry which were aimed at evaluating the role of stereotypes in improving comprehension of UML models. The results of the experiments show that stereotypes play a significant role in the comprehension of models and the improvement achieved both by students and industry professionals.",0
A framework for developing measurement systems and its industrial evaluation,"As in every engineering discipline, metrics play an important role in software development, with the difference that almost all software projects need the customization of metrics used. In other engineering disciplines, the notion of a measurement system (i.e. a tool used to collect, calculate, and report quantitative data) is well known and defined, whereas it is not as widely used in software engineering. In this paper we present a framework for developing custom measurement systems and its industrial evaluation in a software development unit within Ericsson. The results include the framework for designing measurement systems and its evaluation in real life projects at the company. The results show that with the help of ISO/IEC standards, measurement systems can be effectively used in software industry and that the presented framework improves the way of working with metrics. This paper contributes with the presentation of how automation of metrics collection and processing can be successfully introduced into a large organization and shows the benefits of it: increased efficiency of metrics collection, increased adoption of metrics in the organization, independence from individuals and standardized nomenclature for metrics in the organization.",0
Exploring the duality between product and organizational architectures: A test of the âmirroringâ hypothesis,"A variety of academic studies argue that a relationship exists between the structure of an organization and the design of the products that this organization produces. Specifically, products tend to âmirrorâ the architectures of the organizations in which they are developed. This dynamic occurs because the organization's governance structures, problem solving routines and communication patterns constrain the space in which it searches for new solutions. Such a relationship is important, given that product architecture has been shown to be an important predictor of product performance, product variety, process flexibility and even the path of industry evolution. We explore this relationship in the software industry. Our research takes advantage of a natural experiment, in that we observe products that fulfill the same function being developed by very different organizational forms. At one extreme are commercial software firms, in which the organizational participants are tightly-coupled, with respect to their goals, structure and behavior. At the other, are open source software communities, in which the participants are much more loosely-coupled by comparison. The mirroring hypothesis predicts that these different organizational forms will produce products with distinctly different architectures. Specifically, loosely-coupled organizations will develop more modular designs than tightly-coupled organizations. We test this hypothesis, using a sample of matched-pair products. We find strong evidence to support the mirroring hypothesis. In all of the pairs we examine, the product developed by the loosely-coupled organization is significantly more modular than the product from the tightly-coupled organization. We measure modularity by capturing the level of coupling between a product's components. The magnitude of the differences is substantialâup to a factor of six, in terms of the potential for a design change in one component to propagate to others. Our results have significant managerial implications, in highlighting the impact of organizational design decisions on the technical structure of the artifacts that these organizations subsequently develop.",0
Design and natural science research on information technology,"Research in IT must address the design tasks faced by practitioners. Real problems must be properly conceptualized and represented, appropriate techniques for their solution must be constructed, and solutions must be implemented and evaluated using appropriate criteria. If significant progress is to be made, IT research must also develop an understanding of how and why IT systems work or do not work. Such an understanding must tie together natural laws governing IT systems with natural laws governing the environments in which they operate. This paper presents a two dimensional framework for research in information technology. The first dimension is based on broad types of design and natural science research activities: build, evaluate, theorize, and justify. The second dimension is based on broad types of outputs produced by design research: representational constructs, models, methods, and instantiations. We argue that both design science and natural science activities are needed to insure that IT research is both relevant and effective.",0
Engaging the scholar: Three types of academic consulting and their impact on universities and industry,"We present a conceptual framework of academic consulting and explore its impacts on universities and the benefits to innovating firms. We distinguish between three types of academic consulting: opportunity-driven, commercialization-driven and research-driven. Exploring the implications of these different types, first, we postulate that consulting has limited impact on biasing academic research towards more âappliedâ themes. Secondly, while we expect research-driven consulting activities to be positively associated with research productivity, opportunity-driven consulting will have a negative impact. Thirdly, we differentiate between different functions of academic consulting for different types of firms.",0
University Industry Relationships and Open Innovation: Towards a Research Agenda,"Organizations increasingly rely on external sources of innovation via inter-organizational network relationships. This paper explores the diffusion and characteristics of collaborative relationships between universities and industry, and develops a research agenda informed by an open innovation perspective. A framework is proposed, distinguishing university industry relationships from other mechanisms such as technology transfer or human mobility. On the basis of the existing body of research, the role of practices such as collaborative research, university industry research centres, contract research and academic consulting is analysed. The evidence suggests that such university industry relationships are widely practised, whereby differences exist across industries and scientific disciplines. While most existing research focuses on the effects of university industry links on innovation-specific variables such as patents or firm innovativeness, the organizational dynamics of these relationships remain under-researched. A detailed research agenda addresses research needs in two main areas: search and match processes between universities and firms, and the organization and management of collaborative relationships. ",0
REARM: A Reuse-Based Economic Model for Software Reference Architectures,"To remain competitive, organizations are challenged to make informed and feasible value-driven design decisions in order to ensure the quality of their software systems. However, there is a lack of support for evaluating the economic impact of these decisions with regard to software reference architectures. This damages the communication among architects and management, which can result in poor decisions. This paper aims at ameliorating this problem by presenting a pragmatic preliminary economic model to perform cost-benefit analysis on the adoption of software reference architectures as a key asset for optimizing architectural decision-making. The model is based on existing value-based metrics and economics-driven models used in other areas. A preliminary validation based on a retrospective study showed the ability of the model to support a cost-benefit analysis presented to the management of an IT consulting company. This validation involved a cost-benefit analysis related to reuse and maintenance; other qualities will be integrated as our research progresses.",0
Benefits and Drawbacks of Reference Architectures,"Reference architectures (RA) have been studied to create a consistent notion of what constitutes them as well as their benefits and drawbacks. However, few empirical studies have been conducted to provide evidence that support the claims made. To increase this evidence, this paper investigates the actual industrial practice of using RAs. The study consists of a survey with 28 stakeholders from everis, a multinational consulting company based in Spain. We report the findings and contextualize them with previous research.",0
Artifacts of Software Reference Architectures: A Case Study,"Context: Software reference architectures (SRA) have emerged as an approach to systematically reuse architectural knowledge and software elements in the development of software systems. Over the last years, research has been conducted to uncover the artifacts that SRAs provide in order to build software systems. However, empirical studies have not focused on providing industrial evidence about such artifacts. Aim: This paper investigates which artifacts constitute an SRA, how SRAs are designed, the potential reuse of SRA's artifacts, and how they are used in practice. Method: The study consists of a case study made in collaboration with a multinational consulting company that designs SRAs for diverse client organizations. A total of nine European client organizations that use an SRA participated in the study. We analyzed available documentation and contacted 28 practitioners. Results: In the nine analyzed projects, we observed that the artifacts that constitute an SRA are mainly software elements, guidelines and documentation. The design and implementation of SRAs are influenced by the reuse of artifacts from previous software system development and experiences, and the reuse of an SRA across different business domains may be possible when they are platform-oriented. Regarding SRAs usage, we observed that conformance checking is seldom performed. Conclusions: This study reports artifacts of SRAs as stated by practitioners in order to help software architects and scientists in the inception, design, and application of SRAs.",0
A Framework for Software Reference Architecture Analysis and Review,"Tight time-to-market needs pushes software companies and IT con- sulting firms to continuously look for techniques to improve their IT services in general, and the design of software architectures in particular. The use of soft- ware reference architectures allows IT consulting firms reusing architectural knowledge and components in a systematic way. In return, IT consulting firms face the need to analyze the return on investment in software reference architec- tures for organizations, and to review these reference architectures in order to ensure their quality and incremental improvement. Little support exists to help IT consulting firms to face these challenges. In this paper we present an empiri- cal framework aimed to support the analysis and review of software reference architectures and their use in IT projects by harvesting relevant evidence from the wide spectrum of involved stakeholders. Such a framework comes from an action research approach held in everis, an IT consulting firm. We report the issues found so far",0
Developing Use Cases and Scenarios in the Requirements Process,"Scenarios are often used for discovering requirements using established techniques, but how such scenarios are initially developed is not so well understood. This experience paper reports the application of one scenario-based approach - RESCUE - to discover requirements for DMAN, an air traffic management system for the UK's National Air Traffic Services. A retrospective analysis of the DMAN use cases, scenarios and requirements artifacts revealed the importance of diverse information sources in the specification of use cases that enabled systematic requirements discovery. Results were used to explore 3 research questions that arose in previous studies. The paper reports lessons from this experience and offers guidelines that practitioners can apply in their requirements processes and academics can use to inform their research.",0
The validity of action research - validity in action research,"Given the widespread practice of different forms of action research in a variety of venues throughout the world, it is inevitable that the question of the validity of action research would emerge. How real, how authentic, how truthful is action research? What level of confidence can be placed in the research? What criteria ought to determine the validity—the truthfulness and accuracy, the appropriateness, the logic and the technical adequacy of the action research process or any action research study? In this chapter, I address these questions and propose a reconceptualization of the term; I also describe different approaches to determining the validity of action research studies.",0
The 4+1 View Model of architecture,"The 4+1 View Model organizes a description of a software architecture using five concurrent views, each of which addresses a specific set of concerns. Architects capture their design decisions in four views and use the fifth view to illustrate and validate them. The logical view describes the design's object model when an object-oriented design method is used. To design an application that is very data driven, you can use an alternative approach to develop some other form of logical view, such as an entity-relationship diagram. The process view describes the design's concurrency and synchronization aspects. The physical view describes the mapping of the software onto the hardware and reflects its distributed aspect. The development view describes the software's static organization in its development environment.&lt;<ETX>&gt;</ETX>",0
Haemo Dialysis Software Architecture Design Experiences,"In this paper we present the experiences and architecture from a research project conducted in cooperation with two industry partners. The goal of the project was to reengineer an existing system for haemo dialysis machines into a domain specific software architecture. Our main experiences are (1) architecture design is an iterative and incremental process, (2) software quality requires a context, (3) quality attribute assessment methods are too detailed for use during architectural design, (4) application domain concepts are not the best abstractions, (5) aesthetics guides the architect in finding potential weaknesses in the architecture, (6) it is extremely hard to decide when an architecture design is ready, and (7) documenting software architectures is an important problem. We also present the architecture and design rational to give a basis for our experiences. We evaluated the resulting architecture by implementing a prototype application.",0
From framework through experience to learning: The essential nature of action research,,0
Guidelines for conducting and reporting case study research in software engineering,"Case study is a suitable research methodology for software engineering research since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes a case study varies, and hence the quality of the resulting studies. This paper aims at providing an introduction to case study methodology and guidelines for researchers conducting case studies and readers studying reports of such studies. The content is based on the authors’ own experience from conducting and reading case studies. The terminology and guidelines are compiled from different methodology handbooks in other research domains, in particular social science and information systems, and adapted to the needs in software engineering. We present recommended practices for software engineering case studies as well as empirically derived and evaluated checklists for researchers and readers of case study research.",0
Action research use in software engineering: An initial survey,"This paper presents a literature survey of action research (AR) studies published in nine major Software Engineering (SE) journals and three conference proceedings in the period 1993 to June 2009. A strict selection based on distinguishing SE from Information Systems research has identified 16 papers. Although they represent a very small fraction of the studies being conducted in SE, such papers concern with different SE contexts allowing to get information about the increasing tendency in the AR use in software engineering. However, as shown by the initial results, SE researchers should invest more on rigor when defining, applying and reporting AR studies inSE.",0
On Popper's definitions of verisimilitude,,0
A Design Science Research Methodology for Information Systems Research,"The paper motivates, presents, demonstrates in use, and evaluates a methodology for conducting design science (DS) research in information systems (IS). DS is of importance in a discipline oriented to the creation of successful artifacts. Several researchers have pioneered DS research in IS, yet over the past 15 years, little DS research has been done within the discipline. The lack of a methodology to serve as a commonly accepted framework for DS research and of a template for its presentation may have contributed to its slow adoption. The design science research methodology (DSRM) presented here incorporates principles, practices, and procedures required to carry out such research and meets three objectives: it is consistent with prior literature, it provides a nominal process model for doing DS research, and it provides a mental model for presenting and evaluating DS research in IS. The DS process includes six steps: problem identification and motivation, definition of the objectives for a solution, design and development, demonstration, evaluation, and communication. We demonstrate and evaluate the methodology by presenting four case studies in terms of the DSRM, including cases that present the design of a database to support health assessment methods, a software reuse measure, an Internet video telephony application, and an IS planning method. The designed methodology effectively satisfies the three objectives and has the potential to help aid the acceptance of DS research in the IS discipline.",0
The economics of product line development,"This paper uses an established reuse metric and return on investment (ROI) model to present a new metric for estimating the financial benefit of software development within product lines. This metric can help organizations develop a business case to support the early development of shared software for use across families of related applications and products. The discussion and metrics apply (1) early in the software life-cycle for estimating product line benefits, and (2) after product release for calculating the benefits that resulted from product line development. ",0
Investigating Information Systems with Action Research,"Action research is an established research method in use in the social and medical sciences since the mid-twentieth century, and has increased in importance for information systems toward the end of the 1990s. Its particular philosophic context is couched in strongly post-positivist assumptions such as idiographic and interpretive research ideals. Action research has developed a history within information systems that can be explicitly linked to early work by Lewin and the Tavistock Institute. Action research varies in form, and responds to particular problem domains. The most typical form is a participatory method based on a five-step model, which is exemplified by published IS research.",0
Research in software engineering: an analysis of the literature,"In this paper, we examine the state of software engineering (SE) research from the point of view of the following research questions:1.What topics do SE researchers address?2.What research approaches do SE researchers use?3.What research methods do SE researchers use?4.On what reference disciplines does SE research depend?5.At what levels of analysis do SE researchers conduct research? To answer those questions, we examined 369 papers in six leading research journals in the SE field, answering those research questions for each paper. From that examination, we conclude that SE research is diverse regarding topic, narrow regarding research approach and method, inwardly-focused regarding reference discipline, and technically focused (as opposed to behaviorally focused) regarding level of analysis. We pass no judgment on the SE field as a result of these findings. Instead, we present them as groundwork for future SE research efforts.",0
An IS Research Relevancy Manifesto,"Many practitioners believe academic IS research is not relevant. I argue that our research, and the underlying rewards system that drives it, needs to respond to these concerns. We need to be more relevant to meet the increasing needs of our students, the organizations that hire them, and the larger society. To analyze the issues, I develop three different scenarios of where the IS field could be 10 years from now. The following visions of the future identify the implications of different levels of adaptation to relevance-related environmental pressures. Scenario 1: Minimal Adaptation. The IS field is shrinking, largely due to competition from newly established schools of information technology. The traditional paper-based journals continue to dominate. Their slow publication cycles, in contrast to the rapid rate of change in the IT industries, mean that most technical topics and many current managerial issues are excluded from the research that generates the greatest institutional rewards. However a market analysis indicates that we can still do relevant research in categories such as: 1) issues contrary to commercial interests; 2) unsolved problems; 3) issues economically unattractive to commercial researchers; 4) issues where 1 With apologies to James Martin for the similarity to the title of one [Martin, 1984] of his many books",0
An assessment of systems and software engineering scholars and institutions,"Who are the most published authors in the field of systems and software engineering (SSE)? Which are the most published institutions? It is the intention of this article to answer those questions. It is the expectation of the Journal of Systems and Software to make this an annual event, publishing each year a cumulative summary of the most prolific authors and institutions in the field. The methodology of the study (including the journals surveyed) and its limitations will be discussed later. It is important to note here, however, that this study is clearly about SSE and not (for example) computer science or information systems. Both the study methodology and, as will be noted below, the findings, are deliberately and specifically different from what would have been learned in studies focused on those other disciplines. Here are the findings.",0
Building lean thinking in a telecom software development organization: strengths and challenges,"The potential shown by Lean in different domains has aroused interest in the software industry. However, it remains unclear how Lean can be effectively applied in a domain such as software development that is fundamentally different from manufacturing. This study explores how Lean principles are implemented in software development companies and the challenges that arise when applying Lean Software Development. For that, a case study was conducted at Ericsson R&D Finland, which successfully adopted Scrum in 2009 and subsequently started a comprehensible transition to Lean in 2010. Focus groups were conducted with company representatives to help devise a questionnaire supporting the creation of a Lean mindset in the company (Team Amplifier). Afterwards, the questionnaire was used in 16 teams based in Finland, Hungary and China to evaluate the status of the transformation. By using Lean thinking, Ericsson R&D Finland has made important improvements to the quality of its products, customer satisfaction and transparency within the organization. Moreover, build times have been reduced over ten times and the number of commits per day has increased roughly five times.The study makes two main contributions to research. First, the main factors that have enabled Ericsson R&D’’s achievements are analysed. Elements such as ‘network of product owners’, ‘continuous integration’, ‘work in progress limits’ and ‘communities of practice’ have been identified as being of fundamental importance. Second, three categories of challenges in using Lean Software Development were identified: ‘achieving flow’, ‘transparency’ and ‘creating a learning culture",0
Combining Lean Thinking and Agile Methods for Software Development: A Case Study of a Finnish Provider of Wireless Embedded Systems Detailed,"Lean Software Development has attracted a great deal of attention during last years. However, it remains unclear how Lean is implemented in a domain that fundamentally differs from the automotive industry in which it originated. This study provides empirical evidence of how Lean can be combined with Agile methods to enhance software development processes. A case study was conducted at Elektrobit Wireless Segment, which has used Agile from 2007 and began to adopt Lean in 2010. Our findings evidence numerous compatibilities between Lean and Agile. In addition to well-established practices in Agile, Lean thinking has brought new elements to software development such as Kanban and work-in-progress limits, a “pull” and “less waste” oriented culture, and a stronger emphasis on transparency and collaborative development. Scaling flexibility, business management involvement and waste reduction were found as challenges, whilst setting up teams, self-organization and empowerment appeared easier to achieve.",0
Variability in quality attributes of service-based software systems: A systematic literature review,"Context
Variability is the ability of a software artifact (e.g., a system, component) to be adapted for a specific context, in a preplanned manner. Variability not only affects functionality, but also quality attributes (e.g., security, performance). Service-based software systems consider variability in functionality implicitly by dynamic service composition. However, variability in quality attributes of service-based systems seems insufficiently addressed in current design practices.
Objective
We aim at (a) assessing methods for handling variability in quality attributes of service-based systems, (b) collecting evidence about current research that suggests implications for practice, and (c) identifying open problems and areas for improvement.
Method
A systematic literature review with an automated search was conducted. The review included studies published between the year 2000 and 2011. We identified 46 relevant studies.
Results
Current methods focus on a few quality attributes, in particular performance and availability. Also, most methods use formal techniques. Furthermore, current studies do not provide enough evidence for practitioners to adopt proposed approaches. So far, variability in quality attributes has mainly been studied in laboratory settings rather than in industrial environments.
Conclusions
The product line domain as the domain that traditionally deals with variability has only little impact on handling variability in quality attributes. The lack of tool support, the lack of practical research and evidence for the applicability of approaches to handle variability are obstacles for practitioners to adopt methods. Therefore, we suggest studies in industry (e.g., surveys) to collect data on how practitioners handle variability of quality attributes in service-based systems. For example, results of our study help formulate hypotheses and questions for such surveys. Based on needs in practice, new approaches can be proposed.",0
A Systematic Review of the Application and Empirical Investigation of Search-Based Test Case Generation,"Metaheuristic search techniques have been extensively used to automate the process of generating test cases, and thus providing solutions for a more cost-effective testing process. This approach to test automation, often coined “Search-based Software Testing” (SBST), has been used for a wide variety of test case generation purposes. Since SBST techniques are heuristic by nature, they must be empirically investigated in terms of how costly and effective they are at reaching their test objectives and whether they scale up to realistic development artifacts. However, approaches to empirically study SBST techniques have shown wide variation in the literature. This paper presents the results of a systematic, comprehensive review that aims at characterizing how empirical studies have been designed to investigate SBST cost-effectiveness and what empirical evidence is available in the literature regarding SBST cost-effectiveness and scalability. We also provide a framework that drives the data collection process of this systematic review and can be the starting point of guidelines on how SBST techniques can be empirically assessed. The intent is to aid future researchers doing empirical studies in SBST by providing an unbiased view of the body of empirical evidence and by guiding them in performing well-designed and executed empirical studies.",0
Testing Telecoms Software with Quviq QuickCheck,"We present a case study in which a novel testing tool, Quviq QuickCheck, is used to test an industrial implementation of the Megaco protocol. We considered positive and negative testing and we used our developed specification to test an old version in order to estimate how useful QuickCheck could potentially be when used early in development.The results of the case study indicate that, by using Quviq QuickCheck, we would have been able to detect faults early in the development.We detected faults that had not been detected by other testing techniques. We found unclarities in the specifications and potential faults when the software is used in a different setting. The results are considered promising enough to Ericsson that they are investing in an even larger case study, this time from the beginning of the development of a new product.",0
Effective University â Industry Interaction:: A Multi-case Evaluation of Collaborative R&D Projects,"There is a growing world-wide trend toward greater collaboration between academia and industry, an activity encouraged by governments as a means of enhancing national competitiveness and wealth creation. Warwick Manufacturing Group (WMG) is well known for its extensive links with industry, and provided an excellent opportunity for a study of management practice within universityâindustry collaborative research projects. This paper evaluates the findings of six collaborative research projects. The objective was to identify factors which, if managed correctly, increase the probability of a collaboration being perceived as successful by both academic and industrial partners. The outcome was a good practice model for successful universityâindustry research collaborations.",0
Requirements Abstraction Model,"Software requirements arrive in different shapes and forms to development organizations. This is particularly the case in market-driven requirements engineering, where the requirements are on products rather than directed towards projects. This results in challenges related to making different requirements comparable. In particular, this situation was identified in a collaborative effort between academia and industry. A model, with four abstraction levels, was developed as a response to the industrial need. The model allows for placement of requirements on different levels and supports abstraction or break down of requirements to make them comparable to each other. The model was successfully validated in several steps at a company. The results from the industrial validation point to the usefulness of the model. The model will allow companies to ensure comparability between requirements, and hence it generates important input to activities such as prioritization and packaging of requirements before launching a development project",0
Focus Groups for Artifact Refinement and Evaluation in Design Research,"Focus groups to investigate new ideas are widely used in many research fields. The use of focus groups in design research poses interesting opportunities and challenges. Traditional focus group methods must be adapted to meet two specific goals of design research. For the refinement of an artifact design, exploratory focus groups (EFGs) study the artifact to propose improvements in the design. The cycle of build and evaluate using EFGs continues until the artifact is released for field test in the application environment. Then, the field test of the design artifact may employ confirmatory focus groups (CFGs) to establish the utility of the artifact in field use. Rigorous investigation of the artifact requires multiple CFGs to be run with opportunities for quantitative and qualitative data collection and analyses across the multiple CFGs. In this paper, we discuss the adaptation of focus groups to design research projects. We demonstrate the use of both EFGs and CFGs in a design research project in the health care field.",0
"The role of experimentation in software engineering: past, current, and future",Software engineering needs to follow the model of other physical sciences and develop an experimental paradigm for the field. This paper proposes the approach towards developing an experimental component of such a paradigm. The approach is based upon a quality improvement paradigm that addresses the role of experimentation and process improvement in the content of industrial development. The paper outlines a classification scheme for characterizing such experiments.,0
Technology transfer and the research university: a search for the boundaries of university-industry collaboration,"This article examines the emerging âtechnology transferâ role US academics are expected to play in economic development, what specific roles they believe they can play in industrial innovations, and how they might go about collaborating with private industry. Based on a national survey response of approximately 1000 faculty members at research-intensive universities it concludes that US academics in the 1990s believe that they are more favorably disposed than in the 1980s toward closer university-industry collaboration. A majority of the respondents supports the idea that their universities participate actively in local and regional economic development, facilitate commercialization of academic research, and encourage faculty consulting for private firms. A majority of these respondents, however, refuses to support the idea of their universities getting involved in close business partnership with private industry by way of, for example, start-up assistance or equity investment. Of various organizational and motivational underpinnings analyzed from the data, two factors stand out as central to the current debate on university transfer: one is the perception of declining federal R&D support, which threatens the vitality of their research enterprise, and the other is the impact of close university-industry cooperation, which is likely to interfere with academic freedom â the freedom to pursue long-term, disinterested, fundamental research. A search for the boundaries of university-industry collaboration is, therefore, seen as a balancing act between these two competing concerns.",0
The Sustainability of University-Industry Research Collaboration: An Empirical Assessment,"The concept of university-industry collaboration is an important social experiment in the nation's innovation system. This study examines the sustainability of this collaborative experience by focusing on the actual “give-and-take” outcomes between university faculty members and industrial firms. Based on two separate but similar surveys conducted in 1997, one for faculty members and another for industry technology managers, the study reports that participants in research collaboration appear to realize significant benefits, some expected and others unexpected. The most significant benefit realized by firms is an increased access to new university research and discoveries, and the most significant benefits by faculty members is complementing their own academic research by securing funds for graduate students and lab equipment, and by seeking insights into their own research. Reflecting on their collaborative experience, an overwhelming majority of these participants say that in the future they would expand or at least sustain the present level of collaboration.",0
A Model for Technology Transfer in Practice,Successful technology transfer requires close cooperation and collaboration between researchers and practitioners. Researchers need to observe the challenges facing industry firsthand and tailor their work accordingly. Practitioners can help shape technology development on the basis of tangible issues identified on site. This article presents a seven-step technology transfer model that reflects collaborations between university researchers and practitioners at two Swedish companies. The authors discuss key lessons learned for each of these seven steps.,1
Action Research as a Model for Industry-Academia Collaboration in the Software Engineering Context,"Background: Action research is a well-established research methodology. It is following a post-positivist research philosophy grounded in critical thinking. The methodology is driven by practical problems, emphasis participatory research, and develops practically useful solutions in an iterative manner.Objective: Two objectives are to be achieved: (1) Understanding the state of the art with respect to action research usage in the software engineering literature, and (2) reflecting and providing recommendations of how to foster industry-academia collaboration through action research. Method: Based on our experience with two action research studies in close collaboration with Ericsson lessons learned and guidelines are presented.Results: In both cases presented action research led to multiple refinements in the interventions implemented. Furthermore, the close collaboration and co-production with the industry was essential to identify and describe the required refinements to provide an in-depth understanding. In comparison with previous studies, we required multiple iterations while previous software engineering studies reported mostly one iteration, or were not explicit regarding the number of iterations studied.Conclusion: We conclude that action research is a powerful tool for industry-academia collaboration. The success of the method highly depends on the researchers and practitioners working in a team. Future studies need to improve the reporting with respect to describing the type of action research used, the iterations, the model of collaboration, and the rationales for changes in each iteration.",1
Agile Collaborative Research: Action Principles for Industry-Academia Collaboration,"Both the software industry and academia promote collaboration to solve challenges together that neither can solve alone. Collaboration brings opportunities to understand and improve in ways not possible when working apart, but it succeeds only if both parties are contributing. A collaboration model developed from eight years' experience setting up and managing a research center explicitly focused on industry needs is based on five success factors enabling research results (need orientation, industry goal alignment, deployment impact, industry benefit, and innovativeness), five success factors enabling research activities (management engagement, network access, collaborator match, communication ability, and continuity), and 10 action principles for industry-academia collaboration management.",1
Academia Industry Collaboration: Getting Closer is the Key!,"Our greatest developers in industry do not typically view top researchers in academia as people who they can learn particularly much from, and our top researchers in academia do not typically view top developers as people who can contribute much to their research (except supply them with raw data). While researchers have spent years on post-university studies to learn the profession of data collection, data analysis, and data sensemaking, developers are trained to produce and deliver in time based on current best thinking. Taking different paths after the university studies soon ends up in different governing variables for developers and researchers of what brings value. This is a well-known phenomenon, and numerous articles and books are describing why this is the case (Barnes et al., Eur Manag J 20(3):272-285, 2002; Mathiassen, Inf Technol People 14(4):321-345, 2002; Mora-Valentin et al., Res Policy 33(1):17-40, 2004; Gorschek et al., IEEE Softw 23(6):88-95, 2006; Rombach and Achatz, Research collaboration between academia and industry. In: Proc. Future of Software Eng. (FOSE 07), IEEE CS Press, pp. 29-36, 2007; Van den Ven, Engaged Scholarship: A Guide for Organizational and Social Research. Oxford Univ. Press, 2007). In the Software Center we have found practical ways on how to make developers and researchers appreciate the same values and by that join forces to solve complex software engineering issues. A key instrument is to get close on all levels from steering groups to reference groups and research teams. In the following chapter, we describe how we in the Software Center work in practice to stimulate a close collaboration and what is required to make this work over time.",1
Software engineering technology innovation Turning research results into industrial success,"This paper deals with the innovation of software engineering technologies. These technologies are methods and tools for conducting software development and maintenance. We consider innovation as a process consisting of two phases, being technology creation and technology transfer. In this paper, we focus mainly on the transfer phase. Technology transfer is of mutual interest to both academia and industry. Transfer is important for academia, because it shows the industrial relevance of their research results to, for example, their sponsoring authorities. Showing the industrial applicability of research results is sometimes referred to as valorization of research. Nowadays, valorization is often required by research funding bodies. The transfer is important for industries, because innovating their development processes and their products is supportive in gaining a competitive edge or remaining competitive in their business. We describe the technology transfer phase by means of three activities: technology evaluation, technology engineering, and technology embedding. The technology evaluation activity is perceived as the main gate between the technology creation phase and the technology transfer phase. With two case studies, originating from the Dutch high-tech systems industry, we will illustrate the activities in the transfer phase. In addition to the process we will also define the main roles in a software engineering technology innovation, namely: the technology provider (academic research, industrial research and technology vendor) and the technology receiver (industrial development). With those roles we also address the issues concerning the ownership of technologies.",1
Industrial Impact and Lessons Learned,"The Darwin project carried out research on evolvability in an industrial setting. This chapter discusses the results transferred to the industrial party of the project: Philips Healthcare MRI. Our discussion about the industrial impact of the project pays attention to the highlights in transfer in the four areas of the Darwin research on evolvability, namely: mining, mechanisms, reference architecture and economic decision making. Several of the research results are currently being used by Philips Healthcare MRI. In this chapter, we reflect on the project and summarize the results. First, the industrial impact of the Darwin results is discussed. Second, twelve factors are presented to identify the transfer of the Darwin results to industry. Third an overview of activities, as well as the different kinds of project meetings, to conduct an Industry-as-Laboratory project is described. All this results in a set of lessons learned for the Industry-as-Laboratory research paradigm",1
Observations from the Industry-as-Laboratory Research Project Darwin 1,"In 1993, Potts observed that research done using the research-then-transfer paradigm failed to influence industrial practice. Potts advocated that by applying the industry-as-laboratory paradigm, research can make a significant practical difference. Darwin is an industry-as-laboratory research project that is almost finished. In this article, we describe observations and evidence from the Darwin project related to Potts’ hypothesis. Furthermore, we describe observed challenges in our industry-as-laboratory research project, together with how we addressed them.",1
Conducting empirical studies in industry: Balancing rigor and relevance,"Empirical Software Engineering research has achieved considerable results in building our knowledge about selecting and applying appropriate empirical methods for technology evaluation. Empirical studies in general and empirical studies in industrial settings in particular have played an important role in successful transition of many Software Engineering technologies to industry, for example, defect detection techniques and automated test cases. However, conducting empirical research in industrial settings remains a challenging undertaking for a variety of reasons. There is no substantial literature reporting on the challenges and complexities involved in conducting empirical studies in an industry in general and in settings whose business models are built around global sourcing. This paper reports some of our experiences and lessons learned from conducting empirical research in industry. Some of the observed challenges include short time horizon for research, high expectations, limited research skills, and the ‘acceptable’ research rigor. The paper discusses some of these issues with relevant examples and provides some strategies for overcoming these issues. We also stress that researchers and practitioners should share their experiences of conducting empirical research in order to help build a body of knowledge to guide the future efforts.",1
Tool-driven technology transfer to support software architecture decisions,"Software architecture design decisions are key drivers for the success of software systems. Despite awareness for their criticality, software architects often rationalize and document their decisions poorly. On this behalf, ABB Corporate Research initiated a technology transfer project to integrate an architecture decision framework from the University of Groningen into ABB software development processes. The project involved close communication between university researchers, industry researchers, and ABB software architects and resulted in the implementation of a plug-in for the UML tool Enterprise Architect. This paper summarizes success factors for the technology transfer, such as strong buy-in from the stakeholders, short feedback cycles, and seamless integration into existing tool-chains.",1
Conducting a long-term case study in a software firm: An experience report,"Academia and industry have been collaborating for over a century in different formats, including research projects' funds, commercialization of academic knowledge, academic consultancy in industrial projects, etc. Yet, academic researchers face various difficulties and challenges when performing research in industry. In this paper we describe several challenges we faced during a long-term case study research we performed in collaboration with a global IT firm. We present each challenge including its illustration in the context of our case study, describe the actions taken in the attempt to meet it, and discuss lessons learned.",1
Sustainable Technology Transfer,"In this position paper we address the issue of transferring a technology from research into an industrial organization by presenting a refined process for technology transfer. Based on over two decades of industrial experience, we identified the need for a dedicated technology engineering phase for that process. Although little attention has been paid to this technology engineering phase in the academic world, we believe it to be essential for sustainable technology transfer.",1
3-Step Knowledge Transition: A Case Study on Architecture Evaluation,"Software Engineering is developing very fast. To keep up with the changes, software companies need effective methods of knowledge transfer. In the paper a 3-step approach to knowledge transfer, called Technical Drama, is presented. The paper is focused on transferring knowledge concerning architecture evaluation, but the approach could also be applied to transferring knowledge concerning inspections, testing etc. It is claimed in the paper that the Technical Drama can be useful in the industrial context (two case studies are described) as well as at university (then a kind of software studio is required).",1
Is Action Research the Path to a Solid Research Culture in IS/SE for Costa Rica?,"In Latin America there is a visible evidence of lack of research initiatives and a strong disassociation between Academia and Industry in the areas of Information Systems and Software Engineering. Despite the potential of Latin America, such situations hinder the opportunity to build up the required knowledge in order to participate competitively in the international market, holding back the possibility of a technology-based economy in these countries. We propose action research as a flexible and plausible research schema for bridging the gaps between Academia and Industry and at the same time promoting a research culture in Latin America (more specifically in the Costa Rican context), considering the current needs of the Industry and the current directions that have been taken by the Academia for performing research in Information Systems and Software Engineering.",1
Empirical software engineering research with industry: Top 10 challenges,"Software engineering research can be done in many ways, in particular it can be done in different ways when it comes to working with industry. This paper presents a list of top 10 challenges to work with industry based on our experience from working with industry in a very close collaboration with continuous exchange of knowledge and information. The top 10 list is based on a large number of research projects and empirical studies conducted with industrial research partners since 1983. It is concluded that close collaboration is a long-term undertaking and a large investment. The importance of addressing the top 10 challenges is stressed, since they form the basis for a long-term sustainable and successful collaboration between industry and academia.",1
Enablers and Impediments for Collaborative Research in Software Testing: An Empirical Exploration,"When it comes to industrial organizations, current collaboration efforts in software engineering research are very often kept in-house, depriving these organizations of the skills necessary to build independent collaborative research. The current trend, towards empirical software engineering research, requires certain standards to be established which would guide these collaborative efforts in creating a strong partnership that promote independent, evidence-based, software engineering research. This paper examines key enabling factors for an efficient and effective industry-academia collaboration in the software testing domain. A major finding of the research was that while technology is a strong enabler to better collaboration, it must be complemented with industrial openness to disclose research results and the use of a dedicated tooling platform. We use as an example an automated test generation approach that has been developed in the last two years collaboratively with Bombardier Transportation AB in Sweden.",1
Finding Relevant Research Solutions for Practical Problems: The Serp Taxonomy Architecture,"Background: Experience and research indicates that there exist a communication gap between research and industry in software engineering.Objective: We propose the Software Engineering Research and Practice (SERP) taxonomy architecture to support communication between practitioners and researchers. The taxonomy architecture provides a basis for classifying research from a problem perspective which in turn supports the breaking down of complex practical challenges to researchable units. Thus such taxonomy may support the mapping of challenges in industry to research solutions in the software engineering context.Method: In this paper we present SERP and exemplifies its usage based on two literature studies in the field of software engineering. Further, we discuss how a taxonomy based on this architecture could have helped us in two past research projects that were conducted in close collaboration with industry. Finally we validate SERP by applying it to the area of software testing, developing SERP-test, and interviewing two industry practitioners and two researchers.Results: The taxonomy architecture has been applied to two problems in software testing, and has been assessed through interviews with practitioners and researchers. The interviews provided suggestions of how to improve the taxonomy architecture, which have been incorporated. With two examples, we demonstrated how the taxonomy architecture could be used to find solutions for industrial problems, and to find the problems addressed by a particular solution.Conclusion: SERP may be useful in multiple ways: (1) Given that SERP taxonomies are populated with industrial problems and scientific solutions, we could rapidly identify candidate research solutions for industrial practice. (2) Researchers could benefit from the taxonomy in the reporting of their research to ease the mapping to industrial challenges.",1
Foundations for Long-Term Collaborative Research,Collaborative research between academia and industry is considered by many the perfect combination of expertise. The strong academic theoretical background is perfectly complemented by the applied knowledge of the industry. Yet we see many collaborative projects that fail to deliver the intended results. We believe that long-term collaboration should be based on foundations that ensure its success. In this paper we aim at defining those foundations by reflecting on the successful collaborative research projects we achieved.,1
Get the Cogs in Synch: Time Horizon Aspects of Industry--Academia Collaboration,"In industry--academia collaboration projects, there are many issues related to different time horizons in industry and academia. If not adressed upfront, they may hinder collaboration in such projects. We analyze our experiences from a 10 year industry--academia collaboration program, the EASE Industrial Excellence Center in Sweden, and identify issues and feasible practices to overcome the hurdles of different time horizons. Specifically, we identify issues related to contracts, goals, results, organization (in)stability, and work practices. We identify several areas where the time horizon is different, and conclude that mutual awareness of these differences and management commitment to the collaboration are the key means to overcome the differences. The launch of a mediating institute may also be part of the solution.",1
Fraunhofer: the German model for applied research and technology transfer,"The Fraunhofer Gesellschaft e.V. in Germany is Europe's largest and most successful organization for applied research and technology transfer. Its 48 institutes cover all areas of technology and engineering, ranging from materials and production technology to information and communication technology and solar energy. The Fraunhofer Institute for Experimental Software Engineering (IESE) in Kaiserslautern, Germany, focuses on software engineering methods, software product and process management, and learning organization concepts for software. It applies an experiment- or feedback-based transfer model, which has led to many successful and sustained improvements in the industrial practice of software development. In this paper, the underlying transfer model, key business areas and core competencies of Fraunhofer IESE, as well as examples of industrial transfer projects are illustrated. The presentation concludes with arguments as to why this transfer approach is well-suited for software development and why it is a prerequisite for the professionalization of software development.",1
Guidelines on Conducting Software Process Improvement Studies in Industry,"Initiating and conducting empirical case studies in industry are non-trivial tasks. There are many pitfalls, and many researchers have failed in their research. For example, there is the risk that the results are not particularly useful for the IT organization. As a result, the IT organization will be reluctant to cooperate with the researchers again. The purpose of this paper is to share the authors' experience and lessons learnt in conducting empirical case studies within software process improvement in cooperation with industry. In particular, we focus on the potential conflicts between the organizational goals and the research goals. Our experiences are summarized in terms of guidelines that we believe are useful for researchers in this area.",1
It Takes Two to Tango -- An Experience Report on Industry -- Academia Collaboration,"Industry - academia collaboration is critical for empirical research to exist. However, there are many obstacles in the collaboration process. This paper reports on the experiences gained by the author, in a 2-year collaboration project on software testing which involved on-site work by the researcher in the industry premises. Based on notes, minutes of meetings, and progress reports, the project history is outlined. The project is analyzed, using collaboration models as a frame of reference. We conclude that there must be a balance between company 'pull' and academia 'push' in the collaboration Management support is inevitably a key factor to success, while other factors like cross-cultural skills and interfaces towards key resources also contribute.",1
Practical Experiences in Designing and Conducting Empirical Studies in Industry-Academia Collaboration," More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to achieve high degrees of maturity in deployment impact, industry benefit and innovativeness. Evaluating the collaboration has been positive, since we identified the next steps to be taken to achieve a high degree of technology transfer and innovation dissemination. We think it is a needed step in industry-academia collaborations in order to improve their success. ",1
"Requirements engineering and technology transfer: obstacles, incentives and improvement agenda","For many years, research results in requirements engineering (RE) have been developed without much interaction with, or impact on, industrial practice. Why is it so difficult to introduce RE research results into mainstream RE practice? This paper attempts to provide answers to this question by describing obstacles that researchers and practitioners have encountered when they attempted technology transfer. In addition, major incentives for using RE methods are discussed, along with ideas for improving current RE practice. The paper summarises, clarifies and extends the results of two panel discussions, one at the Twelfth Conference on Advanced information Systems Engineering (CAiSE’00) and the other at the Fourth IEEE Conference on Requirements Engineering (ICRE’00).",1
Technology transfer: why some succeed and some don't,"In this paper we present several technology transfer cases both successes and failures. These cases describe transfers from research department within a large corporation to a product company, university to a large product company and university to a small product company. Based on the analysis of these cases we outline several strategies that can be used, in isolation or combined, in order to increase the probability for success.",1
Research Collaborations between Academia and Industry,"The rapid and complex research and innovation processes require high-tech companies to optimize their technology transfer processes. It is clearly not sufficient to solely rely on internal R&amp;D; strategic cooperations with external research centers of excellence are needed in order to compete in the global innovation market. Candidates for such strategic cooperations are universities, research institutions, and technology focused consulting companies. Key challenge is the effective integration of external competences into the company-internal innovation processes. In this paper we present a survey of the state-of-the-art in technology transfer, high-light promising success cases for the future, and derive success criteria for successful technology transfer in a global world. The cooperation between Siemens and Fraunhofer IESE is presented as a concrete example.",1
Collaborative Practice Research,"Reports from a systems development research tradition in which emphasis is put on relating research activities to practice and on establishing fruitful collaboration between groups of researchers and practitioners. Describes and evaluates a specific research project in which a large group of researchers and practitioners worked together to understand, support, and improve systems development practices in four organisations over a period of three years. Uses the case to reflect on the research goals, approaches, and results involved in this tradition for researching systems development practice. Proposes collaborative practice research as a way to organise and conduct research into systems development practice based on close collaboration between researchers and practitioners. Exemplifies the use of pluralist research methodology by combining action research with experiments and conventional practice studies. Argues that collaborative practice research offers one practical way to strike a useful balance between relevance and rigour. Concludes with a discussion of the implications for the relation between research and practice within the systems development discipline and with lessons on how to design research efforts as collaborations between researchers and practitioners.",1
Some researcher considerations when conducting empirical studies in industry,"Research collaborations must be set up for a win-win relationship, avoiding many hurdles along the way. In this short paper the goal is to identify some considerations when conducting empirical studies in industry. These considerations deal with problem solution approaches, communication focus, unpleasant results, mismatching interpretations and scope, business aspects and some evaluation criteria for a successful collaboration.",1
Strategies for industrial relevance in software engineering education,"This paper presents a collection of experiences related to success factors in graduate and postgraduate education. The experiences are mainly concerned with how to make the education relevant from an industrial viewpoint. This is emphasized as a key issue in software engineering education and research, as the main objective is to give the students a good basis for large-scale software development in an industrial environment. The presentation is divided into experiences at the graduate and postgraduate levels, respectively. For each level a number of strategies to achieve industrial relevance are presented. On the graduate level a course in large-scale software development is described to exemplify how industrial relevance can be achieved on the graduate level. The strategies on the postgraduate level have been successful, but it is concluded that more can be done regarding industrial collaboration in the planning and conduction of experiments and case studies. Another interesting strategy for the future is a special postgraduate program for people employed in industry.",1
Success factors for empirical studies in industry-academia collaboration: A reflection,"We conducted several empirical studies over the last couple of years as part of a collaboration with industrial partners in the area of software product lines. Our studies differed regarding their motivation and goals, their scope, the research methods applied, and the involved subjects. In this experience paper we briefly summarize the studies and their key characteristics. We reflect on our experiences based on the success factors for industry-academia collaborations by Wohlin et al. We discuss the role of empirical studies in long-term industry-academia collaborations and present lessons learned.",1
Lessons Learned from 25 Years of Process Improvement: The Rise and Fall of the NASA Software Engineering Laboratory,"For 25 years the NASA/GSFC Software Engineering Laboratory (SEL) has been a major resource in software process improvement activities. But due to a changing climate at NASA, agency reorganization, and budget cuts, the SEL has lost much of its impact. In this paper we describe the history of the SEL and give some lessons learned on what we did right, what we did wrong, and what others can learn from our experiences. We briefly describe the research that was conducted by the SEL, describe how we evolved our understanding of software process improvement, and provide a set of lessons learned and hypotheses that should enable future groups to learn from and improve on our quarter century of experiences.",1
The 4+1 View Model of Industry--Academia Collaboration,"Industry--academia projects exist in complex contexts of various stakeholders, time perspectives, and goals. In order to analyze projects and communicate about them, we have defined an ""architectural"" model for industry--academia collaboration, inspired by Kruchten's software architecture model. The model has four views of i) time, ii) space, iii) activity and iv) domain, corresponding to the questions: when, where, how and what. The +1 view is the scenario, binding the other four together. We illustrate the model by applying it to the Industrial Excellence Center EASE and the Sigrun Software Innovation and Engineering Institute. The model helps analyzing industry--academia collaboration projects, to find gaps and reduce redundant work.",1
The Success Factors Powering Industry-Academia Collaboration,Collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. This article presents an exploratory study of the factors for successful collaboration between industry and academia in software research.,1
Topic Selection in Industry Experiments," This paper shares our experience with initial negotiation and topic elicitation process for conducting industry experiments in six software development organizations in Finland. The process involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings. Fitness criteria developed by researchers were applied to the list of generated topics to decide on a common topic. The challenges we faced include diversity of proposed topics, communication gaps, skepticism about research methods, initial disconnect between research and industry needs, and lack of prior work relationship. Lessons learned include having enough time to establish trust with partners, importance of leveraging the benefits of training and skill development that are inherent in the experimental approach, uniquely positioning the experimental approach within the landscape of other validation approaches more familiar to industrial partners, and introducing the fitness criteria early in the process. ",1
Lessons Learned on Applying Design Science for Bridging the Collaboration Gap between Industry and Academia in Empirical Software Engineering," Collaboration between industry practitioners and researchers has been reported as a challenge to conduct empirical studies in software engineering. Gaining practitioners interest in research activities is challenging in the software development industry characterized by tough competition and short time-to-market. Often, practitioners do not see the direct value in collaborating with researchers. Meanwhile, researchers are frequently frustrated because they have no access to the real-world data that would enable them to develop scientific knowledge. Design science has become a popular research framework in Information Systems. This paper describes our lessons learned on how design science can help to attract and motivate industry practitioners to take part in empirical research. We present our practical experiences with using design science in the context of empirical software engineering, and how the design science framework helped us to bridge the collaborative gap with our industry partners. In illustrating our experiences, we present two case studies conducted in collaboration with Ericsson and Elektrobit in which the design science framework was followed. Based on our experience, design science is a suitable research framework for empirical software engineering since much of the research in the field is constructive. The similarities between the design science practices and the day-to-day work of practitioners in industry make it easy for them to understand the research approach. Thus, it supports their willingness to participate in research activities. ",1
Embedding Research in the Industrial Field: A Case of a Transition to a Software Product Line,"Java Cards [4, 5] are small resource-constrained embedded systems that have to fulfill rigorous security requirements. Multiple application scenarios demand diverse product performance profiles which are targeted towards markets such as banking applications and mobile applications. In order to tailor the products to the customer's needs we implemented a Software Product Line (SPL). This paper reports on the industrial case of an adoption to a SPL during the development of a highly-secure software system. In order to provide a scientific method which allows the description of research in the field, we apply Action Research (AR). The rationale of AR is to foster the transition of knowledge from a mature research field to practical problems encountered in the daily routine. Thus, AR is capable of providing insights which might be overlooked in a traditional research approach. In this paper we follow the iterative AR process, and report on the successful transfer of knowledge from a research project to a real industrial application.",1
Industry Academia Collaboration: An Experience Report at a Small University,This paper is a report on how sustainable and fruitful cooperation was achieved between a small university department and an industry partner. It outlines the range and type of activities that need tube undertaken over a longer than normal duration. It also describes the expectations from the industry partner for the cooperation to be successful.,1
Research-based innovation: A tale of three projects in model-driven engineering,"Inrecentyears,wehavebeenexploringwaystofosteracloser collaboration between software engineering research and industry both to align our research with practical needs, and to increase awareness about the importance of research for innovation. This paper outlines our expe- rience with three research projects conducted in collaboration with the industry. We examine the way we collaborated with our industry part- ners and describe the decisions that contributed to the effectiveness of the collaborations. We report on the lessons learned from our experience and illustrate the lessons using examples from the three projects. The lessons focus on the applications of Model-Driven Engineering (MDE), as all the three projects we draw on here were MDE projects. Our goal from structuring and sharing our experience is to contribute to a better understanding of how researchers and practitioners can collaborate more effectively and to gain more value from their collaborations.",1
Bridging the Gap: SE Technology Transfer into Practice: Study Design and Preliminary Results,"Background: Particularly during and after research projects, technology transfer into practice plays an important role for academia to get technologies into use and for industry to improve their development. Objective: Our goal was to gain more and current knowledge about how technology transfer from software engineering (SE) research into industrial practice is accomplished best and how to measure the effectiveness of this transfer. Method: We conducted a study in the context of two German research projects, covering many different organizations from industry and academia. Results: This paper presents the design of the study and the survey performed. After introducing the concept of technology transfer we used and adapted, we present preliminary results. Conclusions: We observed that traditional means such as meetings or workshops are still the most widely used mediums for technology transfer in SE. We also discovered that, even though the duration of transfer depends on the object being transferred, the average duration is three years, which is far less than previously published (~18 years).",1
Requirements Engineering Process Improvement: A Knowledge Transfer Experience,"In the last decade, research in requirements engineering has achieved great advances. Several methods, techniques and processes have been proposed in the literature. However, the pace of requirements engineering technology transfer has been slow. This paper presents a technology transfer project to improve the requirements engineering process in four software companies. We discuss this experience from the perspective of researchers and practitioners from one participating company.",1
A Modeling Language's Evolution Driven by Tight Interaction between Academia and Industry,"Domain specific languages play an important role in model-driven engineering of software-intensive industrial systems. A rich body of knowledge exists on the development of languages, modeling environments, and transformation systems. The understanding of architectural choices for combining these parts into a feasible solution, however, is not particularly deep. We report on an endeavor in the realm of a technology transfer process from academia to industry, where we encountered unexpected influences of the architecture on the modeling language. By examining the evolution of our language and its programming interface, we show that these influences mainly stemmed from practical considerations; for identifying these early on, tight interaction between our research lab and the industrial partner was key. In addition, we share insights into the practice of cooperating with industry by presenting essential lessons we learned.",1
Co-Evolutionary Service-Oriented Model of Technology Transfer in Software Engineering,"This article proposes a co-evolutionary service-oriented model, an organizational architecture for accelerating technology transfer between co-evolving organizations. Conventional model of technology transfer implies a unidirectional transfer from technology providers to technology requesters. However, this is not a case in successful technology transfer. In our experience, we observed a reciprocal feedback relationship between the providers and requesters. As the model of such collaboration, we propose a co-evolutionary model of technology transfer, which enables to adjust the level of maturity of technology to be transferred and accelerate the transfer process.",1
The Management of University--Industry Collaborations Involving Empirical Studies of Software Enginee,"In this chapter we will discuss some of the pragmatic considerations that we believe university researchers and companies should consider when establishing collaborative software engineering research projects; in particular, those involving empirical studies of software engineers. The chapter is illustrated using as a case study a research collaboration in which the authors are involved. We enumerate the costs, benefits, risks and risk-reducing factors that can have an impact on all the parties involved in the collaboration (the company, the faculty members and the graduate student researchers). Understanding this information is needed to help justify the research in the first place, and to manage it effectively. We then discuss many of the activities that will be needed to plan and manage the project, including such issues as attracting students, handling intellectual property, obtaining ethical approval and interacting with participants. The main objective of the chapter is to provoke some thoughts in the minds of those planning empirical research projects in software engineering.",1
External Experiments--A Workable Paradigm for Collaboration Between Industry and Academia,"Results of empirical investigations are key input for industrial software process improvement activities. The relevance of an investigation for a given environment, however, depends on the similarities or dissimilarities of the investigation environment compared to the industrial environment which is interested in using a new technology. The optimal (or most relevant) results may be gained when performing the experiment in the industrial environment itself. Unfortunately, this takes place only rarely as experiments in industrial environments are either expensive (when new and old technology are used in parallel) or risky (when only the new technology is used). To overcome this dilemma, we introduced the concept of external experiments, i.e. experiments which are conducted in an environment different from the industrial target environment and which tries to simulate the characteristics of the industrial environment as best as possible. This paper describes this concept in detail, presents a process for identification, conduction and exploitation of such experiments and shows some results from past investigations which used this concept",1
Requirements engineering technology transfer: an experience report,"This paper is an experience report on an initiative to incorporate requirements engineering practices into the development process of two large corporations. The project was framed by a government program to foster collaboration between academia, industry, and government agencies. Its expected result—proposals for cooperative work—is in itself a major challenge, since it was not decided from the beginning what aspect of requirements engineering would be covered by the proposals.We describe the cooperation process followed by the project partners, three universities, and two companies, the difficulties found therein, and compare our experience with other reports on the issue of adoption of requirements engineering into the mainstream practice.",1
Understanding and improving technology transfer in software engineering,"Technology transfer in software engineering involves more than a new idea or evidence that it works. This paper illustrates how technology transfer requires a good idea, the generation of evidence, analysis of that evidence, good packaging and support, and careful consideration of the audience for the technology. By learning from other disciplines, we present a model of technology transfer that can be tailored to a particular organisation's needs.",1
