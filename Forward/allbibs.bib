@inproceedings{10.1007/978-3-319-94496-8_4,
 abstract = {Enclaved execution environments, such as Intel SGX, enable secure, hardware-enforced isolated execution of critical application components without having to trust the underlying operating system or hypervisor. A recent line of research, however, explores innovative controlled-channel attacks mounted by untrusted system software to partially compromise the confidentiality of enclave programs. Apart from exploiting relatively well-known side-channels like the CPU cache and branch predictor, these attacks have so far focused on tracking side-effects from enclaved address translations via the paging unit.},
 address = {Cham},
 author = {Gyselinck, Jago
and Van Bulck, Jo
and Piessens, Frank
and Strackx, Raoul},
 booktitle = {Engineering Secure Software and Systems},
 editor = {Payer, Mathias
and Rashid, Awais
and Such, Jose M.},
 isbn = {978-3-319-94496-8},
 pages = {44--60},
 publisher = {Springer International Publishing},
 title = {Off-Limits: Abusing Legacy x86 Memory Segmentation to Spy on Enclaved Execution},
 year = {2018}
}

@inproceedings{10.1145/3190508.3190547,
 abstract = {Users of online services such as messaging, code hosting and collaborative document editing expect the services to uphold the integrity of their data. Despite providers' best efforts, data corruption still occurs, but at present service integrity violations are excluded from SLAs. For providers to include such violations as part of SLAs, the competing requirements of clients and providers must be satisfied. Clients need the ability to independently identify and prove service integrity violations to claim compensation. At the same time, providers must be able to refute spurious claims.We describe LibSEAL, a SEcure Audit Library for Internet services that creates a non-repudiable audit log of service operations and checks invariants to discover violations of service integrity. LibSEAL is a drop-in replacement for TLS libraries used by services, and thus observes and logs all service requests and responses. It runs inside a trusted execution environment, such as Intel SGX, to protect the integrity of the audit log. Logs are stored using an embedded relational database, permitting service invariant violations to be discovered using simple SQL queries. We evaluate LibSEAL with three popular online services (Git, ownCloud and Dropbox) and demonstrate that it is effective in discovering integrity violations, while reducing throughput by at most 14%.},
 address = {New York, NY, USA},
 articleno = {24},
 author = {Aublin, Pierre-Louis and Kelbert, Florian and O'Keeffe, Dan and Muthukumaran, Divya and Priebe, Christian and Lind, Joshua and Krahn, Robert and Fetzer, Christof and Eyers, David and Pietzuch, Peter},
 booktitle = {Proceedings of the Thirteenth EuroSys Conference},
 doi = {10.1145/3190508.3190547},
 isbn = {9781450355841},
 location = {Porto, Portugal},
 numpages = {15},
 publisher = {Association for Computing Machinery},
 series = {EuroSys '18},
 title = {LibSEAL: Revealing Service Integrity Violations Using Trusted Execution},
 url = {https://doi.org/10.1145/3190508.3190547},
 year = {2018}
}

@inproceedings{10.1145/3196494.3196524,
 abstract = {Microarchitectural side-channel attacks have received significant attention recently. However, while side-channel analyses on secret key operations such as decryption and signature generation are well established, the process of key generation did not receive particular attention so far. Especially due to the fact that microarchitectural attacks usually require multiple observations (more than one measurement trace) to break an implementation, one-time operations such as key generation routines are often considered as uncritical and out of scope. However, this assumption is no longer valid for shielded execution architectures, where sensitive code is executed - in the realm of a potential attacker - inside hardware enclaves. In such a setting, an untrusted operating system can conduct noiseless controlled-channel attacks by exploiting page access patterns. In this work, we identify a critical vulnerability in the RSA key generation procedure of Intel SGX SSL (and the underlying OpenSSL library) that allows to recover secret keys from observations of a single execution. In particular, we mount a controlled-channel attack on the binary Euclidean algorithm (BEA), which is used for checking the validity of the RSA key parameters generated within an SGX enclave. Thereby, we recover all but 16 bits of one of the two prime factors of the public modulus. For an 8192-bit RSA modulus, we recover the remaining 16 bits and thus the full key in less than 12 seconds on a commodity PC. In light of these results, we urge for careful re-evaluation of cryptographic libraries with respect to single trace attacks, especially if they are intended for shielded execution environments such as Intel SGX.},
 address = {New York, NY, USA},
 author = {Weiser, Samuel and Spreitzer, Raphael and Bodner, Lukas},
 booktitle = {Proceedings of the 2018 on Asia Conference on Computer and Communications Security},
 doi = {10.1145/3196494.3196524},
 isbn = {9781450355766},
 keywords = {openssl, intel sgx ssl, intel sgx, controlled-channel attack, side-channel attack, rsa key generation},
 location = {Incheon, Republic of Korea},
 numpages = {12},
 pages = {575–586},
 publisher = {Association for Computing Machinery},
 series = {ASIACCS '18},
 title = {Single Trace Attack Against RSA Key Generation in Intel SGX SSL},
 url = {https://doi.org/10.1145/3196494.3196524},
 year = {2018}
}

@inproceedings{10.1145/3230833.3234518,
 abstract = {Personal cryptographic keys are the foundation of many secure services, but storing these keys securely is a challenge, especially if they are used from multiple devices. Storing keys in a centralized location, like an Internet-accessible server, raises serious security concerns (e.g. server compromise). Hardware-based Trusted Execution Environments (TEEs) are a well-known solution for protecting sensitive data in untrusted environments, and are now becoming available on commodity server platforms.Although the idea of protecting keys using a server-side TEE is straight-forward, in this paper we validate this approach and show that it enables new desirable functionality. We describe the design, implementation, and evaluation of a TEE-based Cloud Key Store (CKS), an online service for securely generating, storing, and using personal cryptographic keys. Using remote attestation, users receive strong assurance about the behaviour of the CKS, and can authenticate themselves using passwords while avoiding typical risks of password-based authentication like password theft or phishing. In addition, this design allows users to i) define policy-based access controls for keys; ii) delegate keys to other CKS users for a specified time and/or a limited number of uses; and iii) audit all key usages via a secure audit log. We have implemented a proof of concept CKS using Intel SGX and integrated this into GnuPG on Linux and OpenKeychain on Android. Our CKS implementation performs approximately 6,000 signature operations per second on a single desktop PC. The latency is in the same order of magnitude as using locally-stored keys, and 20x faster than smart cards.},
 address = {New York, NY, USA},
 articleno = {40},
 author = {Kurnikov, Arseny and Paverd, Andrew and Mannan, Mohammad and Asokan, N.},
 booktitle = {Proceedings of the 13th International Conference on Availability, Reliability and Security},
 doi = {10.1145/3230833.3234518},
 isbn = {9781450364485},
 keywords = {Key management, Cloud, Intel SGX},
 location = {Hamburg, Germany},
 numpages = {10},
 publisher = {Association for Computing Machinery},
 series = {ARES 2018},
 title = {Keys in the Clouds: Auditable Multi-Device Access to Cryptographic Credentials},
 url = {https://doi.org/10.1145/3230833.3234518},
 year = {2018}
}

@inproceedings{10.1145/3243734.3243822,
 abstract = {Recent research on transient execution vulnerabilities shows that current processors exceed our levels of understanding. The prominent Meltdown and Spectre attacks abruptly revealed fundamental design flaws in CPU pipeline behavior and exception handling logic, urging the research community to systematically study attack surface from microarchitectural interactions. We present Nemesis, a previously overlooked side-channel attack vector that abuses the CPU's interrupt mechanism to leak microarchitectural instruction timings from enclaved execution environments such as Intel SGX, Sancus, and TrustLite. At its core, Nemesis abuses the same subtle microarchitectural behavior that enables Meltdown, i.e., exceptions and interrupts are delayed until instruction retirement. We show that by measuring the latency of a carefully timed interrupt, an attacker controlling the system software is able to infer instruction-granular execution state from hardware-enforced enclaves. In contrast to speculative execution vulnerabilities, our novel attack vector is applicable to the whole computing spectrum, from small embedded sensor nodes to high-end commodity x86 hardware. We present practical interrupt timing attacks against the open-source Sancus embedded research processor, and we show that interrupt latency reveals microarchitectural instruction timings from off-the-shelf Intel SGX enclaves. Finally, we discuss challenges for mitigating Nemesis-type attacks at the hardware and software levels.},
 address = {New York, NY, USA},
 author = {Van Bulck, Jo and Piessens, Frank and Strackx, Raoul},
 booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
 doi = {10.1145/3243734.3243822},
 isbn = {9781450356930},
 keywords = {SGX, microarchitecture, enclave, controlled-channel, meltdown},
 location = {Toronto, Canada},
 numpages = {18},
 pages = {178–195},
 publisher = {Association for Computing Machinery},
 series = {CCS '18},
 title = {Nemesis: Studying Microarchitectural Timing Leaks in Rudimentary CPU Interrupt Logic},
 url = {https://doi.org/10.1145/3243734.3243822},
 year = {2018}
}

@inproceedings{10.1145/3274694.3274741,
 abstract = {Microarchitectural side channels expose unprotected software to information leakage attacks where a software adversary is able to track runtime behavior of a benign process and steal secrets such as cryptographic keys. As suggested by incremental software patches for the RSA algorithm against variants of side-channel attacks within different versions of cryptographic libraries, protecting security-critical algorithms against side channels is an intricate task. Software protections avoid leakages by operating in constant time with a uniform resource usage pattern independent of the processed secret. In this respect, automated testing and verification of software binaries for leakage-free behavior is of importance, particularly when the source code is not available. In this work, we propose a novel technique based on Dynamic Binary Instrumentation and Mutual Information Analysis to efficiently locate and quantify memory based and control-flow based microarchitectural leakages. We develop a software framework named MicroWalk for side-channel analysis of binaries which can be extended to support new classes of leakage. For the first time, by utilizing MicroWalk, we perform rigorous leakage analysis of two widely-used closed-source cryptographic libraries: Intel IPP and Microsoft CNG. We analyze 15 different cryptographic implementations consisting of 112 million instructions in about 105 minutes of CPU time. By locating previously unknown leakages in hardened implementations, our results suggest that MicroWalk can efficiently find microarchitectural leakages in software binaries.},
 address = {New York, NY, USA},
 author = {Wichelmann, Jan and Moghimi, Ahmad and Eisenbarth, Thomas and Sunar, Berk},
 booktitle = {Proceedings of the 34th Annual Computer Security Applications Conference},
 doi = {10.1145/3274694.3274741},
 isbn = {9781450365697},
 keywords = {constant time, side channel, mutual information, cache attacks, binary instrumentation, microarchitectural leakage, dynamic program analysis, cryptographic implementations},
 location = {San Juan, PR, USA},
 numpages = {13},
 pages = {161–173},
 publisher = {Association for Computing Machinery},
 series = {ACSAC '18},
 title = {MicroWalk: A Framework for Finding Side Channels in Binaries},
 url = {https://doi.org/10.1145/3274694.3274741},
 year = {2018}
}

@inbook{10.1145/3292006.3300030,
 abstract = {With close to native performance, Linux containers are becoming the de facto platform for cloud computing. While various solutions have been proposed to secure applications and containers in the cloud environment by leveraging Intel SGX, most cloud operators do not yet offer SGX as a service. This is likely due to a number of security, scalability, and usability concerns coming from both cloud providers and users. Cloud operators worry about the security guarantees of unofficial SDKs, limited support for remote attestation within containers, limited physical memory for the Enclave Page Cache (EPC) making it difficult to support hundreds of enclaves, and potential DoS attacks against EPC by malicious users. Meanwhile, end users need to worry about careful program partitioning to reduce the TCB and adapting legacy applications to use SGX. We note that most of these concerns are the result of an incomplete infrastructure, from the OS to the application layer. We address these concerns with lxcsgx, which allows SGX applications to run inside containers while also: enabling SGX remote attestation for containerized applications, enforcing EPC memory usage control on a per-container basis, providing a general software TPM using SGX to augment legacy applications, and supporting partitioning with a GCC plugin. We then retrofit Nginx/OpenSSL and Memcached using the software TPM and SGX partitioning to defend against known and potential attacks. Thanks to the small EPC footprint of each enclave, we are able to run up to 100 containerized Memcached instances without EPC swapping. Our evaluation shows the overhead introduced by lxcsgx is less than 6.9% for simple SGX applications, 9.5% for Nginx/OpenSSL, and 20.9% for containerized Memcached.},
 address = {New York, NY, USA},
 author = {Tian, Dave (Jing) and Choi, Joseph I. and Hernandez, Grant and Traynor, Patrick and Butler, Kevin R. B.},
 booktitle = {Proceedings of the Ninth ACM Conference on Data and Application Security and Privacy},
 isbn = {9781450360999},
 numpages = {12},
 pages = {255–266},
 publisher = {Association for Computing Machinery},
 title = {A Practical Intel SGX Setting for Linux Containers in the Cloud},
 url = {https://doi.org/10.1145/3292006.3300030},
 year = {2019}
}

@inproceedings{10.1145/3292006.3302384,
 abstract = {Despite extensive research on cryptography, secure and efficient query processing over outsourced data remains an open challenge. This poster continues along the emerging trend in secure data processing that recognizes that the entire dataset may not be sensitive, and hence, non-sensitivity of data can be exploited to overcome some of the limitations of existing encryption-based approaches. In particular, this poster outlines a new secure keyword search approach, called query keyword binning (QB) that allows non-sensitive parts of the data to be outsourced in clear-text while guaranteeing that no information is leaked by joint processing of non-sensitive data (in clear-text) and sensitive data (in encrypted form). QB improves the performance of and strengthens the security of the underlying cryptographic technique by preventing size, frequency-count, and workload-skew attacks.},
 address = {New York, NY, USA},
 author = {Mehrotra, Sharad and Sharma, Shantanu and Ullman, Jeffrey D.},
 booktitle = {Proceedings of the Ninth ACM Conference on Data and Application Security and Privacy},
 doi = {10.1145/3292006.3302384},
 isbn = {9781450360999},
 keywords = {cryptographic techniques, scalability},
 location = {Richardson, Texas, USA},
 numpages = {3},
 pages = {165–167},
 publisher = {Association for Computing Machinery},
 series = {CODASPY '19},
 title = {Scaling Cryptographic Techniques by Exploiting Data Sensitivity at a Public Cloud},
 url = {https://doi.org/10.1145/3292006.3302384},
 year = {2019}
}

@inproceedings{10.1145/3307650.3322228,
 abstract = {The popularity of hardware-based Trusted Execution Environments (TEEs) has recently skyrocketed with the introduction of Intel's Software Guard Extensions (SGX). In SGX, the user process is protected from supervisor software, such as the operating system, through an isolated execution environment called an enclave. Despite the isolation guarantees provided by TEEs, numerous microarchitectural side channel attacks have been demonstrated that bypass their defense mechanisms. But, not all hope is lost for defenders: many modern fine-grain, high-resolution side channels---e.g., execution unit port contention---introduce large amounts of noise, complicating the adversary's task to reliably extract secrets.In this work, we introduce Microarchitectural Replay Attacks, whereby an SGX adversary can denoise nearly arbitrary microarchitectural side channels in a single run of the victim, by causing the victim to repeatedly replay on a page faulting instruction. We design, implement, and demonstrate our ideas in a framework, called MicroScope, and use it to denoise notoriously noisy side channels. Our main result shows how MicroScope can denoise the execution unit port contention channel. Specifically, we show how Micro-Scope can reliably detect the presence or absence of as few as two divide instructions in a single logical run of the victim program. Such an attack could be used to detect subnormal input to individual floating-point instructions, or infer branch directions in an enclave despite today's countermeasures that flush the branch predictor at the enclave boundary. We also use MicroScope to single-step and denoise a cache-based attack on the OpenSSL implementation of AES. Finally, we discuss the broader implications of microarchitectural replay attacks---as well as discuss other mechanisms that can cause replays.},
 address = {New York, NY, USA},
 author = {Skarlatos, Dimitrios and Yan, Mengjia and Gopireddy, Bhargava and Sprabery, Read and Torrellas, Josep and Fletcher, Christopher W.},
 booktitle = {Proceedings of the 46th International Symposium on Computer Architecture},
 doi = {10.1145/3307650.3322228},
 isbn = {9781450366694},
 keywords = {virtual memory, side-channel, security, operating system},
 location = {Phoenix, Arizona},
 numpages = {14},
 pages = {318–331},
 publisher = {Association for Computing Machinery},
 series = {ISCA '19},
 title = {MicroScope: Enabling Microarchitectural Replay Attacks},
 url = {https://doi.org/10.1145/3307650.3322228},
 year = {2019}
}

@inproceedings{10.1145/3321705.3329820,
 abstract = {The success of cloud computing has shown that the cost and convenience benefits of outsourcing infrastructure, platform, and software resources outweigh concerns about confidentiality. Still, many businesses and individuals resist moving private data to cloud providers due to intellectual property and privacy reasons. A recent wave of hardware virtualization technologies aims to alleviate these concerns by offering encrypted virtualization features that support data confidentiality of guest virtual machines (e.g., by transparently encrypting memory) even when running on top untrusted hypervisors. We introduce two new attacks that can breach the confidentiality of protected enclaves. First, we show how a cloud adversary can judiciously inspect the general purpose registers to unmask the computation that passes through them. Specifically, we demonstrate a set of attacks that can precisely infer the executed instructions and eventually capture sensitive data given only indirect access to the CPU state as observed via the general purpose registers. Second, we show that even under a more restrictive environment - where access to the general purpose registers is no longer available - we can apply a different inference attack to recover the structure of an unknown, running, application as a stepping stone towards application fingerprinting. We demonstrate the practicality of these inference attacks by showing how an adversary can identify different applications and even distinguish between versions of the same application and the compiler used, recover data transferred over TLS connections within the encrypted guest, retrieve the contents of sensitive data as it is being read from disk by the guest, and inject arbitrary data within the guest. Taken as a whole, these attacks serve as a cautionary tale of what can go wrong when the state of registers (e.g., in AMD's SEV) and application performance data (e.g. in AMD's SEV-ES) are left unprotected. The latter is the first known attack that was designed to specifically target SEV-ES.},
 address = {New York, NY, USA},
 author = {Werner, Jan and Mason, Joshua and Antonakakis, Manos and Polychronakis, Michalis and Monrose, Fabian},
 booktitle = {Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security},
 doi = {10.1145/3321705.3329820},
 isbn = {9781450367523},
 keywords = {inference attacks, SEV, SEV-ES},
 location = {Auckland, New Zealand},
 numpages = {13},
 pages = {73–85},
 publisher = {Association for Computing Machinery},
 series = {Asia CCS '19},
 title = {The SEVerESt Of Them All: Inference Attacks Against Secure Virtual Enclaves},
 url = {https://doi.org/10.1145/3321705.3329820},
 year = {2019}
}

@inproceedings{10.1145/3321705.3329835,
 abstract = {A protocol for two-party secure function evaluation (2P-SFE) aims to allow the parties to learn the output of function f of their private inputs, while leaking nothing more. In a sense, such a protocol realizes a trusted oracle that computes f and returns the result to both parties. There have been tremendous strides in efficiency over the past ten years, yet 2P-SFE protocols remain impractical for most real-time, online computations, particularly on modestly provisioned devices. Intel's Software Guard Extensions (SGX) provides hardware-protected execution environments, called enclaves, that may be viewed as trusted computation oracles. While SGX provides native CPU speed for secure computation, previous side-channel and micro-architecture attacks have demonstrated how security guarantees of enclaves can be compromised. In this paper, we explore a balanced approach to 2P-SFE on SGX-enabled processors by constructing a protocol for evaluating f relative to a partitioning of f. This approach alleviates the burden of trust on the enclave by allowing the protocol designer to choose which components should be evaluated within the enclave, and which via standard cryptographic techniques. We describe SGX-enabled SFE protocols (modeling the enclave as an oracle), and formalize the strongest-possible notion of 2P-SFE for our setting. We prove our protocol meets this notion when properly realized. We implement the protocol and apply it to two practical problems: privacy-preserving queries to a database, and a version of Dijkstra's algorithm for privacy-preserving navigation. Our evaluation shows that our SGX-enabled SFE scheme enjoys a 38x increase in performance over garbled-circuit-based SFE. Finally, we justify modeling of the enclave as an oracle by implementing protections against known side-channels.},
 address = {New York, NY, USA},
 author = {Choi, Joseph I. and Tian, Dave (Jing) and Hernandez, Grant and Patton, Christopher and Mood, Benjamin and Shrimpton, Thomas and Butler, Kevin R. B. and Traynor, Patrick},
 booktitle = {Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security},
 doi = {10.1145/3321705.3329835},
 isbn = {9781450367523},
 keywords = {protocols, SGX, secure function evaluation, partitioning},
 location = {Auckland, New Zealand},
 numpages = {14},
 pages = {100–113},
 publisher = {Association for Computing Machinery},
 series = {Asia CCS '19},
 title = {A Hybrid Approach to Secure Function Evaluation Using SGX},
 url = {https://doi.org/10.1145/3321705.3329835},
 year = {2019}
}

@inproceedings{10.1145/3321705.3329848,
 abstract = {Recent advances in trusted execution environments, specifically with Intel's introduction of SGX on consumer processors, have provided unprecedented opportunities to create secure applications with a small TCB. While a large number of SGX solutions have been proposed, nearly all of them focus on protecting native code applications, leaving scripting languages unprotected. To fill this gap, this paper presents SCRIPTSHIELD, a framework capable of running legacy script code while simultaneously providing confidentiality and integrity for scripting code and data. In contrast to the existing schemes that either require tedious and time-consuming re-development or result in a large TCB by importing an entire library OS or container, SCRIPTSHIELD keeps the TCB small and provides backwards compatibility (i.e., no changes needed to the scripting code itself). The core idea is to customize the script interpreter to run inside an SGX enclave and pass scripts to it. We have implemented SCRIPTSHIELD and tested with three popular scripting languages: Lua, JavaScript, and Squirrel. Our experimental results show that SCRIPTSHIELD does not cause noticeable overhead. The source code of SCRIPTSHIELD has been made publicly available as an open source project.},
 address = {New York, NY, USA},
 author = {Wang, Huibo and Bauman, Erick and Karande, Vishal and Lin, Zhiqiang and Cheng, Yueqiang and Zhang, Yinqian},
 booktitle = {Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security},
 doi = {10.1145/3321705.3329848},
 isbn = {9781450367523},
 keywords = {scripting language, integrity, confidentiality, SGX},
 location = {Auckland, New Zealand},
 numpages = {8},
 pages = {114–121},
 publisher = {Association for Computing Machinery},
 series = {Asia CCS '19},
 title = {Running Language Interpreters Inside SGX: A Lightweight,Legacy-Compatible Script Code Hardening Approach},
 url = {https://doi.org/10.1145/3321705.3329848},
 year = {2019}
}

@article{Montasari_2018,
 author = {Reza Montasari and Amin Hosseinian-Far and Richard Hill and Farshad Montaseri and Mak Sharma and Shahid Shabbir},
 doi = {10.4018/ijoci.2018040103},
 journal = {International Journal of Organizational and Collective Intelligence},
 month = {apr},
 number = {2},
 pages = {32--59},
 publisher = {{IGI} Global},
 title = {Are Timing-Based Side-Channel Attacks Feasible in Shared, Modern Computing Hardware?},
 url = {https://doi.org/10.4018%2Fijoci.2018040103},
 volume = {8},
 year = {2018}
}

@article{Szefer_2018,
 abstract = {Over the last two decades, side and covert channel research has shown a variety of ways of exfiltrating information for a computer system. Processor microarchitectural timing-based side and covert channel attacks have emerged as some of the most clever attacks, and ones which are difficult to deal with, without impacting system performance. Unlike electromagnetic or power-based channels, microarchitectural timing-based side and covert channel do not require physical proximity to the target device. Instead, only malicious or cooperating spy applications need to be co-located on the same machine as the victim. And in some attacks even co-location is not needed, only timing of the execution of the victim application, as measured by a remote attacker, can lead to information leaks. This survey extracts the key features of the processor’s microarchitectural functional units which make the channels possible, presents an analysis and categorization of the variety of microarchitectural side and covert channels others have presented in literature, and surveys existing defense proposals. With advent of cloud computing and ability to launch microarchitectural side and covert channels even across virtual machines, understanding of these channels is critical for cybersecurity.},
 author = {Jakub Szefer},
 doi = {10.1007/s41635-018-0046-1},
 journal = {Journal of Hardware and Systems Security},
 month = {sep},
 number = {3},
 pages = {219--234},
 publisher = {Springer Science and Business Media {LLC}},
 title = {Survey of Microarchitectural Side and Covert Channels, Attacks, and Defenses},
 url = {https://doi.org/10.1007%2Fs41635-018-0046-1},
 volume = {3},
 year = {2018}
}

